<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>类型断言</title>
      <link href="/2023/04/29/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/"/>
      <url>/2023/04/29/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：<span id="more"></span></h1><p>如果 Add() 函数的调用代码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a Integer = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> b Integer = <span class="hljs-number">2</span><br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = &amp;a<br>sum := i.(*Integer).Add(b)<br>fmt.Println(sum)<br>&#125;<br></code></pre></td></tr></table></figure><p>则Add函数定义正确的是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go">A.<br><span class="hljs-keyword">type</span> Integer <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Integer)</span></span> Add(b Integer) Integer &#123;<br>        <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br>B.<br><span class="hljs-keyword">type</span> Integer <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a Integer)</span></span> Add(b *Integer) Integer &#123;<br>        <span class="hljs-keyword">return</span> a + *b<br>&#125;<br><br>C.<br><span class="hljs-keyword">type</span> Integer <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Integer)</span></span> Add(b Integer) Integer &#123;<br>        <span class="hljs-keyword">return</span> *a + b<br>&#125;<br><br>D.<br><span class="hljs-keyword">type</span> Integer <span class="hljs-type">int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Integer)</span></span> Add(b *Integer) Integer &#123;<br>        <span class="hljs-keyword">return</span> *a + *b<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">AC</span><br></code></pre></td></tr></table></figure><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>​在 <code>main</code> 函数中，<code>i</code> 被定义为一个接口类型的变量，它的值是指向变量 <code>a</code> 的指针。当调用 <code>Add</code> 函数时，使用了类型断言 <code>i.(*Integer)</code> 来将接口类型的变量 <code>i</code> 转换为 <code>*Integer</code> 类型。类型断言的语法为 <code>x.(T)</code>，其中 <code>x</code> 是一个接口类型的表达式，<code>T</code> 是一个类型。类型断言检查 <code>x</code> 的动态类型是否等于 <code>T</code>，如果检查成功，则返回 <code>x</code> 的动态值，否则会引发运行时恐慌。</p><p>​在这个例子中，由于 <code>i</code> 的动态类型为 <code>*Integer</code>，因此类型断言成功，并返回了指向变量 <code>a</code> 的指针。因此，当调用 <code>Add</code> 函数时，可以使用指针接收器 <code>*Integer</code>（选项 C），也可以使用值接收器 <code>Integer</code>（选项 A）。在 Go 语言中，当使用指针调用一个值接收器方法时，编译器会自动解引用该指针。</p><p>​同时，由于 <code>b</code> 是一个值类型的变量，所以在 <code>Add</code> 函数中应该使用值类型的参数 <code>Integer</code>。因此，选项 B 和 D 都是错误的。</p><p>​综上所述，正确答案是 A 和 C。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>switch语句</title>
      <link href="/2023/04/28/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/switch%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/04/28/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/switch%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：<span id="more"></span></h1><p>关于switch语句，下面说法正确的有?</p><ul><li>A. 条件表达式必须为常量或者整数；</li><li>B. 单个case中，可以出现多个结果选项；</li><li>C. 需要用break来明确退出一个case；</li><li>D. 只有在case中明确添加fallthrough关键字，才会继续执行紧跟的下一个case；</li></ul><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">B</span>、D<br></code></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>A：错误。条件表达式可以是任何类型的表达式，而不仅仅是常量或整数，比如字符串、浮点数、布尔值等都是可以的。<br>B：正确。在单个case语句块中，可以有多个结果选项。比如，可以在一个case中执行多个语句，也可以用表达式或者函数，用分号分隔即可，</p><p>C：错误。在switch语句中，每个case语句块执行完毕后会自动退出，不需要使用break语句来明确退出。但是，在某些情况下，可能需要在case中使用break语句，以避免执行下一个case。</p><p>D：正确。当在一个case中使用了fallthrough关键字时，程序会跳过当前case中的break语句，并执行紧跟的下一个case。如果没有使用fallthrough关键字，则当前case执行完毕后会自动退出switch语句。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang小知识</title>
      <link href="/2023/04/27/Go/Golang%E9%A2%98%E5%BA%93/"/>
      <url>/2023/04/27/Go/Golang%E9%A2%98%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类型转化</title>
      <link href="/2023/04/27/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/"/>
      <url>/2023/04/27/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：<span id="more"></span></h1><p>关于类型转化，下面选项正确的是？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">A.<br><span class="hljs-keyword">type</span> MyInt <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = i<br><br>B.<br><span class="hljs-keyword">type</span> MyInt <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = (MyInt)i<br><br>C.<br><span class="hljs-keyword">type</span> MyInt <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = MyInt(i)<br><br>D.<br><span class="hljs-keyword">type</span> MyInt <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> j MyInt = i.(MyInt)<br></code></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">C</span><br></code></pre></td></tr></table></figure><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><ul><li>​A选项是错误的，因为将int类型的变量赋值给MyInt类型的变量是不允许的。</li><li>选项 B 是错误的，应该是使用类型转换语法将 int 类型的变量转换为 MyInt 类型，即 <code>var j MyInt = MyInt(i)</code>。</li><li>对于选项 C，使用类型转换表达式 <code>MyInt(i)</code> 可以将 <code>i</code> 的值从 <code>int</code> 类型转换为 <code>MyInt</code> 类型，并将结果赋给 <code>j</code>。</li><li>对于选项 D，使用类型断言 <code>i.(MyInt)</code> 是错误的，因为 <code>i</code> 的底层类型是 <code>int</code>，而不是 <code>MyInt</code>，所以无法将其转换为 <code>MyInt</code> 类型。</li></ul><p><strong>类型断言</strong>：用于将接口类型的值转换为具体的类型。在转换的过程中需要注意以下几点：</p><ol><li>语法：value.(type)<ul><li>value：接口类型的值</li><li>type：需要转换的具体类型</li></ul></li><li>转换前需要判断接口类型的值是否为 nil 或者对应类型的零值，避免在转换时出现 panic。</li></ol><p>下面是一个类型断言的正确使用示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-number">1</span><br><br>v, _ := i.(<span class="hljs-type">int</span>)<br>str, _ := i.(<span class="hljs-type">string</span>)<br>fmt.Println(<span class="hljs-string">&quot;v type is&quot;</span>, reflect.TypeOf(v))<br>fmt.Println(<span class="hljs-string">&quot;str type is&quot;</span>, reflect.TypeOf(str))<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">v <span class="hljs-keyword">type</span> is <span class="hljs-type">int</span><br>str <span class="hljs-keyword">type</span> is <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多重赋值</title>
      <link href="/2023/04/26/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%A4%9A%E9%87%8D%E8%B5%8B%E5%80%BC/"/>
      <url>/2023/04/26/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%A4%9A%E9%87%8D%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目<span id="more"></span></h1><h4 id="下面代码输出正确的是？"><a href="#下面代码输出正确的是？" class="headerlink" title="下面代码输出正确的是？"></a>下面代码输出正确的是？</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>i := <span class="hljs-number">1</span><br>s := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>&#125;<br>i, s[i<span class="hljs-number">-1</span>] = <span class="hljs-number">2</span>, <span class="hljs-string">&quot;Z&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;s: %v \n&quot;</span>, s)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">A. s: [Z,B,C]<br>B. s: [A,Z,C]<br></code></pre></td></tr></table></figure><h4 id="正确答案："><a href="#正确答案：" class="headerlink" title="正确答案："></a>正确答案：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span><br></code></pre></td></tr></table></figure><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>​多重赋值分为两个步骤，有先后顺序：</p><ul><li>计算等号左边的索引表达式和取址表达式，接着计算等号右边的表达式；</li><li>赋值；</li></ul><p>​所以本题，会先计算 s[i-1]，等号右边是两个表达式是常量，所以赋值运算等同于 <code>i, s[0] = 2, &quot;Z&quot;</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环语句</title>
      <link href="/2023/04/25/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/04/25/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下<span id="more"></span></h2><p>关于循环语句，下面说法正确的有（）</p><ul><li>A. 循环语句既支持 for 关键字，也支持 while 和 do-while；</li><li>B. 关键字 for 的基本使用方法与 C&#x2F;C++ 中没有任何差异；</li><li>C. for 循环支持 continue 和 break 来控制循环，但是它提供了一个更高级的 break，可以选择中断哪一个循环；</li><li>D. for 循环不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量；</li></ul><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">C、D<br></code></pre></td></tr></table></figure><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><ul><li><p>A. 该选项不正确。Go语言中只支持for循环语句，而不支持while和do-while循环语句。但是for循环的使用方法较为灵活，使用 <code>for</code> 循环来模拟这些语句的效果。可以满足大部分循环需求。</p></li><li><p>选项 B 中的说法不正确，因为 Go 语言中的 <code>for</code> 语句与 C&#x2F;C++ 中略有不同。例如：</p><ul><li>条件语句中不需要括号；</li><li>可以省略条件语句，相当于 <code>while(true)</code>；</li><li>提供了一个更高级的 <code>break</code>，可以选择中断哪一个循环；</li><li>不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量。</li></ul></li><li><p>C. 该选项正确。Go语言的for循环语句支持continue和break关键字来控制循环流程，同时还提供了一个更高级的break，可以选择中断指定的循环语句。</p><ul><li><p>这里使用<strong>Loop</strong>标签，用于选择需要中断哪一个循环，下面的例子选择中断外面的循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>Loop:<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">1</span> &#123;<br><span class="hljs-comment">// 使用标签选择中断外层循环</span><br><span class="hljs-keyword">break</span> Loop<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;i:%d, j:%d\n&quot;</span>, i, j)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 标签名为 Loop，用于中断外层循环</span><br>fmt.Println(<span class="hljs-string">&quot;Done!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">i:<span class="hljs-number">0</span>, j:<span class="hljs-number">0</span><br>i:<span class="hljs-number">0</span>, j:<span class="hljs-number">1</span><br>i:<span class="hljs-number">0</span>, j:<span class="hljs-number">2</span><br>i:<span class="hljs-number">1</span>, j:<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>下面的例子选择中断内部循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>ID   <span class="hljs-type">uint</span><br>Name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br>Loop:<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">1</span> &#123;<br><span class="hljs-comment">// 使用标签选择中断外层循环</span><br><span class="hljs-keyword">break</span> Loop<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;i:%d, j:%d\n&quot;</span>, i, j)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 标签名为 Loop，用于中断内层循环</span><br>fmt.Println(<span class="hljs-string">&quot;Done!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">i:<span class="hljs-number">0</span>, j:<span class="hljs-number">0</span><br>i:<span class="hljs-number">0</span>, j:<span class="hljs-number">1</span><br>i:<span class="hljs-number">0</span>, j:<span class="hljs-number">2</span><br>i:<span class="hljs-number">1</span>, j:<span class="hljs-number">0</span><br>i:<span class="hljs-number">2</span>, j:<span class="hljs-number">0</span><br>i:<span class="hljs-number">2</span>, j:<span class="hljs-number">1</span><br>i:<span class="hljs-number">2</span>, j:<span class="hljs-number">2</span><br>Done!<br></code></pre></td></tr></table></figure></li><li><p>对比上述两种情况，应该就能大概理解这个<strong>Loop</strong>的用法了。</p></li></ul></li><li><p>D. 该选项正确。Go语言中的for循环语句不支持以逗号为间隔的多个赋值语句，必须使用平行赋值的方式来初始化多个变量。</p><ul><li><pre><code class="go">//会报错for i := 0, j := 1; i &lt; 10; i ++&#123;        ...    &#125;<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ```go<br>  <span class="hljs-regexp">//</span>可以正常使用<br>  <span class="hljs-regexp">//</span>平行赋值： i, j := <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> i, j := <span class="hljs-number">0</span>, <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>  <br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MySQL必知必会》</title>
      <link href="/2023/04/24/MySQL/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"/>
      <url>/2023/04/24/MySQL/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>持续更新中……<span id="more"></span></p><h1 id="《MySQL必知必会》"><a href="#《MySQL必知必会》" class="headerlink" title="《MySQL必知必会》"></a>《MySQL必知必会》</h1><h2 id="一、了解SQL"><a href="#一、了解SQL" class="headerlink" title="一、了解SQL"></a>一、了解SQL</h2><h3 id="1、数据库基础"><a href="#1、数据库基础" class="headerlink" title="1、数据库基础"></a>1、数据库基础</h3><p><strong>数据库</strong>：一个以某种有组织的方式存储的数据集合。</p><p><strong>表</strong>：一种结构化的文件，可用来存储某种特定类型的数据。数据库中的每个表都有一个自己的名字，用来标识自己，此名字是唯一的。</p><blockquote><p><strong>表名</strong>：相同数据库不能两次使用相同的表名，不同数据库可以使用相同的表名。</p></blockquote><p><strong>列</strong>：表中的一个字段。所有表都说由一个或者多个列组成的。可以把数据库想象成一个网格，每一列存储着一条特定的信息，如一个列存储所有顾客的编号，另一个列存储所有顾客的地址。</p><p><strong>数据类型</strong>：每个表列都有相应的数据类型，它限制该列中存储的数据。</p><p><strong>行</strong>：表中的数据是按行存储的，所保存的每个记录存储在自己的行内，如果将表想象成网格，网格中垂直的列为表列，水平行为表行。例如顾客表可以每行存储一个顾客，表中的行数为记录的总数。</p><p><strong>主键</strong>：一列或者一组列。其值能够唯一区分表中的每个行。表中每一行都应该有可以唯一标识自己的一列。</p><p>​唯一标识表中每行的这个列或者这组列称为主键。主键用来表示要给特定的行。</p><blockquote><p><strong>应该总是定义主键</strong>：虽然并不是总需要主键，但为每个表创建一个主键，以便于以后的数据操作和管理。</p></blockquote><p>​表中的任何列都可以作为主键，只有满足以下条件：</p><ul><li>任意两行不具有相同的 主键值</li><li>每个行都必须有一个主键值（主键列不允许NULL值）</li></ul><p>​在使用多列作为主键时，上述条件必须应用到构造主键的所有列，所有列值的组合必须是唯一的。</p><h3 id="2、什么是SQL"><a href="#2、什么是SQL" class="headerlink" title="2、什么是SQL"></a>2、什么是SQL</h3><p><strong>SQL</strong>是结构化查询语言的缩写。SQL是一种专门用来与数据库通信的语言。</p><p><strong>SQL的优点</strong>：</p><ul><li>几乎所有重要的DBMS都支持SQL，所以学习此语言使你几乎能与所有数据库打交道。</li><li>简单易学。</li><li>虽然看上去很简单，但实际上是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ul><h2 id="二、MySQL简介"><a href="#二、MySQL简介" class="headerlink" title="二、MySQL简介"></a>二、MySQL简介</h2><h3 id="1、什么是MySQL"><a href="#1、什么是MySQL" class="headerlink" title="1、什么是MySQL"></a>1、什么是MySQL</h3><p>​<strong>MySQL</strong>：数据的所有存储、检索、管理和吹了实际上是由数据库软件——DBMS（数据库管理系统）完成的。MySQL是一种DBMS，即它是一种数据库软件。</p><p>​MySQL数据库是基于客户机-服务器的数据库。</p><h3 id="2、MySQL工具"><a href="#2、MySQL工具" class="headerlink" title="2、MySQL工具"></a>2、MySQL工具</h3><p>​<strong>mysql命令行实用程序</strong>：每个MySQL安装都会有一个mysql的简单命令行使用程序。在使用这个实用程序的时候，需要注意：</p><ul><li>命令行输入在mysql&gt;之后</li><li>命令用;或者\g结束，仅按Enter不执行命令</li><li>输入help或者\h获取帮助。</li><li>输入quit或者exit退出命令行实用程序。</li></ul><p><strong>MySQL Administrator</strong>：是一个图形交互客户机，用于简化MySQL服务器的管理。</p><p><strong>MySQL Query Browser</strong>：一个图形交互客户机，用来编写和执行MySQL命令。</p><h2 id="三、使用MySQL"><a href="#三、使用MySQL" class="headerlink" title="三、使用MySQL"></a>三、使用MySQL</h2><h3 id="1、连接"><a href="#1、连接" class="headerlink" title="1、连接"></a>1、连接</h3><p><strong>信息</strong>：连接MySQl，需要以下信息：</p><ul><li>主机名——连接本地MySQL服务器，为localhost；</li><li>端口（如果使用默认端口3306之外的端口）；</li><li>一个合法的用户名；</li><li>用户口令。</li></ul><h3 id="2、选择数据库"><a href="#2、选择数据库" class="headerlink" title="2、选择数据库"></a>2、选择数据库</h3><p><code>use</code>：一个关键字，用于执行任意数据库操作前选择一个数据库。</p><h3 id="3、了解数据库和表"><a href="#3、了解数据库和表" class="headerlink" title="3、了解数据库和表"></a>3、了解数据库和表</h3><p><strong>查看数据库</strong>：在你不知道可以使用哪些数据库名时，可以使用<code>SHOW DATABASES</code>显示这些信息</p><p>​<code>SHOW DATABASES</code>；返回可用数据库的一个列表。</p><p><strong>查看要给数据库内的表的列表</strong>：可以使用<code>SHOW TABLES</code></p><p>​<code>SHOW TABLES</code>；返回当前选择的数据库内的可用表的列表。</p><p><strong>查看表的信息</strong>：<code>SHOW COLUMNS FROM TABLE</code>要求给出一个表名，它对于每个字段返回一行，行中包括字段名、数据类型、是否允许NULL、键信息、默认值、以及其他信息。</p><p><strong>所支持的其他SHOW语句</strong>：</p><ul><li><code>SHOW STATUS</code>，用于显示广泛的服务器状态信息；</li><li><code>SHOW CREATE DATABASE</code>和<code>SHOW CREATE TABLE</code>，分别用来显示创建特定数据库或表的MySQL语句；</li><li><code>SHOW GRANTS</code>用来显示授权用户的安全权限</li><li><code>SHO ERRORS</code>和<code>SHOW WARNINGS</code>用来显示服务器错误或者警告信息。</li></ul><h2 id="四、检索数据"><a href="#四、检索数据" class="headerlink" title="四、检索数据"></a>四、检索数据</h2><h3 id="1、SELECT语句"><a href="#1、SELECT语句" class="headerlink" title="1、SELECT语句"></a>1、SELECT语句</h3><p>​SQL语句是用简单的英语单词构成的，这些单词称为关键词，每个SQL语句都是由一个或者多个关键字构成的。</p><p>​最经常使用的SQL语句就是<code>SELECT</code>语句，它的用途是从一个或者多个表中检索信息。使用<code>SELECT</code>检索信息，至少给出两条信息——想选择什么，以及从什么地方开始选择。</p><h3 id="2、检索单个列"><a href="#2、检索单个列" class="headerlink" title="2、检索单个列"></a>2、检索单个列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name <br>FROM products;<br></code></pre></td></tr></table></figure><p>​上述语句利用<code>SELECT</code>语句从<code>products</code>表中检索一个名为<code>prod_name</code>的列。</p><h3 id="3、检索多个列"><a href="#3、检索多个列" class="headerlink" title="3、检索多个列"></a>3、检索多个列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name, prod_price <br>FROM products;<br></code></pre></td></tr></table></figure><h3 id="4、检索所有列"><a href="#4、检索所有列" class="headerlink" title="4、检索所有列"></a>4、检索所有列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM products;<br></code></pre></td></tr></table></figure><h3 id="5、检索不同的行"><a href="#5、检索不同的行" class="headerlink" title="5、检索不同的行"></a>5、检索不同的行</h3><p>执行下面语句，会返回所有匹配的行，但其中有很多重复的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_id <br>From products;<br></code></pre></td></tr></table></figure><p>如果你不想要每个值每次都出现，怎么办？例如，你想得出products表中产品的所有供应商的ID：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT vend_id<br>FROM products;<br></code></pre></td></tr></table></figure><p> 解决的办法是使用<code>DISTINCT</code>，顾名思义，此关键字指示MySQL只返回不同的值。</p><h3 id="6、限制结果"><a href="#6、限制结果" class="headerlink" title="6、限制结果"></a>6、限制结果</h3><p>​<strong>SELECT</strong>语句返回所有匹配的行，它们可能是指定表中的每个行。为了返回第一行或者前几行，可以使用<strong>LIMIT</strong>子句。</p><p>​此语句使用<strong>SELECT</strong>语句检索单个列。<code>LIMIT 5</code>指示<strong>MySQL</strong>返回不多于5行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name <br>FROM products<br>LIMIT 5;<br></code></pre></td></tr></table></figure><p>​为得出下一个5行，可以指定要检索的开始和行数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name <br>FROM products<br>LIMIT 5, 5;<br></code></pre></td></tr></table></figure><p><code>LIMIT 5, 5</code>指示<strong>MySQL</strong>返回从<strong>行5</strong>开始的<strong>5行</strong>。第一个数为开始为止，第二个数为要检索的行数。</p><blockquote><p>⭐<strong>行0</strong>：检索出来的第一行为行0，而不是行1，因此<code>LIMIT 1, 1</code>将检索出来第二行而不是第一行。</p></blockquote><blockquote><p>⭐<strong>在行数不够时</strong>：<strong>LIMIT</strong>中指定要检索的行数为检索的最大行数，如果没用足够的行，<strong>MySQL</strong>将只返回它能返回的那么多行。</p></blockquote><h3 id="7、使用完全限定的表名"><a href="#7、使用完全限定的表名" class="headerlink" title="7、使用完全限定的表名"></a>7、使用完全限定的表名</h3><p>​迄今为止使用的<strong>SQL</strong>例子只能通过列名引用列。也可能会使用完全限定的名字来引用列（同时使用表名和列名）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select products.prod_name<br>FROM products;<br></code></pre></td></tr></table></figure><p>​这条<strong>SQL</strong>语句在功能上等于本章最开始使用的那一条语句，但这里指定了一个完全限定的列名。</p><p>​表名也可以是完全限定的，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select products.prod_name<br>FROM book.products;<br></code></pre></td></tr></table></figure><p>​这条SQL语句在功能上等于刚刚使用的那条语句（假设products表确实存在book数据库中）</p><p>​虽然这种表示很麻烦，但是有些情形需要这么用，后面会介绍。</p><h2 id="五、排序检索数据"><a href="#五、排序检索数据" class="headerlink" title="五、排序检索数据"></a>五、排序检索数据</h2><h3 id="1、排序数据"><a href="#1、排序数据" class="headerlink" title="1、排序数据"></a>1、排序数据</h3><p>​正如前面所述，下面的<strong>SQL</strong>语句返回某个数据库表的单个列，但却没用特定的顺序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products;<br></code></pre></td></tr></table></figure><p>​其次，检索出来的数据并不是以纯粹的随机顺序显示的。如果不排序，数据一般将以它在底层表中出现的顺序显示。这可以是数据最初添加到表中的顺序。但是，如果数据后来进行过更新或删除，则此顺序会收到MySQL重用收回存储空间的影响。因此，如果补明确控制的话，不能（也不应该）依赖该排序顺序。关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义。</p><p>​为了明确地排序用<strong>SELECT</strong>语句检索出来的数据，可以用<strong>ORDER BY</strong>自居。<strong>ORDER BY</strong>子句取一个或多个列的名字，据此对输出进行排序。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products<br>ORDER BY prod_name;<br></code></pre></td></tr></table></figure><p>​这条语句除了指示<strong>MySQL</strong>对<code>prod_name</code>列以字母顺序排序数据的<strong>ORDER BY</strong>子句外，与前面的语句相同。</p><h3 id="2、按多个列排序"><a href="#2、按多个列排序" class="headerlink" title="2、按多个列排序"></a>2、按多个列排序</h3><p>​下面的语句指示<strong>MySQL</strong>按照——先按价格，然后再按名称排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name, prod_price<br>FROM products<br>ORDER BY prod_price, prod_name;<br></code></pre></td></tr></table></figure><h3 id="3、指定排序方向"><a href="#3、指定排序方向" class="headerlink" title="3、指定排序方向"></a>3、指定排序方向</h3><p>​数据排序分为——升序排序（默认）、降序排序。</p><p>​当我们想使用降序排序的时候，必须指定<strong>DESC</strong>关键字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name, prod_price<br>FROM products<br>ORDER BY prod_price DESC;<br></code></pre></td></tr></table></figure><p>​但是，如果打算用多个列排序怎么办？下面的例子以降序排序产品（最贵的在前面），然后再对产品名排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name, prod_price<br>FROM products<br>ORDER BY prod_price DESC, prod_name;<br></code></pre></td></tr></table></figure><blockquote><p><strong>DESC</strong>关键字只应用到直接位于其前面的列名。如果想在多个列上进行降序排序，必须对每个列指定<strong>DECS</strong>关键字。</p><p>与<strong>DESC</strong>对应的是<strong>ASC</strong>关键字，在升序排序时可以指定它，但实际上没用多大用处，因为升序是默认的。</p></blockquote><p>​使用<strong>ORDER BY</strong>和<strong>LIMIT</strong>的组合，能够找出一个列中最高或者最低的只。下面的例子演示如何找出最昂贵物品的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_price<br>FROM products<br>ORDER BY prod_price DESC<br>LIMIT 1<br></code></pre></td></tr></table></figure><p>​<code>prod_price DESC</code>保证行是按照最昂贵到最便宜检索的，而<code>LIMIT 1</code>告诉<strong>MySQL</strong>仅返回一行。</p><h2 id="六、过滤数据"><a href="#六、过滤数据" class="headerlink" title="六、过滤数据"></a>六、过滤数据</h2><h3 id="1、使用WHERE子句"><a href="#1、使用WHERE子句" class="headerlink" title="1、使用WHERE子句"></a>1、使用WHERE子句</h3><p>​数据库表一般包含大量的数据，很少需要检索表中所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件，搜索条件也称为过滤条件。</p><p>​在SELECT语句中，数据根据WHERE子中指定的搜索条件进行过滤WHERE子句在表名之后给出，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, prod_price<br>FROM products<br>WHERE prod_price = 2.50;<br></code></pre></td></tr></table></figure><p>​这条语句从products表中检索两个列，但不返回所有行，只返回prod_price值为2.50的行。</p><h3 id="2、WHERE子句操作符"><a href="#2、WHERE子句操作符" class="headerlink" title="2、WHERE子句操作符"></a>2、WHERE子句操作符</h3><p>​<img src="/images/where.png" alt="子句操作符"></p><h4 id="（1）检查单个值"><a href="#（1）检查单个值" class="headerlink" title="（1）检查单个值"></a>（1）检查单个值</h4><p>​上面举的例子就是，我们再举一个例子，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select prod_name, prod_price<br>FROM products<br>where prod_name = &#x27;fuses&#x27;;<br></code></pre></td></tr></table></figure><p>​检查<code>WHERE prod_name=fuses</code>语句，它返回prod_name的值为Fuses的一行。MySQL在执行匹配时默认不区分大小写，所以fuses与Fuses匹配。</p><h4 id="（2）不匹配检查"><a href="#（2）不匹配检查" class="headerlink" title="（2）不匹配检查"></a>（2）不匹配检查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select vend_id, prod_name<br>FROM products<br>where vend_id &lt;&gt; 1003<br></code></pre></td></tr></table></figure><p>​上述例子是列出不是由供应商1003制造的所有产品。</p><p>下面是相同的例子，只是用的是**!&#x3D;<strong>而不是</strong>&lt;&gt;**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select vend_id, prod_name<br>FROM products<br>where vend_id != 1003<br></code></pre></td></tr></table></figure><h4 id="（3）范围值检查"><a href="#（3）范围值检查" class="headerlink" title="（3）范围值检查"></a>（3）范围值检查</h4><p>​为了检查某个范围的值，可使用BETWEEN操作符。其语法与其他WHERE子句的操作符稍有不同，因为它需要两个值，即范围的开始值和结束值。</p><p>​例如，BETWEEN操作符可用来检索价格在5美元和10美元之间或日期在指定的开始日期和结束日期之间的所有产品，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECTprod_name,prod_price <br>FROMproducts <br>WHEREprod_price BETWEEN 5 AND 10;<br></code></pre></td></tr></table></figure><p>​从这个例子中可以看到，在使用BETWEEN时，必须指定两个值——所需范围的低端值和高端值。这两个值必须用AND关键字分隔。BETWEEN匹配范围中所有的值，包括指定的开始值和结束值。</p><h4 id="（4）空值检查"><a href="#（4）空值检查" class="headerlink" title="（4）空值检查"></a>（4）空值检查</h4><p>​在创建表时，表设计人员可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值<strong>NULL</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id<br>FROM customers<br>WHERE cust_email IS NULL<br></code></pre></td></tr></table></figure><p>​ustomers包含有具有空值的列，如果在文件中没有某位顾客的电子邮件地址，则cust_email列将包含NULL值:</p><h2 id="七、数据过滤"><a href="#七、数据过滤" class="headerlink" title="七、数据过滤"></a>七、数据过滤</h2><h3 id="1、组合WHERE子句"><a href="#1、组合WHERE子句" class="headerlink" title="1、组合WHERE子句"></a>1、组合WHERE子句</h3><p>​第6章中介绍的所有WHERE子句在过滤数据时使用的都是单一的条件。为了进行更强的过滤控制，MySQL允许给出多个WHERE子句。这些子句可以两种方式使用:以AND子句的方式或OR子句的方式使用。</p><h4 id="（1）AND操作符"><a href="#（1）AND操作符" class="headerlink" title="（1）AND操作符"></a>（1）AND操作符</h4><p>​为了通过不止一个列进行过滤，可使用AND操作符给WHERE子句附加条件。下面的代码给出了一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_price, prod_name<br>FROM products<br>WHERE vend_id = 1003 AND prod_price &lt;= 10<br></code></pre></td></tr></table></figure><p>​此SQL语句检索由供应商1003制造且价格小于等于10美元的所有产品的名称和价格。这条SELECT语句中的WHERE子句包含两个条件，并且用AND关键字联结它们。AND指示DBMS只返回满足所有给定条件的行。如果某个产品由供应商1003制造，但它的价格高于10美元，则不检索它。类似，如果产品价格小于10美元，但不是由指定供应商制造的也不被检索。</p><h4 id="（2）OR操作符"><a href="#（2）OR操作符" class="headerlink" title="（2）OR操作符"></a>（2）OR操作符</h4><p>​<strong>OR</strong>操作符与<strong>AND</strong>操作符不同，它指示<strong>MySQL</strong>检索匹配任一条件的行，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, prod_price<br>FROM products<br>WHERE vend_id = 1002 OR vend_id = 1003;<br></code></pre></td></tr></table></figure><p>​此SQL语句检索由任一个指定供应商制造的所有产品的产品名和价格。OR操作符告诉DBMS匹配任一条件而不是同时匹配两个条件。</p><h4 id="（3）计算次序"><a href="#（3）计算次序" class="headerlink" title="（3）计算次序"></a>（3）计算次序</h4><p>​WHERE可包含任意数目的AND和OR操作符。允许两者结合以进行复杂和高级的过滤。<br>​但是，组合AND和OR带来了一个有趣的问题。为了说明这个问题，来看一个例子。假如需要列出价格为10美元(含）以上且由1002或1003制造的所有产品。下面的SELECT语句使用AND和OR操作符的组合建立了一个WHERE子句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, prod_price, vend_id<br>FROM products<br>WHERE vend_id = 1002 OR vend_id = 1003 AND prod_price &gt;= 10;<br></code></pre></td></tr></table></figure><p>​上面的结果返回的行中有两行价格小于10美元，显然，返回的行未按预期的进行过滤。为什么会这样呢?原因在于计算的次序。SQL(像多数语言一样）在处理OR操作符前，优先处理AND操作符。当SQL看到上述WHERE子句时，它理解为由供应商1003制造的任何价格为10美元(含）以上的产品，或者由供应商1002制造的任何产品，而不管其价格如何。换句话说，由于AND在计算次序中优先级更高，操作符被错误地组合了。</p><p>​此问题的解决方法是使用圆括号明确地分组相应的操作符。请看下面的SELECT语句及输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, prod_price, vend_id<br>FROM products<br>WHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price &gt;= 10;<br></code></pre></td></tr></table></figure><p>​这条SELECT语句与前一条的唯一差别是，这条语句中，前两个条件用圆括号括了起来。因为圆括号具有较AND或OR操作符高的计算次序，DBMS首先过滤圆括号内的OR条件。这时，SQL语句变成了选择由供应商1002或1003制造的且价格都在10美元(含）以上的任何产品，这正是我们所希望的。</p><blockquote><p>​<strong>在WHERE子句中使用圆括号</strong> 任何时候使用具有AND和OR操作符的WHERE子句,都应该使用圆括号明确地分组操作符。不要过分依赖默认计算次序，即使它确实是你想要的东西也是如此。使用圆括号没有什么坏处，它能消除歧义。</p></blockquote><h3 id="2、IN操作符"><a href="#2、IN操作符" class="headerlink" title="2、IN操作符"></a>2、IN操作符</h3><p>​圆括号在<strong>WHERE</strong>子句中还有另外一种用法。<strong>IN</strong>操作符用来指定条件范围，范围中的每个条件都可以进行匹配。<strong>IN</strong>取合法值的由逗号分隔的清单，全都括在圆括号中。下面的例子说明了这个操作符:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, prod_price<br>FROM products<br>WHERE vend_id in(1002, 1003)<br>ORDER BY prod_name<br></code></pre></td></tr></table></figure><p>​此<strong>SELECT</strong>语句检索供应商1002和<strong>1003</strong>制造的所有产品。IN操作符后跟由逗号分隔的合法值清单，整个清单必须括在圆括号中。</p><p>​如果你认为<strong>IN</strong>操作符完成与OR相同的功能，那么你的这种猜测是对的。下面的<strong>SQL</strong>语句完成与上面的例子相同的工作:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, prod_price<br>FROM products<br>WHERE vend_id = 1002 OR vend_id = 1003<br>ORDER BY prod_name<br></code></pre></td></tr></table></figure><p>​为什么要使用IN操作符?其优点具体如下?</p><ul><li>在使用长的合法选项清单时，<strong>IN</strong>操作符的语法更清楚且更直观。</li><li>在使用<strong>IN</strong>时，计算的次序更容易管理（因为使用的操作符更少)。<strong>IN</strong>操作符一般比<strong>OR</strong>操作符清单执行更快。</li><li><strong>IN</strong>的最大优点是可以包含其他<strong>SELECT</strong>语句,使得能够更动态地建立<strong>WHERE</strong>子句。第14章将对此进行详细介绍。</li></ul><h3 id="3、NOT操作符"><a href="#3、NOT操作符" class="headerlink" title="3、NOT操作符"></a>3、<strong>NOT</strong>操作符</h3><p>​<strong>WHERE</strong>子句中的<strong>NOT</strong>操作符有且只有一个功能，那就是否定它之后所跟的任何条件。</p><p>​下面的例子说明<strong>NOT</strong>的使用。为了列出除<strong>1002</strong>和<strong>1003</strong>之外的所有供应商制造的产品，可编写如下的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, prod_price<br>FROM products<br>WHERE vend_id NOT IN (1002, 1003)<br>ORDER BY prod_name<br></code></pre></td></tr></table></figure><p>​这里的<strong>NOT</strong>否定跟在它之后的条件，因此，<strong>MySQ</strong>L不是匹配<strong>1002</strong>和<strong>1003</strong>的<strong>vend_id</strong>，而是匹配<strong>1002</strong>和<strong>1003</strong>之外供应商的<strong>vend_id</strong>。<br>​为什么使用<strong>NOT</strong>?对于简单的<strong>WHERE</strong>子句，使用<strong>NOT</strong>确实没有什么优势。但在更复杂的子句中，<strong>NOT</strong>是非常有用的。例如，在与<strong>IN</strong>操作符联合使用时，<strong>NOT</strong>使找出与条件列表不匹配的行非常简单。</p><blockquote><p><strong>MySQL中的NOT</strong> <strong>MySQL</strong>支持使用<strong>NOT</strong>对<strong>IN</strong>、<strong>BETWEEN</strong>和<strong>EXISTS</strong>子句取反,这与多数其他<strong>DBMS</strong>允许使用<strong>NOT</strong>对各种条件取反有很大的差别。</p></blockquote><h2 id="八、用通配符进行过滤"><a href="#八、用通配符进行过滤" class="headerlink" title="八、用通配符进行过滤"></a>八、用通配符进行过滤</h2><h3 id="1、LIKE操作符"><a href="#1、LIKE操作符" class="headerlink" title="1、LIKE操作符"></a>1、<strong>LIKE</strong>操作符</h3><h4 id="（1）百分号（-）通配符"><a href="#（1）百分号（-）通配符" class="headerlink" title="（1）百分号（%）通配符"></a>（1）百分号（%）通配符</h4><p>​最常使用的通配符是百分号(<strong>%</strong>)。在搜索串中，**%<strong>表示任何字符出现任意次数。例如，为了找出所有以词</strong>jet<strong>起头的产品，可使用以下</strong>SELECT**语句;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name<br>FROM products<br>WHERE prod_name LIKE &quot;jet%&quot;;<br></code></pre></td></tr></table></figure><p>​此例子使用了搜索模式’<strong>jet%</strong>‘。在执行这条子句时，将检索任意以<strong>jet</strong>起头的词。**%**告诉MySQL接受jet之后的任意字符，不管它有多少字符。</p><p>​通配符可在搜索模式中任意位置使用，并且可以使用多个通配符。下面的例子使用两个通配符，它们位于模式的两端:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name<br>FROM products<br>WHERE prod_name LIKE &quot;%anvil%&quot;;<br></code></pre></td></tr></table></figure><p>​搜索模式’<strong>%anvil%</strong>‘表示匹配任何位置包含文本<strong>anvil</strong>的值，而不论它之前或之后出现什么字符。</p><p>​通配符也可以出现在搜索模式的中间，虽然这样做不太有用。下面的例子找出以<strong>s</strong>起头以<strong>e</strong>结尾的所有产品:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name<br>FROM products<br>WHERE prod_name LIKE &quot;s%e&quot;;<br></code></pre></td></tr></table></figure><p>​重要的是要注意到，除了一个或多个字符外，**%<strong>还能匹配0个字符。</strong>%**代表搜索模式中给定位置的0个、1个或多个字符。</p><h4 id="（2）下划线（-通配符"><a href="#（2）下划线（-通配符" class="headerlink" title="（2）下划线（_)通配符"></a>（2）下划线（_)通配符</h4><p>​另一个有用的通配符是下划线**(_)**。下划线的用途与%一样，但下划线只匹配单个字符而不是多个字符。</p><p>​举一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name<br>FROM products<br>WHERE prod_name LIKE &#x27;_ ton anvil&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>ANV021 ton anvil</p><p>ANV032 ton anvil</p></blockquote><p>​此WHERE子句中的搜索模式给出了后面跟有文本的两个通配符。结果只显示匹配搜索模式的行:第一行中下划线匹配1，第二行中匹配2。.5 ton anvil产品没有匹配，因为搜索模式要求匹配两个通配符而不是一个。对照一下，下面的SELECT语句使用%通配符，返回三行产品:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">SELECT prod_id, prod_name<br>FROM products<br>WHERE prod_name LIKE <span class="hljs-string">&#x27;% ton anvil&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>ANV01.5 ton anvil<br>ANV021 ton anvil<br>ANV032 ton anvil</p></blockquote><h3 id="2、通配符使用技巧"><a href="#2、通配符使用技巧" class="headerlink" title="2、通配符使用技巧"></a>2、通配符使用技巧</h3><p>​正如所见，MySQL的通配符很有用。但这种功能是有代价的:通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长。这里给出一些使用通配符要记住的技巧。</p><ul><li><p>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</p></li><li><p>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</p></li><li><p>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</p><p>总之，通配符是一种极重要和有用的搜索工具，以后我们经常会用到它。</p></li></ul><h2 id="九、用正则表达式进行搜索"><a href="#九、用正则表达式进行搜索" class="headerlink" title="九、用正则表达式进行搜索"></a>九、用正则表达式进行搜索</h2><h3 id="1、正则表达式介绍"><a href="#1、正则表达式介绍" class="headerlink" title="1、正则表达式介绍"></a>1、正则表达式介绍</h3><p>​前两章中的过滤例子允许用匹配、.比较和通配操作符寻找数据。对于基本的过滤（或者甚至是某些不那么基本的过滤)，这样就足够了。但随着过滤条件的复杂性的增加，WHERE子句本身的复杂性也有必要增加。<br>​这也就是正则表达式变得有用的地方。正则表达式是用来匹配文本的特殊的串(字符集合)。如果你想从一个文本文件中提取电话号码，可以使用正则表达式。如果你需要查找名字中间有数字的所有文件，可以使用一个正则表达式。如果你想在一个文本块中找到所有重复的单词，可以使用一个正则表达式。如果你想替换一个页面中的所有URL为这些URL的实际HTML链接,也可以使用一个正则表达式(对于最后这个例子，或者是两个正则表达式)。<br>​所有种类的程序设计语言、文本编辑器、操作系统等都支持正则表达式。有见识的程序员和网络管理员已经关注作为他们技术工具重要内容的正则表达式很长时间了。<br>​正则表达式用正则表达式语言来建立，正则表达式语言是用来完成刚讨论的所有工作以及更多工作的一种特殊语言。与任意语言一样，正则表达式具有你必须学习的特殊的语法和指令。</p><h3 id="2、使用MySQL正则表达式"><a href="#2、使用MySQL正则表达式" class="headerlink" title="2、使用MySQL正则表达式"></a>2、使用MySQL正则表达式</h3><p>​那么，正则表达式与MySQL有何关系?已经说过，正则表达式的作用是匹配文本,将一个模式(正则表达式)与一个文本串进行比较。MySQL用WHERE子句对正则表达式提供了初步的支持，允许你指定正则表达式，过滤SELECT检索出的数据。</p><h3 id="（1）基本字符匹配"><a href="#（1）基本字符匹配" class="headerlink" title="（1）基本字符匹配"></a>（1）基本字符匹配</h3><p>​我们从一个非常简单的例子开始。下面的语句检索列<strong>prod_name</strong>包含文本<strong>1000</strong>的所有行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products<br>WHERE prod_name REGEXP &#x27;1000&#x27;<br>ORDER BY prod_name;<br></code></pre></td></tr></table></figure><p>​除关键字<strong>LIKE</strong>被<strong>REGEXP</strong>替代外，这条语句看上去非常像使用LIKE的语句(第8章)。它告诉<strong>MySQL</strong>: <strong>REGEXP</strong>后所跟的东西作为正则表达式(与文字正文1000匹配的一个正则表达式）处理。</p><p>​为什么要费力地使用正则表达式?在刚才的例子中，正则表达式确实没有带来太多好处（可能还会降低性能)，不过，请考虑下面的例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products<br>WHERE prod_name REGEXP &#x27;.000&#x27;<br>ORDER BY prod_name;<br></code></pre></td></tr></table></figure><blockquote><p>JetPack 1000<br>JetPack 2000</p></blockquote><p>​这里使用了正则表达式**.000<strong>。.是正则表达式语言中一个特殊的字符。它表示匹配任意一个字符，因此，</strong>1000<strong>和</strong>2000**都匹配且返回。</p><blockquote><p>​<strong>匹配不区分大小写</strong> MySQL中的正则表达式匹配(自版本3.23.4后)不区分大小写(即,大写和小写都匹配)。为区分大小写,可使用<strong>BINARY</strong>关键字,如<code>WHERE prod_name REGEXPBINARY &#39;JetPack .000&#39;</code>.</p></blockquote><h3 id="（2）进行OR匹配"><a href="#（2）进行OR匹配" class="headerlink" title="（2）进行OR匹配"></a>（2）进行OR匹配</h3><p>​为搜索两个串之一(或者为这个串，或者为另一个串)，使用|，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products<br>WHERE prod_name REGEXP &#x27;1000|2000&#x27;<br>ORDER BY prod_name;<br></code></pre></td></tr></table></figure><blockquote><p>JetPack 1000<br>JetPack 2000</p></blockquote><p>​语句中使用了正则表达式<code>1000 | 2000</code>。**|<strong>为正则表达式的</strong>OR<strong>操作符。它表示匹配其中之一，因此</strong>1000<strong>和</strong>2000<strong>都匹配并返回。使用|从功能上类似于在</strong>SELECT<strong>语句中使用</strong>OR<strong>语句，多个</strong>OR**条件可并入单个正则表达式。</p><h3 id="（3）匹配几个字符之一"><a href="#（3）匹配几个字符之一" class="headerlink" title="（3）匹配几个字符之一"></a>（3）匹配几个字符之一</h3><p>​匹配任何单一字符。但是，如果你只想匹配特定的字符，怎么办?可通过指定一组用**[和]**括起来的字符来完成，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products<br>WHERE prod_name REGEXP &#x27;[123] Ton&#x27;<br>ORDER BY prod_name;<br></code></pre></td></tr></table></figure><blockquote><p>1 ton anvil<br>2 ton anvil</p></blockquote><p>​这里，使用了正则表达式<code>[ 123] Ton</code>。<code>[ 123]</code>定义一组字符，它的意思是匹配1或2或3，因此，1 ton和2 ton都匹配且返回(没有3 ton)。<br>​正如所见,<strong>[ ]<strong>是另一种形式的OR语句。事实上,正则表达式<code>[ 123]Ton</code>为<code>[ 1|2|3]Ton</code>的缩写，也可以使用后者。但是，需要用</strong>[]<strong>来定义</strong>OR</strong>语句查找什么。为更好地理解这一点，请看下面的例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products<br>WHERE prod_name REGEXP &#x27;1|2|3 Ton&#x27;<br>ORDER BY prod_name;<br></code></pre></td></tr></table></figure><blockquote><p>prod_name<br>1 ton anvil<br>2 ton anvil<br>JetPack 1000<br>JetPack 2000<br>TNT (1 stick)</p></blockquote><p>​这并不是期望的输出。两个要求的行被检索出来，但还检索出了另外3行。之所以这样是由于MySQL假定你的意思是’1’或’2’或’3 ton’。除非把字符|括在一个集合中，否则它将应用于整个串。</p><p>​字符集合也可以被否定，即，它们将匹配除指定字符外的任何东西。为否定一个字符集，在集合的开始处放置一个^即可。因此，尽管[123]匹配字符1、2或3，但[^123]却匹配除这些字符外的任何东西。</p><h3 id="（4）匹配范围"><a href="#（4）匹配范围" class="headerlink" title="（4）匹配范围"></a>（4）匹配范围</h3><p>​集合可用来定义要匹配的一个或多个字符。例如，下面的集合将匹配数字0到9:</p><blockquote><p>[0123456789]</p></blockquote><p>​为简化这种类型的集合，可使用-来定义一个范围。下面的式子功能上等同于上述数字列表:</p><blockquote><p>[0-9]</p></blockquote><p>​范围不限于完整的集合，**[ 1-3]<strong>和</strong>[6-9]<strong>也是合法的范围。此外，范围不一定只是数值的，</strong>[a-z]**匹配任意字母字符。<br>举一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name<br>FROM products<br>WHERE prod_name REGEXP &#x27;[1-5] Ton&#x27;<br>ORDER BY prod_name;<br></code></pre></td></tr></table></figure><blockquote><p>prod_name<br>.5 ton anvil<br>1 ton anvil<br>2 ton anvil</p></blockquote><p>​这里使用正则表达式<code>[ 1-5] Ton</code>。**[ 1-5]<strong>定义了一个范围，这个表达式意思是匹配1到5，因此返回3个匹配行。由于</strong>5 ton**匹配，所以返回.<strong>5 ton</strong>。</p><h3 id="（5）匹配特殊字符"><a href="#（5）匹配特殊字符" class="headerlink" title="（5）匹配特殊字符"></a>（5）匹配特殊字符</h3><p>​正则表达式语言由具有特定含义的特殊字符构成。我们已经看到**.<strong>、</strong>[]<strong>、</strong>|**和-等，还有其他一些字符。请问，如果你需要匹配这些字符，应该怎么办呢?</p><p>​例如,如果要找出包含**.**字符的值,怎样搜索?请看下面的例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_name<br>FROM vendors<br>WHERE vend_name REGEXP &#x27;.&#x27;<br>ORDER BY vend_name;<br></code></pre></td></tr></table></figure><blockquote><p>vend_name<br>ACME<br>Anvils R Us<br>Furball Inc.<br>Jet Set<br>Jouets Et Ours<br>LT Supplies</p></blockquote><p>​这并不是期望的输出，**.<strong>匹配任意字符，因此每个行都被检索出来。<br>​为了匹配特殊字符，必须用<code>\\</code>为前导。<code>ll-</code>表示查找</strong>-<strong>，<code>ll.</code>表示查找</strong>.**。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_name<br>FROM vendors<br>WHERE vend_name REGEXP &#x27;\\.&#x27;<br>ORDER BY vend_name;<br></code></pre></td></tr></table></figure><blockquote><p>vend_name<br>Furball Inc.</p></blockquote><p>​有字符都必须以这种方式转义。这包括**.<strong>、</strong>|<strong>、</strong>[]**以及迄今为止使用过的其他特殊字符。</p><h3 id="（6）匹配字符类"><a href="#（6）匹配字符类" class="headerlink" title="（6）匹配字符类"></a>（6）匹配字符类</h3><p>​存在找出你自己经常使用的数字、所有字母字符或所有数字字母字符等的匹配。为更方便工作，可以使用预定义的字符集，称为字符类。如下：</p><p><img src="/images/%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E7%B1%BB.png" alt="字符类"></p><h2 id="十、创建计算字段"><a href="#十、创建计算字段" class="headerlink" title="十、创建计算字段"></a>十、创建计算字段</h2><h2 id="十一、使用数据处理函数"><a href="#十一、使用数据处理函数" class="headerlink" title="十一、使用数据处理函数"></a>十一、使用数据处理函数</h2><h3 id="1、使用函数"><a href="#1、使用函数" class="headerlink" title="1、使用函数"></a>1、使用函数</h3><p>​大多数SQL实现支持以下类型的函数。</p><ul><li>用于处理文本串（如删除或填充值，转换值为大写或小写)的文本函数。</li><li>用于在数值数据上进行算术操作（如返回绝对值，进行代数运算)的数值函数。</li><li>用于处理日期和时间值并从这些值中提取特定成分（例如，返回两个日期之差，检查日期有效性等）的日期和时间函数。</li><li>返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。</li></ul><h4 id="（1）文本处理函数"><a href="#（1）文本处理函数" class="headerlink" title="（1）文本处理函数"></a>（1）文本处理函数</h4><p>​下面是一个使用upper()函数的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_name, UPPER(vend_name) AS vend_name_upcase<br>FROM vendors<br>ORDER BY vend_name;<br></code></pre></td></tr></table></figure><blockquote><p>vend_namevend_name_upcase<br>ACMEACME<br>Anvils R UsANVILS R US<br>Furball Inc.FURBALL INC.<br>Jet SetJET SET<br>Jouets Et OursJOUETS ET OURS<br>LT SuppliesLT SUPPLIES</p></blockquote><p>​正如所见，<strong>upper()<strong>将文本转换为大写，因此本例子中每个供应商都列出两次，第一次为</strong>vendors</strong>表中存储的值，第二次作为列<strong>vend_name_upcase</strong>转换为大写。</p><p>​下面列出了常用的文本处理函数：</p><p><img src="/images/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png"></p><p><img src="/images/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B01.png" alt="常用的文本处理函数"></p><p>​上面SOUNDEX需要做进一步的解释。SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类似的发音字符和音节，使得能对串进行发音比较而不是字母比较。虽然SOUNDEX不是SQL概念，但MySQL（就像多数DBMS一样）都提供对sOUNDEX的支持。<br>​下面给出一个使用Soundex()函数的例子。customers表中有一个顾客coyote Inc.，其联系名为Y.Lee。但如果这是输入错误，此联系名实际应该是Y.Lie,怎么办?显然,按正确的联系名搜索不会返回数据，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_name, cust_contact<br>FROM customers<br>WHERE cust_contact = &#x27;Y. Lie&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>cust_namecust_contact</p></blockquote><p>​现在试一下使用<strong>Soundex()<strong>函数进行搜索，它匹配所有发音类似于</strong>Y.Lie</strong>的联系名:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_name, cust_contact<br>FROM customers<br>WHERE Soundex(cust_contact) = Soundex(&#x27;Y. Lie&#x27;);<br></code></pre></td></tr></table></figure><blockquote><p>cust_namecust_contact<br>Coyote Inc.Y Lee</p></blockquote><h4 id="（2）日期和时间处理函数"><a href="#（2）日期和时间处理函数" class="headerlink" title="（2）日期和时间处理函数"></a>（2）日期和时间处理函数</h4><p>​日期和时间采用相应的数据类型和特殊的格式存储，以便能快速和有效地排序或过滤，并且节省物理存储空间。<br>​一般，应用程序不使用用来存储日期和时间的格式，因此日期和时间函数总是被用来读取、统计和处理这些值。由于这个原因，日期和时间函数在MySQL语言中具有重要的作用。<br>​下面列出了某些常用的日期和时间处理函数。</p><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png" alt="常用日期和时间处理函数"></p><p>​需要注意的是MySQL使用的日期格式。无论你什么时候指定一<br>个日期，不管是插入或更新表值还是用WHERE子句进行过滤，日期必须为格式<code>yyyy-mm-dd</code>。因此，2<strong>005年9月1日</strong>，给出为<strong>2005-09-01</strong>。虽然其他的日期格式可能也行，但这是首选的日期格式，因为它排除了多义性（如，04&#x2F;05&#x2F;06是<strong>2006年5月4日</strong>或2006年4月5日或<strong>2004年5月6日</strong>或……)。</p><p>​因此基本的日期比较应该很简单，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id, order_num,order_date<br>FROM orders<br>WHERE order_date = &#x27;2005-09-01&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>cust_idorder_numorder_date<br>10001200052005-09-01 00:00:00</p></blockquote><p>​但是，使用<code>WHERE order_date = &#39;2005-09-01&#39;</code>可靠吗?<strong>order_ date</strong>的数据类型为<strong>datetime</strong>。这种类型存储日期及时间值。样例表中的值全都具有时间值<strong>00:00:00</strong>,但实际中很可能并不总是这样。如果用当前日期和时间存储订单日期(因此你不仅知道订单日期，还知道下订单当天的时间)，怎么办?比如，存储的<strong>order_date</strong>值为<strong>2005-09-01 11:30:05</strong>，则<code>WHERE order_date = &#39;2005-09-01&#39;</code>失败。即使给出具有该日期的一行，也不会把它检索出来，因为<strong>WHERE</strong>匹配失败。<br>​解决办法是指示MySQL仅将给出的日期与列中的日期部分进行比较，而不是将给出的日期与整个列值进行比较。为此，必须使用Date()函数。Date(order_date)指示MySQL仅提取列的日期部分，更可靠的SELECT语句为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id, order_num,order_date<br>FROM orders<br>WHERE Date(order_date) = &#x27;2005-09-01&#x27;;<br></code></pre></td></tr></table></figure><p>​不过，还有一种日期比较需要说明。如果你想检索出<strong>2005年9月</strong>下的所有订单，怎么办?简单的相等测试不行，因为它也要匹配月份中的天数。有几种解决办法，其中之一如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id, order_num,order_date<br>FROM orders<br>WHERE Date(order_date) BETWEEN &#x27;2005-09-01&#x27; AND &#x27;2005-09-30&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>cust_idorder_numorder_date<br>10001200052005-09-01 00:00:00<br>10003200062005-09-12 00:00:00<br>10004200072005-09-30 00:00:00</p></blockquote><p>​还有另外一种办法（一种不需要记住每个月中有多少天或不需要操心闰年2月的办法):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id, order_num,order_date<br>FROM orders<br>WHERE YEAR(order_date) = 2005 AND Month(order_date) = 9;<br></code></pre></td></tr></table></figure><blockquote><p>cust_idorder_numorder_date<br>10001200052005-09-01 00:00:00<br>10003200062005-09-12 00:00:00<br>10004200072005-09-30 00:00:00</p></blockquote><p>​Year()是一个从日期(或日期时间)中返回年份的函数。类似，Month( )从日期中返回月份。因此, <code>WHERE Year(order_date)= 2005 AND Month (order_date) =9</code>检索出<strong>order_date</strong>为2005年9月的所有行。</p><h4 id="（3）数值处理函数"><a href="#（3）数值处理函数" class="headerlink" title="（3）数值处理函数"></a>（3）数值处理函数</h4><p>​数值处理函数仅处理数值数据。这些函数一般主要用于代数、三角或几何运算，因此没有串或日期-时间处理函数的使用那么频繁。</p><p>​具有讽刺意味的是，在主要DBMS的函数中，数值函数是最一致最统一的函数。下面列出一些常用的数值处理函数。</p><p><img src="/images/%E5%B8%B8%E7%94%A8%E6%95%B0%E5%80%BC%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0.png" alt="常用数值处理函数"></p><h2 id="十二、汇总数据"><a href="#十二、汇总数据" class="headerlink" title="十二、汇总数据"></a>十二、汇总数据</h2><h3 id="1、聚集函数"><a href="#1、聚集函数" class="headerlink" title="1、聚集函数"></a>1、聚集函数</h3><p>​我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。使用这些函数，MySQL查询可用于检索数据，以便分析和报表生成。这种类型的检索例子有以下几种。</p><ul><li>确定表中行数（或者满足某个条件或包含某个特定值的行数)。</li><li>获得表中行组的和。</li><li>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值。</li></ul><p>​上述例子都需要对表中数据（而不是实际数据本身）汇总。因此，返回实际表数据是对时间和处理资源的一种浪费（更不用说带宽了)。重复一遍，实际想要的是汇总信息。<br>​为方便这种类型的检索，MySQL给出了5个聚集函数，见下图1。这些函数能进行上述罗列的检索。</p><p><img src="/images/SQL%E8%81%9A%E9%9B%86%E5%87%BD%E6%95%B0.png" alt="SQL聚集函数"></p><h4 id="（1）AVG-函数"><a href="#（1）AVG-函数" class="headerlink" title="（1）AVG()函数"></a>（1）AVG()函数</h4><p>​**AVG( )**通过对表中行数计数并计算特定列值之和，求得该列的平均值。AVG ( )可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p><p>下面的例子使用<strong>AVG()<strong>返回</strong>products</strong>表中所有产品的平均价格:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT AVG(prod_price) AS avg_price<br>FROMproducts;<br></code></pre></td></tr></table></figure><p>​此SELECT语句返回值<strong>avg_Price</strong>，它包含<strong>products</strong>表中所有产品的平均价格。<strong>avg_price</strong>是一个别名。</p><p>​**AVG()**也可以用来确定特定列或行的平均值。下面的例子返回特定供应商所提供产品的平均价格:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT AVG(prod_price) AS avg_price<br>FROMproducts<br>WHERE vend_id = 1003;<br></code></pre></td></tr></table></figure><blockquote><p>avg_price<br>13.212857</p></blockquote><p>​这条SELECT语句与前一条的不同之处在于它包含了<strong>WHERE</strong>子句。此<strong>WHERE</strong>子句仅过滤出<strong>vend_id</strong>为1003的产品，因此<br>​<strong>avg_price</strong>中返回的值只是该供应商的产品的平均值。</p><h4 id="（2）COUNT-函数"><a href="#（2）COUNT-函数" class="headerlink" title="（2）COUNT()函数"></a>（2）COUNT()函数</h4><p>​<em>*COUNT()<strong>函数进行计数。可利用</strong>COUNT()<strong>确定表中行的数目或符合特定条件的行的数目。<br>​COUNT( )函数有两种使用方式。<br>​使用</strong>COUNT(* )<strong>对表中行的数目进行计数,不管表列中包含的是空<br>值</strong>（NULL)<strong>还是非空值。<br>​使用</strong>COUNT (column)<strong>对特定列中具有值的行进行计数，忽略</strong>NULL</em>*值。<br>​下面的例子返回<strong>customers</strong>表中客户的总数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(*) AS num_cust <br>FROM customers;<br></code></pre></td></tr></table></figure><blockquote><p>num_cust<br>5</p></blockquote><p>​在此例子中，利用<strong>COUNT (*)<strong>对所有行计数，不管行中各列有什么值。计数值在</strong>num_cust</strong>中返回。</p><p>​下面的例子只对具有电子邮件地址的客户计数:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(cust_email) AS num_cust <br>FROM customers;<br></code></pre></td></tr></table></figure><blockquote><p>num_cust<br>3</p></blockquote><p>​这条<strong>SELECT</strong>语句使用<strong>COUNT (cust_email)<strong>对</strong>cust_email</strong>列中有值的行进行计数。在此例子中,<strong>cust_email</strong>的计数为3(表示5个客户中只有3个客户有电子邮件地址)。</p><blockquote><p><strong>NULL</strong> 值如果指定列名，则指定列的值为空的行被COUNT()函数忽略，但如果**COUNT ()*<em>函数中用的是星号（</em>),则不忽略。</p></blockquote><h4 id="（3）MAX-函数"><a href="#（3）MAX-函数" class="headerlink" title="（3）MAX()函数"></a>（3）MAX()函数</h4><p>**MAX()**返回指定列中的最大值。MAX()要求指定列名，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT MAX(prod_price) AS max_price <br>FROM products;<br></code></pre></td></tr></table></figure><blockquote><p>max_price<br>55.00</p></blockquote><p>​这里，<strong>MAX()<strong>返回</strong>products</strong>表中最贵的物品的价格。</p><h4 id="（4）MIN-函数"><a href="#（4）MIN-函数" class="headerlink" title="（4）MIN()函数"></a>（4）MIN()函数</h4><p>​<strong>MIN()<strong>的功能正好与MAX()功能相反，它返回指定列的</strong>最小值</strong>。与**MAX ()**一样，MIN()要求指定列名，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT min(prod_price) AS max_price <br>FROM products;<br></code></pre></td></tr></table></figure><blockquote><p>max_price<br>2.50</p></blockquote><h4 id="（5）SUM-函数"><a href="#（5）SUM-函数" class="headerlink" title="（5）SUM()函数"></a>（5）SUM()函数</h4><p>​SUM()用来返回指定列值的和（总计）。</p><p>​下面举一个例子，<strong>orderitems</strong>表包含订单中实际的物品，每个物品有相应的数量（ <strong>quantity</strong>)。可如下检索所订购物品的总数（所有<strong>quantity</strong>值之和):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SUM(quantity) AS items_ordered <br>FROM orderitems<br>WHERE order_num = 20005;<br></code></pre></td></tr></table></figure><blockquote><p>items_ordered<br>19</p></blockquote><p>​<strong>SUM()<strong>也可以用来合计计算值。在下面的例子中，合计每项物品的</strong>item_price*quantity</strong>，得出总的订单金额:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SUM(quantity * item_price) AS items_ordered <br>FROM orderitems<br>WHERE order_num = 20005;<br></code></pre></td></tr></table></figure><blockquote><p>items_ordered<br>149.87</p></blockquote><h3 id="2、聚集不同值-DISTINCT"><a href="#2、聚集不同值-DISTINCT" class="headerlink" title="2、聚集不同值 DISTINCT"></a>2、聚集不同值 DISTINCT</h3><p>​下面的例子使用<strong>AVG()<strong>函数返回特定供应商提供的产品的平均价格。它与上面的SELECT语句相同，但使用了</strong>DISTINCT</strong>参数，因此平均值只考虑各个不同的价格:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT AVG(DISTINCT prod_price) AS avg_price <br>FROM products<br>WHERE vend_id = 1003;<br></code></pre></td></tr></table></figure><blockquote><p>avg_price<br>15.998000</p></blockquote><p>​可以看到，在使用了<strong>DISTINCT</strong>后，此例子中的<strong>avg_price</strong>比较高，因为有多个物品具有相同的较低价格。排除它们提升了平均价格。</p><h3 id="3、组合聚集函数"><a href="#3、组合聚集函数" class="headerlink" title="3、组合聚集函数"></a>3、组合聚集函数</h3><p>​目前为止的所有聚集函数例子都只涉及单个函数。但实际上<strong>SELECT</strong>语句可根据需要包含多个聚集函数。请看下面的例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(*) AS num_items,<br>MIN(prod_price) AS price_min,<br>MAX(prod_price) AS price_max,<br>AVG(prod_price) AS price_avg<br>FROM products;<br></code></pre></td></tr></table></figure><blockquote><p>num_itemsprice_minprice_maxprice_avg<br>142.5055.0016.133571</p></blockquote><p>​这里用单条SELECT语句执行了4个聚集计算，返回4个值( <strong>products</strong>表中物品的数目，产品价格的最高、最低以及平均值）。</p><h2 id="十三、分组数据"><a href="#十三、分组数据" class="headerlink" title="十三、分组数据"></a>十三、分组数据</h2><h3 id="1、数据分组"><a href="#1、数据分组" class="headerlink" title="1、数据分组"></a>1、数据分组</h3><p>​从上一章知道，SQL聚集函数可用来汇总数据。这使我们能够对行进行计数，计算和与平均数，获得最大和最小值而不用检索所有数据。<br>​目前为止的所有计算都是在表的所有数据或匹配特定的WHERE子句的数据上进行的。提示一下，下面的例子返回供应商1003提供的产品数目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(*) AS num_prods <br>FROM products<br>WHERE vend_id = 1003;<br></code></pre></td></tr></table></figure><blockquote><p>num_prods<br>7</p></blockquote><p>​但如果要返回每个供应商提供的产品数目怎么办?或者返回只提供单项产品的供应商所提供的产品，或返回提供10个以上产品的供应商怎么办?<br>​这就是分组显身手的时候了。分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。</p><h3 id="2、创建分组"><a href="#2、创建分组" class="headerlink" title="2、创建分组"></a>2、创建分组</h3><p>​分组是在SELECT语句的<strong>GROUP BY</strong>子句中建立的。理解分组的最好办法是看一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_id, COUNT(*) AS num_prods <br>FROM products<br>GROUP BY vend_id;<br></code></pre></td></tr></table></figure><blockquote><p>vend_idnum_prods<br>10013<br>10022<br>10037<br>10052</p></blockquote><p>​上面的SELECT语句指定了两个列，<strong>vend_id</strong>包含产品供应商的<strong>ID</strong>，<strong>num_prods</strong>为计算字段（用<strong>COUNT(*)<strong>函数建立)。GROUP BY<br>子句指示MySQL按</strong>vend_id</strong>排序并分组数据。这导致对每个<strong>vend_id</strong>而不是整个表计算<strong>num_prods</strong>一次。从输出中可以看到,供应商1001有3个产品，供应商1002有2个产品，供应商1003有7个产品，而供应商1005有2个产品。<br>因为使用了<strong>GROUP BY</strong>，就不必指定要计算和估值的每个组了。系统会自动完成。<strong>GROUP BY</strong>子句指示MySQL分组数据，然后对每个组而不是整个结果集进行聚集。<br>​在具体使用<strong>GROUP BY</strong>子句前，需要知道一些重要的规定。</p><ul><li>GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li><li>如果在<strong>GROUP BY</strong>子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算(所以不能从个别的列取回数据)。</li><li><strong>GROUP BY</strong>子句中列出的每个列都必须是检索列或有效的表达式(但不能是聚集函数)。如果在SELECT中使用表达式，则必须在<strong>GROUP BY</strong>子句中指定相同的表达式。不能使用别名。</li><li>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出。</li><li>如果分组列中具有<strong>NULL</strong>值，则<strong>NULL</strong>将作为一个分组返回。如果列中有多行<strong>NULL</strong>值，它们将分为一组。</li><li><strong>GROUP BY</strong>子句必须出现在WHERE子句之后，<strong>ORDER BY</strong>子句之前。</li></ul><h3 id="3、过滤分组"><a href="#3、过滤分组" class="headerlink" title="3、过滤分组"></a>3、过滤分组</h3><p>​除了能用<strong>GROUP BY</strong>分组数据外，MySQL还允许过滤分组，规定包括哪些分组，排除哪些分组。例如，可能想要列出至少有两个订单的所有顾客。为得出这种数据，必须基于完整的分组而不是个别的行进行过滤。<br>​我们已经看到了<strong>WHERE</strong>子句的作用(第6章中引入)。但是，在这个例子中<strong>WHERE</strong>不能完成任务，因为<strong>WHERE</strong>过滤指定的是行而不是分组。事实上，<strong>WHERE</strong>没有分组的概念。<br>​那么，不使用<strong>WHERE</strong>使用什么呢? MySQL为此目的提供了另外的子句，那就是<strong>HAVING</strong>子句。<strong>HAVING</strong>非常类似于WHERE。事实上，目前为止所学过的所有类型的<strong>WHERE</strong>子句都可以用<strong>HAVING</strong>来替代。唯一的差别是<strong>WHERE</strong>过滤行，而<strong>HAVING</strong>过滤分组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id, COUNT(*) AS orders<br>FROM orders<br>GROUP BY cust_id<br>HAVING COUNT(*) &gt;= 2;<br></code></pre></td></tr></table></figure><blockquote><p>cust_idorders<br>100012</p></blockquote><p>​这条SELECT语句的前3行类似于上面的语句。最后一行增加了HAVING子句，它过滤COUNT(* ) &gt;&#x3D;2(两个以上的订单）的那些分组。</p><p>​那么，有没有在一条语句中同时使用<strong>WHERE</strong>和<strong>HAVING</strong>子句的需要呢﹖事实上，确实有。假如想进一步过滤上面的语句，使它返回过去12个月内具有两个以上订单的顾客。为达到这一点,可增加一条<strong>WHERE</strong>子句，过滤出过去12个月内下过的订单。然后再增加<strong>HAVING</strong>子句过滤出具有两个以上订单的分组。</p><p>​为更好地理解，请看下面的例子，它列出具有<strong>2个</strong>（含)以上、价格10(含）以上的产品的供应商:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_id, COUNT(*) AS num_prods <br>FROM products<br>WHERE prod_price &gt;= 10<br>GROUP BY vend_id<br>HAVING COUNT(*) &gt;= 2<br></code></pre></td></tr></table></figure><blockquote><p>vend_idnum_prods<br>10034<br>10052</p></blockquote><p>​这条语句中，第一行是使用了聚集函数的基本SELECT，它与前面的例子很相像。WHERE子句过滤所有prod_price至少为10的行。然后按vend_id分组数据，HAVING子句过滤计数为2或2以上的分组。</p><p>​如果没有WHERE子句，将会多检索出两行（供应商1002，销售的所有产品价格都在10以下;供应商1001，销售3个产品，但只有一个产品的价格大于等于10):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_id, COUNT(*) AS num_prods <br>FROM products<br>GROUP BY vend_id<br>HAVING COUNT(*) &gt;= 2<br></code></pre></td></tr></table></figure><blockquote><p>vend_idnum_prods<br>10013<br>10022<br>10037<br>10052</p></blockquote><h3 id="4、分组和排序"><a href="#4、分组和排序" class="headerlink" title="4、分组和排序"></a>4、分组和排序</h3><p>​虽然<strong>GROUPBY</strong>和<strong>ORDER BY</strong>经常完成相同的工作，但它们是非常不同的。下面汇总了它们之间的差别。</p><p>ORDER BY</p><ul><li>排序产生的输出</li><li>任意列都可以使用(甚至非选择的列也可以使用)</li><li>不一定需要</li></ul><p>GROUP BY</p><ul><li>分组行。但输出可能不是分组的顺序</li><li>只可能使用选择列或表达式列，而且必须使用每个选择列表达式</li><li>如果与聚集函数一起使用列（或表达式)，则必须使用</li></ul><p>​上面列出的第一项差别极为重要。我们经常发现用GROUP BY分组的数据确实是以分组顺序输出的。但情况并不总是这样，它并不是SQL规范所要求的。此外，用户也可能会要求以不同于分组的顺序排序。仅因为你以某种方式分组数据（获得特定的分组聚集值)，并不表示你需要以相同的方式排序输出。应该提供明确的ORDER BY子句，即使其效果等同于GROUP BY子句也是如此。</p><blockquote><p><strong>不要忘记ORDER</strong> BY一般在使用GROUP BY子句时，应该也给出ORDER BY子句。这是保证数据正确排序的唯一方法。千万不要仅依赖GROUP BY排序数据。</p></blockquote><p>​为说明<strong>GROUP BY</strong>和ORDER BY的使用方法，请看一个例子。下面的SELECT语句类似于前面那些例子。它检索总计订单价格大于等于50的订单的订单号和总计订单价格:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT order_num, SUM(quantity * item_price) AS ordertotal <br>FROM orderitems<br>GROUP BY order_num <br>HAVING SUM(quantity * item_price) &gt;= 50<br></code></pre></td></tr></table></figure><blockquote><p>order_numordertotal<br>20005149.87<br>2000655.00<br>200071000.00<br>20008125.00</p></blockquote><p>​为按总计订单价格排序输出，需要添加<strong>ORDER BY</strong>子句，如下所示;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT order_num, SUM(quantity * item_price) AS ordertotal <br>FROM orderitems<br>GROUP BY order_num <br>HAVING SUM(quantity * item_price) &gt;= 50<br>ORDER BY ordertotal;<br></code></pre></td></tr></table></figure><blockquote><p>order_numordertotal<br>2000655.00<br>20008125.00<br>20005149.87<br>200071000.00</p></blockquote><p>​在这个例子中，<strong>GROUP BY</strong>子句用来按订单号(order_num列)分组数据，以便<em><em>SUM(</em> )<strong>函数能够返回总计订单价格。</strong>HAVING</em>*子句过滤数据，使得只返回总计订单价格大于等于<strong>50</strong>的订单。最后，用<strong>ORDER BY</strong>子句排序输出。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="十四、使用子查询"><a href="#十四、使用子查询" class="headerlink" title="十四、使用子查询"></a>十四、使用子查询</h2><h3 id="1、利用子查询进行过滤"><a href="#1、利用子查询进行过滤" class="headerlink" title="1、利用子查询进行过滤"></a>1、利用子查询进行过滤</h3><p>​订单存储在两个表中。对于包含订单号、客户ID、订单日期的每个订单，orders表存储一行。各订单的物品存储在相关的orderitems表中。orders表不存储客户信息。它只存储客户的ID。实际的客户信息存储在customers表中。<br>现在，假如需要列出订购物品TNT2的所有客户，应该怎样检索?下面列出具体的步骤。</p><p>​(1)检索包含物品TNT2的所有订单的编号。</p><p>​(2)检索具有前一步骤列出的订单编号的所有客户的ID。</p><p>​(3)检索前一步骤返回的所有客户ID的客户信息。</p><p>​上述每个步骤都可以单独作为一个查询来执行。可以把<strong>一条SELECT</strong>语句返回的结果<strong>用于另一条SELECT</strong>语句的WHERE子句。<br>​也可以使用子查询来把3个查询组合成一条语句。<br>​第一条SELECT语句的含义很明确,对于prod_id为TNT2的所有订单物品，它检索其order_num列。输出列出两个包含此物品的订单:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT order_num<br>FROM orderitems<br>WHERE prod_id = &#x27;TNT2&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>order_num<br>20005<br>20007</p></blockquote><p>​下一步，检索具有前一步骤列出的订单编号的所有客户的ID：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id<br>FROM orders<br>WHERE order_num IN (20005, 20007);<br></code></pre></td></tr></table></figure><blockquote><p>cust_id<br>10001<br>10004</p></blockquote><p>​现在，把第一个查询变为子查询，组合成两个查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_id<br>FROM orders<br>WHERE order_num IN (SELECT order_num<br>FROM orderitems<br>WHERE prod_id = &#x27;TNT2&#x27;)<br></code></pre></td></tr></table></figure><blockquote><p>cust_id<br>10001<br>10004</p></blockquote><p>​在<strong>SELECT</strong>语句中，子查询总是<strong>从内向外</strong>处理。在处理上面的SELECT语句时，MySQL实际上执行了两个操作。<br>首先，它执行下面的查询:<br><code>SELECT order_num FROM orderitems wHERE prod_id=&#39;TNT2&#39;</code><br>此查询返回两个订单号:20005和20007。然后，这两个值以IN操作符要求的逗号分隔的格式传递给外部查询的WHERE子句。外部查询变成:<br>​<code>SELECT cust_id FROM orders WHERE order_num IN (20005,20007)</code><br>可以看到，输出是正确的并且与前面硬编码WHERE子句所返回的值相同。</p><p>​现在得到了订购物品TNT2的所有客户的ID。下一步是检索这些客户ID的客户信息。检索两列的SQL语句为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_name, cust_contact<br>FROM customers<br>WHERE cust_id  IN (10001, 10004)<br></code></pre></td></tr></table></figure><blockquote><p>cust_namecust_contact<br>Coyote Inc.Y Lee<br>Yosemite Place Y Sam</p></blockquote><p>​可以把其中的WHERE子句转换为子查询而不是硬编码这些客户ID:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_name, cust_contact<br>FROM customers<br>WHERE cust_id IN (SELECT cust_id<br>FROM orders<br>WHERE order_num IN (SELECT order_num<br>FROM orderitems<br>WHERE prod_id = &#x27;TNT2&#x27;))<br></code></pre></td></tr></table></figure><blockquote><p>cust_namecust_contact<br>Coyote Inc.Y Lee<br>Yosemite Place Y Sam</p></blockquote><h3 id="2、作为计算字段使用子查询"><a href="#2、作为计算字段使用子查询" class="headerlink" title="2、作为计算字段使用子查询"></a>2、作为计算字段使用子查询</h3><p>​使用子查询的另一方法是创建计算字段。假如需要显示customers表中<strong>每个客户的订单总数</strong>。订单与相应的客户ID存储在orders表中。<br>为了执行这个操作，遵循下面的步骤。<br>​(1)从customers表中检索客户列表。<br>​(2)对于检索出的每个客户，统计其在orders表中的订单数目。</p><p>​为了对每个客户执行*<em>COUNT(</em>)<strong>计算，应该将</strong>COUNT (*)**作为一个子查询。请看下面的代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>cust_name,<br>cust_state,<br>( SELECT COUNT(*) FROM orders WHERE orders.cust_id = customers.cust_id ) AS orders <br>FROM<br>customers <br>ORDER BY<br>cust_name<br></code></pre></td></tr></table></figure><blockquote><p>cust_namecust_stateorders<br>Coyote Inc.MI2<br>E FuddIL 1<br>Mouse House   OH       0<br>Wascals  IN        1<br>Yosemite Place AZ1</p></blockquote><p>​这条SELECT语句对customers表中每个客户返回3列:cust_name、cust_state和orders。orders是一个<strong>计算字段</strong>，它是由圆括号中的子查询建立的。该子查询对检索出的每个客户执行一次。在此例子中，该子查询执行了5次，因为检索出了5个客户。<br>​子查询中的<strong>WHERE</strong>子句与前面使用的<strong>WHERE</strong>子句稍有不同,因为它使用了完全限定列名（在第4章中首次提到)。下面的语句告诉SQL比较<strong>orders表中的cust_id</strong>与<strong>当前正从customers</strong>表中检索的<strong>cust_id</strong>:<br><code>wHERE orders.cust_id = customers.cust_id</code></p><h2 id="十五、联结表"><a href="#十五、联结表" class="headerlink" title="十五、联结表"></a>十五、联结表</h2><h3 id="1、联结"><a href="#1、联结" class="headerlink" title="1、联结"></a>1、联结</h3><p>​SQL最强大的功能之一就是能在数据检索查询的执行中联结( join)表。联结是利用SQL的SELECT能执行的最重要的操作，很好地理解联结及其语法是学习SQL的一个极为重要的组成部分。</p><h4 id="（1）关系表"><a href="#（1）关系表" class="headerlink" title="（1）关系表"></a>（1）关系表</h4><p>​理解关系表的最好方法是来看一个现实世界中的例子。<br>​假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供应商信息。<br>​现在，假如有由同一供应商生产的多种物品，那么在何处存储供应商信息（如，供应商名、地址、联系方法等）呢?将这些数据与产品信息分开存储的理由如下。</p><ul><li>因为同一供应商生产的每个产品的供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费存储空间。</li><li>如果供应商信息改变（例如，供应商搬家或电话号码变动)，只需改动一次即可。</li><li>如果有重复数据（即每种产品都存储供应商信息)，很难保证每次输入该数据的方式都相同。不一致的数据在报表中很难利用。</li></ul><p>​关键是，相同数据出现多次决不是一件好事，此因素是关系数据库设计的基础。关系表的设计就是要保证把信息分解成多个表，一类数据一个表。各表通过某些常用的值（即关系设计中的关系( relational ) )互相关联。<br>​在这个例子中，可建立两个表，一个存储供应商信息，另一个存储产品信息。<strong>vendors</strong>表包含所有供应商信息，每个供应商占一行，<strong>每个供应商具有唯一</strong>的标识。此标识称为<strong>主键</strong>( primary key)(，可以是供应商ID或任何其他唯一值。<br>​<strong>products</strong>表只存储产品信息，它除了存储供应商ID(<strong>vendors</strong>表的主键）外不存储其他供应商信息。<strong>vendors表的主键</strong>又叫作<strong>products的外键</strong>，它将vendors表与products表关联，利用<strong>供应商ID</strong>能从vendors表中找出相应供应商的详细信息。</p><blockquote><p><strong>外键(foreign key)</strong>外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。<br>    这样做的好处如下:</p><ul><li>供应商信息不重复，从而不浪费时间和空间;</li><li>如果供应商信息变动，可以只更新vendors表中的单个记录，相关表中的数据不用改动;</li><li>由于数据无重复，显然数据是一致的，这使得处理数据更简单。</li></ul><p>​总之，关系数据可以有效地存储和方便地处理。因此，关系数据库的可伸缩性远比非关系数据库要好。(foreign key)外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p></blockquote><blockquote><p><strong>可伸缩性(scale)</strong>能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序称之为可伸缩性好( scale well )。</p></blockquote><h4 id="（2）为什么要使用联结"><a href="#（2）为什么要使用联结" class="headerlink" title="（2）为什么要使用联结"></a>（2）为什么要使用联结</h4><p>​正如所述，分解数据为多个表能更有效地存储，更方便地处理，并且具有更大的可伸缩性。但这些好处是有代价的。<br>​如果数据存储在多个表中，怎样用单条SELECT语句检索出数据?答案是使用<strong>联结</strong>。简单地说，联结是一种机制，用来在一条SELECT语句中<strong>关联表</strong>，因此称之为<strong>联结</strong>。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。</p><h3 id="2、创建联结"><a href="#2、创建联结" class="headerlink" title="2、创建联结"></a>2、创建联结</h3><p>联结的创建非常简单，规定要联结的所有表以及它们如何关联即可，请看下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_name, prod_name, prod_price<br>FROM vendors, products<br>WHERE vendors.vend_id = products.vend_id<br>ORDER BY vend_name, prod_name<br></code></pre></td></tr></table></figure><blockquote><p>vend_nameprod_nameprod_price<br>ACMEBird seed10.00<br>ACMECarrots2.50<br>ACMEDetonator13.00<br>ACMESafe50.00<br>ACMESling4.49<br>ACMETNT (1 stick)2.50<br>ACMETNT (5 sticks)10.00<br>Anvils R Us.5 ton anvil5.99<br>Anvils R Us1 ton anvil9.99<br>Anvils R Us2 ton anvil14.99<br>Jet SetJetPack 100035.00<br>Jet SetJetPack 200055.00<br>LT SuppliesFuses3.42<br>LT SuppliesOil can8.99</p></blockquote><p>​我们来考察一下此代码。SELECT语句与前面所有语句一样指定要检索的列。这里,最大的差别是所指定的两个列(prod_name<br>和prod_price)在一个表中，而另一个列(vend_name)在另一个表中。<br>​现在来看FROM子句。与以前的SELECT语句不一样，这条语句的FROM子句列出了两个表,分别是vendors和products。它们就是这条SELECT语句联结的两个表的名字。这两个表用WHERE子句正确联结，WHERE子句指示MySQL匹配<strong>vendors表中的vend_id</strong>和<strong>products表中的vend_id</strong>。<br>​可以看到要匹配的两个列以<strong>vendors.vend_id</strong>和<strong>products.vend_id</strong>指定。这里需要这种<strong>完全限定列名</strong>，因为如果只给出vend_id，则MySQL不知道指的是哪一个（它们有两个，每个表中一个)。</p><h4 id="（1）WHERE子句的重要性"><a href="#（1）WHERE子句的重要性" class="headerlink" title="（1）WHERE子句的重要性"></a>（1）WHERE子句的重要性</h4><p>​在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。<strong>WHERE</strong>子句作为<strong>过滤条件</strong>，它只包含那些匹配给定条件（这里是联结条件）的行。没有WHERE子句，第一个表中的每个行将与第二个表中的每个行配对，而不管它们逻辑上是否可以配在一起。</p><blockquote><p><strong>笛卡儿积(cartesian product)</strong>由没有联结条件的表关系返回的结果为<strong>笛卡儿积</strong>。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p></blockquote><p>​对于<strong>笛卡尔积</strong>的理解可以对比下述代码与上一个例子进行理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_name, prod_name, prod_price<br>FROM vendors, products<br>ORDER BY vend_name, prod_name<br></code></pre></td></tr></table></figure><blockquote><p>vend_nameprod_nameprod_price<br>ACME.5 ton anvil5.99<br>ACME1 ton anvil9.99<br>ACME2 ton anvil14.99<br>ACMEBird seed10.00<br>ACMECarrots2.50<br>ACMEDetonator13.00<br>ACMEFuses3.42<br>ACMEJetPack 100035.00<br>ACMEJetPack 200055.00<br>ACMEOil can8.99<br>ACMESafe50.00<br>ACMESling4.49<br>ACMETNT (1 stick)2.50<br>ACMETNT (5 sticks)10.00<br>Anvils R Us.5 ton anvil5.99<br>Anvils R Us1 ton anvil9.99<br>Anvils R Us2 ton anvil14.99<br>Anvils R UsBird seed10.00<br>Anvils R UsCarrots2.50<br>Anvils R UsDetonator13.00<br>Anvils R UsFuses3.42<br>Anvils R UsJetPack 100035.00<br>Anvils R UsJetPack 200055.00<br>Anvils R UsOil can8.99<br>Anvils R UsSafe50.00<br>Anvils R UsSling4.49<br>Anvils R UsTNT (1 stick)2.50<br>Anvils R UsTNT (5 sticks)10.00<br>Furball Inc..5 ton anvil5.99<br>Furball Inc.1 ton anvil9.99<br>Furball Inc.2 ton anvil14.99<br>Furball Inc.Bird seed10.00<br>Furball Inc.Carrots2.50<br>Furball Inc.Detonator13.00<br>Furball Inc.Fuses3.42<br>Furball Inc.JetPack 100035.00<br>Furball Inc.JetPack 200055.00<br>Furball Inc.Oil can8.99<br>Furball Inc.Safe50.00<br>Furball Inc.Sling4.49<br>Furball Inc.TNT (1 stick)2.50<br>Furball Inc.TNT (5 sticks)10.00<br>Jet Set.5 ton anvil5.99<br>Jet Set1 ton anvil9.99<br>Jet Set2 ton anvil14.99<br>Jet SetBird seed10.00<br>Jet SetCarrots2.50<br>Jet SetDetonator13.00<br>Jet SetFuses3.42<br>Jet SetJetPack 100035.00<br>Jet SetJetPack 200055.00<br>Jet SetOil can8.99<br>Jet SetSafe50.00<br>Jet SetSling4.49<br>Jet SetTNT (1 stick)2.50<br>Jet SetTNT (5 sticks)10.00<br>Jouets Et Ours.5 ton anvil5.99<br>Jouets Et Ours1 ton anvil9.99<br>Jouets Et Ours2 ton anvil14.99<br>Jouets Et OursBird seed10.00<br>Jouets Et OursCarrots2.50<br>Jouets Et OursDetonator13.00<br>Jouets Et OursFuses3.42<br>Jouets Et OursJetPack 100035.00<br>Jouets Et OursJetPack 200055.00<br>Jouets Et OursOil can8.99<br>Jouets Et OursSafe50.00<br>Jouets Et OursSling4.49<br>Jouets Et OursTNT (1 stick)2.50<br>Jouets Et OursTNT (5 sticks)10.00<br>LT Supplies.5 ton anvil5.99<br>LT Supplies1 ton anvil9.99<br>LT Supplies2 ton anvil14.99<br>LT SuppliesBird seed10.00<br>LT SuppliesCarrots2.50<br>LT SuppliesDetonator13.00<br>LT SuppliesFuses3.42<br>LT SuppliesJetPack 100035.00<br>LT SuppliesJetPack 200055.00<br>LT SuppliesOil can8.99<br>LT SuppliesSafe50.00<br>LT SuppliesSling4.49<br>LT SuppliesTNT (1 stick)2.50<br>LT SuppliesTNT (5 sticks)10.00</p></blockquote><p>​从上面的输出中可以看到，相应的笛卡儿积不是我们所想要的。这里返回的数据用每个供应商匹配了每个产品，它包括了<br>供应商不正确的产品。实际上有的供应商根本就没有产品。</p><h4 id="（2）内部联结"><a href="#（2）内部联结" class="headerlink" title="（2）内部联结"></a>（2）内部联结</h4><p>​目前为止所用的联结称为<strong>等值联结</strong>，它基于两个表之间的相等测试。这种联结也称为<strong>内部联结</strong>。其实，对于这种联结可以使用稍微不同的语法来明确指定联结的类型。下面的SELECT语句返回与前面例子完全相同的数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT vend_name, prod_name, prod_price<br>FROM vendors<br>INNER JOIN products <br>ON vendors.vend_id = products.vend_id<br></code></pre></td></tr></table></figure><blockquote><p>vend_nameprod_nameprod_price<br>Anvils R Us.5 ton anvil5.99<br>Anvils R Us1 ton anvil9.99<br>Anvils R Us2 ton anvil14.99<br>LT SuppliesFuses3.42<br>LT SuppliesOil can8.99<br>ACMEDetonator13.00<br>ACMEBird seed10.00<br>ACMECarrots2.50<br>ACMESafe50.00<br>ACMESling4.49<br>ACMETNT (1 stick)2.50<br>ACMETNT (5 sticks)10.00<br>Jet SetJetPack 100035.00<br>Jet SetJetPack 200055.00</p></blockquote><h4 id="（3）联结多个表"><a href="#（3）联结多个表" class="headerlink" title="（3）联结多个表"></a>（3）联结多个表</h4><p>​SQL对一条SELECT语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。首先列出所有表，然后定义表之间的关系。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_name, vend_name, prod_price, quantity<br>FROM orderitems, products, vendors<br>WHERE products.vend_id = vendors.vend_id <br>AND orderitems.prod_id = products.prod_id<br>AND order_num = 20005<br></code></pre></td></tr></table></figure><blockquote><p>prod_namevend_nameprod_pricequantity<br>.5 ton anvilAnvils R Us5.9910<br>1 ton anvilAnvils R Us9.993<br>TNT (5 sticks)ACME10.005<br>Bird seedACME10.001</p></blockquote><p>​此例子显示编号为<strong>20005</strong>的订单中的物品。订单物品存储在<strong>orderitems</strong>表中。每个产品按其产品ID存储，它引用<strong>products</strong>表中的产品。这些产品通过供应商<strong>ID</strong>联结到<strong>vendors</strong>表中相应的供应商，供应商ID存储在每个产品的记录中。这里的<strong>FROM</strong>子句列出了3个表，而<strong>WHERE</strong>子句定义了这两个联结条件，而第三个联结条件用来过滤出订单<strong>20005</strong>中的物品。</p><h2 id="十六、创建高级联结"><a href="#十六、创建高级联结" class="headerlink" title="十六、创建高级联结"></a>十六、创建高级联结</h2><h3 id="1、使用表别名"><a href="#1、使用表别名" class="headerlink" title="1、使用表别名"></a>1、使用表别名</h3><p>​给列起别名的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT CONCAT(RTrim(vend_name),&#x27;(&#x27;,RTRIM(vend_country), &#x27;)&#x27;) AS vend_title <br>FROM vendors<br>ORDER BY vend_name;<br></code></pre></td></tr></table></figure><p>​<code>CONCAT(RTrim(vend_name), &#39;(&#39;, RTRIM(vend_country), &#39;)&#39;) AS vend_title</code>: 这个部分使用<code>CONCAT</code>函数将两个列的值组合在一起，创建了一个新的名为<code>vend_title</code>的列。<code>RTRIM</code>函数用于从列的末尾去掉空格，因此<code>RTRIM(vend_name)</code>和<code>RTRIM(vend_country)</code>将去除这些列中可能存在的多余空格。最终结果会将每个供应商的名称和国家组合成一个标题，并将其放在括号中</p><p>​别名除了用于列名和计算字段外，SQL还允许给表名起别名。这样做有两个主要理由:</p><ul><li>缩短SQL语句;</li><li>允许在单条SELECT语句中多次使用相同的表。</li></ul><p>下面的例子，就是运用了别名的方式，其功能与上一章的例子基本相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT cust_name, cust_contact<br>FROM customers AS c, orders AS o, orderitems AS oi  <br>WHERE c.cust_id = o.cust_id<br>AND oi.order_num = o.order_num<br>AND prod_id = &#x27;TNT2&#x27;<br></code></pre></td></tr></table></figure><h3 id="2、使用不同类型的联结"><a href="#2、使用不同类型的联结" class="headerlink" title="2、使用不同类型的联结"></a>2、使用不同类型的联结</h3><h4 id="（1）自联结"><a href="#（1）自联结" class="headerlink" title="（1）自联结"></a>（1）自联结</h4><p>​如前所述，使用表别名的主要原因之一是能在单条SELECT语句中不止一次引用相同的表。下面举一个例子。<br>​假如你发现某物品(其<strong>ID</strong>为<strong>DTNTR</strong>）存在问题，因此想知道生产该物品的供应商生产的其他物品是否也存在这些问题。此查询要求首先找到生产<strong>ID</strong>为<strong>DTNTR</strong>的物品的供应商，然后找出这个供应商生产的其他物品。下面是解决此问题的一种方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT prod_id, prod_name<br>FROM products<br>WHERE vend_id = (SELECT vend_id<br> FROM products<br> WHERE prod_id = &#x27;DTNTR&#x27;);<br></code></pre></td></tr></table></figure><blockquote><p>prod_idprod_name<br>DTNTRDetonator<br>FBBird seed<br>FCCarrots<br>SAFESafe<br>SLINGSling<br>TNT1TNT (1 stick)<br>TNT2TNT (5 sticks)</p></blockquote><p>​这是第一种解决方案，它使用了<strong>子查询</strong>。内部的<strong>SELECT</strong>语句做了一个简单的检索，返回生产ID为DTNTR的物品供应商的vend_id。该ID用于外部查询的WHERE子句中，以便检索出这个供应商生产的所有物品（第14章中讲授了子查询的所有内容。更多信息请参阅该章)。</p><p>​下面是使用联结的相同查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT p1.prod_id, p1.prod_name<br>FROM products AS p1, products AS p2<br>WHERE p1.vend_id = p2.vend_id<br>AND p2.prod_id = &#x27;DTNTR&#x27;;<br></code></pre></td></tr></table></figure><p>​此查询中需要的两个表实际上是相同的表，因此products表在FROM子句中出现了两次。虽然这是完全合法的，但对<br>products的引用具有<strong>二义性</strong>，因为MySQL不知道你引用的是products表中的哪个实例。<br>​为解决此问题，使用了表别名。products的第一次出现为别名<strong>p1</strong>，第二次出现为别名p2。现在可以将这些别名用作表名。例如，SELECT语句使用<strong>p1前缀明确地给出所需列的全名</strong>。如果不这样，MySQL将返回错误，因为分别存在两个名为prod_id、prod_name的列。MySQL不知道想要的是哪一个列（即使它们事实上是同一个列)。WHERE（通过<strong>匹配p1中的vend_id和p2中的vend_id</strong>）首先联结两个表，然后按<strong>第二个表中的prod_id过滤数据</strong>，返回所需的数据。</p><h4 id="（2）自然联结"><a href="#（2）自然联结" class="headerlink" title="（2）自然联结"></a>（2）自然联结</h4><p>​自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般是通过对表使用通配符(SELECT *)，对所有其他表的列使用明确的子集来完成的。下面举一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT c.*, o.order_num, o.order_date, oi.prod_id, oi.quantity, oi.item_price<br>FROM customers AS c, orders AS o, orderitems AS oi <br>WHERE c.cust_id = o.cust_id<br>AND oi.order_num = o.order_num<br>AND prod_id = &#x27;FB&#x27;<br></code></pre></td></tr></table></figure><p>​在这个例子中，通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列被检索出来。</p><h4 id="（3）外部联结"><a href="#（3）外部联结" class="headerlink" title="（3）外部联结"></a>（3）外部联结</h4><p>​许多联结将一个表中的行与另一个表中的行相关联。但有时候会需要包含没有关联行的那些行。例如，可能需要使用联结来完成以下工作:</p><ul><li>对每个客户下了多少订单进行计数，包括那些至今尚未下订单的客户;</li><li>列出所有产品以及订购数量，包括没有人订购的产品;</li><li>计算平均销售规模，包括那些至今尚未下订单的客户。</li></ul><p>​在上述例子中，联结<strong>包含了那些在相关表中没有关联行的行</strong>。这种类型的联结称为<strong>外部联结</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT customers.cust_id, orders.order_num<br>FROM customers INNER JOIN orders<br>ON customers.cust_id = orders.cust_id<br></code></pre></td></tr></table></figure><blockquote><p>cust_idorder_num<br>1000120005<br>1000120009<br>1000320006<br>1000420007<br>1000520008</p></blockquote><p>​可以看到只输出了有订单的客户，而那些没有订单的客户被忽略了，为了检索所有客户，可如下进行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT customers.cust_id, orders.order_num<br>FROM customers LEFT OUTER JOIN orders<br>ON customers.cust_id = orders.cust_id<br></code></pre></td></tr></table></figure><blockquote><p>cust_idorder_num<br>1000120005<br>1000120009<br>10002NULL<br>1000320006<br>1000420007<br>1000520008</p></blockquote><p>​类似于上一章中所看到的内部联结,这条SELECT语句使用了关键字<code>OUTER JOIN</code>来指定联结的类型（而不是在WHERE子句中指定)。但是，与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用<code>OUTER JOIN</code>语法时，必须使用<strong>RIGHT</strong>或<strong>LEFT</strong>关键字指定包括其所有行的表（RIGHT指出的是<code>OUTER JOIN</code>右边的表，而LEFT指出的是<code>OUTER JOIN</code>左边的表)。上面的例子使用<code>LEFT OUTERJOIN</code>从FROM子句的左边表( <strong>customers</strong>表）中选择所有行。为了从右边的表中选择所有行，应该使用<code>RIGHT OUTER JOIN</code>，如下例所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT customers.cust_id, orders.order_num<br>FROM customers RIGHT OUTER JOIN orders<br>ON customers.cust_id = orders.cust_id<br></code></pre></td></tr></table></figure><blockquote><p>cust_idorder_num<br>1000120005<br>1000120009<br>1000320006<br>1000420007<br>1000520008</p></blockquote><blockquote><p><strong>外部联结的类型</strong>存在两种基本的外部联结形式:左外部联结和右外部联结。它们之间的唯一差别是所关联的表的顺序不同。换句话说,左外部联结可通过颠倒FROM或WHERE子句中表的顺序转换为右外部联结。因此,两种类型的外部联结可互换使用，而究竟使用哪一种纯粹是根据方便而定。</p></blockquote><h3 id="3、使用带聚集函数的联结"><a href="#3、使用带聚集函数的联结" class="headerlink" title="3、使用带聚集函数的联结"></a>3、使用带聚集函数的联结</h3><p>​虽然至今为止聚集函数的所有例子只是从单个表汇总数据，但这些函数也可以与联结一起使用。<br>​请看下面的例子。如果要检索所有客户及每个客户所下的订单数，下面使用了COUNT ()函数的代码可完成此工作:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT customers.cust_name, customers.cust_id, COUNT(orders.order_num) AS num_ord <br>FROM customers INNER JOIN orders<br>ON customers.cust_id = orders.cust_id<br>GROUP BY customers.cust_id<br></code></pre></td></tr></table></figure><blockquote><p>cust_namecust_idnum_ord<br>Coyote Inc.   100012<br>Wascals 100031<br>Yosemite Place100041<br>E Fudd100051</p></blockquote><p>​此SELECT语句使用<strong>INNER JOIN</strong>将<strong>customers</strong>和<strong>orders</strong>表互相关联。GROUP BY子句按客户分组数据，因此，函数调用<code>COUNT (orders.order_num)</code>对每个客户的订单计数，将它作为<strong>num_ord</strong>返回。<br>​聚集函数也可以方便地与其他联结一起使用。请看下面的例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT customers.cust_name, customers.cust_id, COUNT(orders.order_num) AS num_ord <br>FROM customers LEFT OUTER JOIN orders<br>ON customers.cust_id = orders.cust_id<br>GROUP BY customers.cust_id<br></code></pre></td></tr></table></figure><blockquote><p>cust_namecust_idnum_ord<br>Coyote Inc.100012<br>Mouse House100020<br>Wascals  100031<br>Yosemite Place10004 1<br>E Fudd 100051</p></blockquote><p>​这个例子使用左外部联结来包含所有客户，甚至包含那些没有任何下订单的客户。结果显示也包含了客户<strong>Mouse House</strong>，它<br>有0个订单。</p><h3 id="4、使用联结和联结条件"><a href="#4、使用联结和联结条件" class="headerlink" title="4、使用联结和联结条件"></a>4、使用联结和联结条件</h3><p>​汇总一下关于联结及其使用的某些要点。</p><ul><li>注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。</li><li>保证使用正确的联结条件，否则将返回不正确的数据。</li><li>应该总是提供联结条件，否则会得出笛卡儿积。</li><li>在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障排除更为简单。</li></ul><h2 id="二十一、创建和操作表"><a href="#二十一、创建和操作表" class="headerlink" title="二十一、创建和操作表"></a>二十一、创建和操作表</h2><h3 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h3><p>​<strong>MySQL</strong>不仅用于表数据操纵，而且还可以用来执行数据库和表的所有操作，包括表本身的创建和处理。</p><p>​创建表的方法有两种：</p><ul><li>使用具有交互创建和管理表的工具；</li><li>表也可以直接用<strong>MySQL</strong>语句操纵。</li></ul><p>可以使用<strong>CREATE TABLE</strong>创建表。在使用交互工具时，实际上使用的是<strong>MySQL</strong>语句。但是这些语句不上用户编写的，界面工具会自动生成并执行相应的<strong>MySQL</strong>语句（改现有表等操作也是如此）。</p><h4 id="（1）表创建基础"><a href="#（1）表创建基础" class="headerlink" title="（1）表创建基础"></a>（1）表创建基础</h4><p>​使用<strong>CREATE TABLE</strong>创建表时，必须给出下列信息：</p><ul><li>新表的名字，在关键字<strong>CREATE TABLE</strong></li><li>表列的名字和定义，用逗号隔开</li></ul><p><strong>CREATE TABLE</strong>语句也可能会包括其他关键字或选项，但至少包括<strong>表名</strong>和<strong>列的细节</strong>。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE customers (<br>  cust_id int NOT NULL AUTO_INCREMENT,<br>  cust_name char(50) NOT NULL,<br>  cust_address char(50) DEFAULT NULL,<br>  cust_city char(50) DEFAULT NULL,<br>  cust_state char(5) DEFAULT NULL,<br>  cust_zip char(10) DEFAULT NULL,<br>  cust_country char(50) DEFAULT NULL,<br>  cust_contact char(50) DEFAULT NULL,<br>  cust_email char(255) DEFAULT NULL,<br>  PRIMARY KEY (cust_id)<br>) ENGINE=InnoDB<br></code></pre></td></tr></table></figure><p>​从上面的例子可以看到，表名紧跟在<strong>CREATE TABLE</strong>关键字后面，实际的表定义(所有列)括在圆括号中。各列之间用逗号隔开。这个表由9列组成，每列的定义以列名（在表中必须是唯一的）开始，后跟列的数据类型。表的的主键可以在创建表时用<strong>PRIMARY KEY</strong>关键字指定。</p><h4 id="（2）使用NULL值"><a href="#（2）使用NULL值" class="headerlink" title="（2）使用NULL值"></a>（2）使用NULL值</h4><p>​<strong>NULL</strong>值就是没用值或缺值。允许<strong>NULL</strong>即允许插入列时不给出该列的值，不允许<strong>NULL</strong>值的列不接受该列没有值的行，换句话说，在插入或更新行时，该列必须有值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE orders (<br>  order_num int NOT NULL AUTO_INCREMENT,<br>  order_date datetime NOT NULL,<br>  cust_id int NOT NULL,<br>  PRIMARY KEY (order_num),<br>  KEY fk_orders_customers (cust_id),<br>  CONSTRAINT fk_orders_customers FOREIGN KEY (cust_id) REFERENCES customers (cust_id)<br>) ENGINE=InnoDB <br></code></pre></td></tr></table></figure><p>​上面这个例子，创建了orders表。该表包括3个列，分别是订单号、订单日期、客户ID，由于3个列都需要，因此每个列的定义都包含<strong>NOT NULL</strong>。如果试图插入没用值的列，将会返回错误，且插入失败。</p><p>​下一个例子混合了<strong>NULL</strong>和<strong>NOT NULL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE vendors (<br>  vend_id int NOT NULL AUTO_INCREMENT,<br>  vend_name char(50) NOT NULL,<br>  vend_address char(50) DEFAULT NULL,<br>  vend_city char(50) DEFAULT NULL,<br>  vend_state char(5) DEFAULT NULL,<br>  vend_zip char(10) DEFAULT NULL,<br>  vend_country char(50) DEFAULT NULL,<br>  PRIMARY KEY (vend_id)<br>) ENGINE=InnoDB<br></code></pre></td></tr></table></figure><p>​由于供应商和供应商名字子列是必需的，因此使用<strong>NOT NULL</strong>，其余5个列都允许<strong>NULL</strong>值。<strong>NULL</strong>为默认值，如果不指定<strong>NOT NULL</strong>，则认定为<strong>NULL</strong>。</p><h4 id="（3）主键再介绍"><a href="#（3）主键再介绍" class="headerlink" title="（3）主键再介绍"></a>（3）主键再介绍</h4><p>​主键值必须唯一。即主键如果使用单个列，则其值必须唯一；如果使用多个列，则这些列的组合之必须唯一。</p><p>​下面是单个列作为主键的语句定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">PRIMARY KEY (vend_id)<br></code></pre></td></tr></table></figure><p>​为创建多个列组成的主键，应该以逗号分隔的列给出各列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE orderitems (<br>  order_num int NOT NULL,<br>  order_item int NOT NULL,<br>  prod_id char(10) NOT NULL,<br>  quantity int NOT NULL,<br>  item_price decimal(8,2) NOT NULL,<br>  PRIMARY KEY (order_num,order_item),<br>  KEY fk_orderitems_products (prod_id),<br>  CONSTRAINT fk_orderitems_orders FOREIGN KEY (order_num) REFERENCES orders (order_num),<br>  CONSTRAINT fk_orderitems_products FOREIGN KEY (prod_id) REFERENCES products (prod_id)<br>) ENGINE=InnoDB <br></code></pre></td></tr></table></figure><p>​每个订单有多项物品，但每个订单任何时候都只有1个第一项物品，1个第二项物品，如此等待。因此订单号（order_num列）和订单物品（order_item列）的组合是唯一的，因此可以作为主键。</p><h4 id="（4）AUTO-INCREMENT"><a href="#（4）AUTO-INCREMENT" class="headerlink" title="（4）AUTO_INCREMENT"></a>（4）AUTO_INCREMENT</h4><p>​观察一下<strong>customers</strong>表和<strong>orders</strong>表。<strong>customers</strong>表中的顾客列由<strong>cust_id</strong>唯一标识，每个顾客有一个唯一的编号。</p><p>​只要能保证每个顾客的编号不同，其值是多少都可以，为了方便我们引入<strong>AUTO_INCREMENT</strong>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">cust_id int NOT NULL AUTO_INCREMENT,<br></code></pre></td></tr></table></figure><p>​<strong>AUTO_INCREMENT</strong>告诉<strong>MySQL</strong>，本列每当增加一行时自动增量。每次执行<strong>INSERT</strong>操作时，<strong>MySQL</strong>自动对该列增量，给该列赋予下一个可用的值，这样给每个行分配一个唯一的cust_id，从而可用用作主键的值。</p><p>​每个表只允许一个<strong>AUTO_INCREMENT</strong>列，而且它必须被索引。</p><h4 id="（5）指定默认值"><a href="#（5）指定默认值" class="headerlink" title="（5）指定默认值"></a>（5）指定默认值</h4><p>​如果在插入行时没有给出值，<strong>MySQL</strong>允许指定此时使用的默认值。默认值用<strong>CREATE TABLE</strong>语句的列定义中的<strong>DEFAULT</strong>关键字指定。</p><blockquote><p>​<strong>不允许函数</strong>：与大多数<strong>DBMS</strong>不一样，<strong>MySQL</strong>不允许使用函数作为默认值，它只支持常量。</p><p>​<strong>使用默认值而不是NULL值</strong> 许多数据库开发人员使用默认值而不是<strong>NULL</strong>列。</p></blockquote><h4 id="（6）引擎类型"><a href="#（6）引擎类型" class="headerlink" title="（6）引擎类型"></a>（6）引擎类型</h4><p>​迄今为止使用的<strong>CREATE TABLE</strong>语句全都以<strong>ENGINE&#x3D;InnoDB</strong>语句结束。</p><p>​与其他DBMS一样，MySQL有一个具体管理和处理数据的内部引擎在你使用CREATE TABLE语句时，该引擎具体创建表，而在你使用SELECT语句或进行其他数据库处理时，该引擎在内部处理你的请求。多数时候此引擎都隐藏在DBMS内，不需要过多关注它。</p><p>​但MySQL与其他DBMS不一样，它具有多种引擎。它打包多个引擎这些引擎都隐藏在MySQL服务器内，全都能执行CREATE TABLE和SELECT等命令。<br>为什么要发行多种引擎呢?因为它们具有各自不同的功能和特性为不同的任务选择正确的引擎能获得良好的功能和灵活性。</p><p>当然，你完全可以忽略这些数据库引擎。如果省略ENGINE&#x3D;语句则使用默认引擎(很可能是MyISAM)，多数SQL语句都会默认使用它。但并不是所有语句都默认使用它，这就是为什么ENGINE&#x3D;语句很重要的原因(也就是为什么本书的样列表中使用两种引的原因)。</p><p>以下是几个需要知道的引擎:</p><ul><li>InnoDB是一个可靠的事务处理引擎(参见第26章)，它不支持全文本搜索;</li><li>MEMORY在功能等同于MyISAM，但由于数据存储在内存(不是磁盘)中，速度很快(特别适合于临时表);</li><li>MyISAM是一个性能极高的引擎，它支持全文本搜索(参见第18章)，但不支持事务处理。</li></ul><h3 id="2、更新表"><a href="#2、更新表" class="headerlink" title="2、更新表"></a>2、更新表</h3><p>​更新表，可以使用<strong>ALTER TABLE</strong>语句。</p><p>​想要更新表，必须给出以下信息：</p><ul><li>在<strong>ALTER TABLE</strong>后给出要更改的表名。</li><li>所做更改的列表。</li></ul><p>​下面的例子给<strong>vendors</strong>表添加一个<strong>vend_phone</strong>列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table vendors<br>add vend_phone char(20);<br></code></pre></td></tr></table></figure><p>​删除刚刚增加的列，可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table vendors<br>DROP COLUMN vend_phone;<br></code></pre></td></tr></table></figure><h3 id="3、删除表"><a href="#3、删除表" class="headerlink" title="3、删除表"></a>3、删除表</h3><p>​使用<strong>DROP TABLE</strong> 即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE xx<br></code></pre></td></tr></table></figure><h3 id="4、重命名表"><a href="#4、重命名表" class="headerlink" title="4、重命名表"></a>4、重命名表</h3><p>使用<strong>RENAME TABLE</strong>即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">RENAME TABLE xx TO yy<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协程</title>
      <link href="/2023/04/24/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%8D%8F%E7%A8%8B/"/>
      <url>/2023/04/24/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%8D%8F%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：<span id="more"></span></h1><p>关于协程，下面说法正确的是（ ）</p><ul><li>A. 协程和线程都可以实现程序的并发执行；</li><li>B. 线程比协程更轻量级；</li><li>C. 协程不存在死锁问题；</li><li>D. 通过 channel 来进行协程间的通信；</li></ul><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>、D<br></code></pre></td></tr></table></figure><h4 id="解析如下："><a href="#解析如下：" class="headerlink" title="解析如下："></a>解析如下：</h4><p>A. 协程和线程都可以实现程序的并发执行：协程和线程都是在并发编程中使用的技术，它们可以让程序在同时处理多个任务时更高效地运行。协程和线程之间的主要区别在于它们的执行方式和使用的资源，但都可以实现程序的并发执行。</p><p>B. 线程比协程更轻量级：这个说法是不准确的，因为线程和协程之间的比较并不是简单的轻重量级的问题。协程相对于线程来说，它们的初始栈大小更小，创建和销毁的开销更小，上下文切换的开销也更小，所以在大量并发的情况下，协程的表现要优于线程。但是，在一些需要密集计算或者I&#x2F;O操作较多的场景下，线程的表现可能更好。</p><p>C. 协程不存在死锁问题：这个说法是不准确的，因为协程和线程都存在死锁问题，而且在协程中，由于存在共享数据和共享锁的情况，死锁问题可能更加严重。</p><p>D. 通过 channel 来进行协程间的通信：协程之间的通信通常是通过channel来实现的。Channel提供了一种安全且高效的机制，允许协程在不同的执行线程中进行通信和数据交换。通常，一个协程将数据放入通道中，而另一个协程从通道中读取该数据。通过这种方式，协程之间可以实现同步、互斥和数据共享。</p><h4 id="扩展知识："><a href="#扩展知识：" class="headerlink" title="扩展知识："></a>扩展知识：</h4><blockquote><p>协程和线程都是并发执行的基本单位，但它们有着不同的特点和应用场景。</p><p><strong>相同点：</strong></p><ol><li>都可以实现并发执行，从而提高程序的性能；</li><li>都可以被抢占（即暂停执行，并让出CPU资源）；</li><li>都可以与其他并发执行的单位（协程或线程）进行通信和同步。</li></ol><p><strong>不同点：</strong></p><ol><li>线程是由操作系统调度的，而协程是由程序自己调度的。线程的调度是由操作系统内核实现的，而协程的调度则是在用户空间中完成的，这使得协程的切换比线程更加轻量级，开销更小。</li><li>在创建和销毁的开销方面，协程的代价更小。线程需要占用较多的内存和系统资源，而协程只需要占用少量的栈空间和调度器资源。</li><li>线程之间的切换需要进行上下文切换（即保存当前线程的状态，以便恢复执行），而协程的切换则不需要进行上下文切换，只需要保存协程的上下文信息即可。</li><li>线程之间的通信和同步需要使用诸如锁、信号量、条件变量等同步机制，而协程之间的通信和同步则可以通过channel等更为简单的方式实现。</li></ol><p>总的来说，协程更适合于IO密集型的任务，如网络编程和文件处理等，而线程更适合于CPU密集型的任务，如图像处理和大数据计算等。在实际应用中，可以根据任务的特点和需求选择合适的并发执行方式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for-range 又又又来了</title>
      <link href="/2023/04/23/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/for-range-map/"/>
      <url>/2023/04/23/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/for-range-map/</url>
      
        <content type="html"><![CDATA[<h2 id="下面代码里的ocounter的输出值？"><a href="#下面代码里的ocounter的输出值？" class="headerlink" title="下面代码里的ocounter的输出值？"></a>下面代码里的ocounter的输出值？<span id="more"></span></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;A&quot;</span>: <span class="hljs-number">21</span>,<br><span class="hljs-string">&quot;B&quot;</span>: <span class="hljs-number">22</span>,<br><span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-number">23</span>,<br>&#125;<br>counter := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br><span class="hljs-keyword">if</span> counter == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">delete</span>(m, <span class="hljs-string">&quot;A&quot;</span>)<br>&#125;<br>counter++<br>fmt.Println(k, v)<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;counter is &quot;</span>, counter)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">2</span>或者<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>​因为for range map是无序的，故如果第一次循环到A,则输出3，否则输出2。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找两个正序数组的中位数</title>
      <link href="/2023/04/22/%E5%88%B7%E9%A2%98/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>/2023/04/22/%E5%88%B7%E9%A2%98/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：寻找两个正序数组的中位数"><a href="#题目：寻找两个正序数组的中位数" class="headerlink" title="题目：寻找两个正序数组的中位数"></a>题目：寻找两个正序数组的中位数<span id="more"></span></h2><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。</p><p>算法的时间复杂度应该为 O(log (m+n)) 。</p><p> 示例 1：</p><blockquote><p>输入：nums1 &#x3D; [1,3], nums2 &#x3D; [2]<br>输出：2.00000<br>解释：合并数组 &#x3D; [1,2,3] ，中位数 2</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums1 &#x3D; [1,2], nums2 &#x3D; [3,4]<br>输出：2.50000<br>解释：合并数组 &#x3D; [1,2,3,4] ，中位数 (2 + 3) &#x2F; 2 &#x3D; 2.5</p></blockquote><p>提示：</p><ul><li><p>nums1.length &#x3D;&#x3D; m</p></li><li><p>nums2.length &#x3D;&#x3D; n</p></li><li><p>0 &lt;&#x3D; m &lt;&#x3D; 1000</p></li><li><p>0 &lt;&#x3D; n &lt;&#x3D; 1000</p></li><li><p>1 &lt;&#x3D; m + n &lt;&#x3D; 2000</p></li><li><p>-106 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 106</p></li></ul><p>来源：力扣（LeetCode）</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><h4 id="（1）暴力"><a href="#（1）暴力" class="headerlink" title="（1）暴力"></a>（1）暴力</h4><p>​直接将两个数组合并，然后进行排序，直接算出中位数:</p><ul><li>数组长度为奇数，数组的中位数为<code>a[len / 2]</code></li><li>数组长度为偶数，数组的中位数为<code>(a[len / 2] + a[len / 2 - 1]) / 2</code></li></ul><p>​这题的时间复杂度的上限在排序，是<code>O((n + m)long(n + m))</code>，显然没有达到题目的要求， 但也勉强可以AC。</p><p>​代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1.<span class="hljs-built_in">size</span>(); i ++)<br>            res.<span class="hljs-built_in">push_back</span>(nums1[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums2.<span class="hljs-built_in">size</span>(); i ++)<br>            res.<span class="hljs-built_in">push_back</span>(nums2[i]);<br>        <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-type">int</span> len = res.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (len &amp; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> res[len / <span class="hljs-number">2</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">double</span>((res[len / <span class="hljs-number">2</span>] + res[len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>]) / <span class="hljs-number">2.0</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 递归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符的最长子串</title>
      <link href="/2023/04/22/%E5%88%B7%E9%A2%98/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2023/04/22/%E5%88%B7%E9%A2%98/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：无重复字符的最长子串"><a href="#题目：无重复字符的最长子串" class="headerlink" title="题目：无重复字符的最长子串"></a>题目：无重复字符的最长子串<span id="more"></span></h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><blockquote><p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><p>示例 2:</p><blockquote><p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><p>示例 3:</p><blockquote><p>输入: s &#x3D; “pwwkew”<br>输出: 3</p></blockquote><p>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><p>提示：</p><ul><li><p>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104</p></li><li><p>s 由英文字母、数字、符号和空格组成</p></li></ul><p>来源：力扣（LeetCode）</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​用哈希表<code>map&lt;char, int&gt;</code>将每一个字符与其出现次数作为键值对存起来，然后利用双指针从前往后扫描即可：</p><ol><li>如果当前字符只出现了一次，则更新最长串的长度，并继续向后扫描</li><li>如果当前字符出现了不止一次，则将尾指针向前挪，挪至当前字符只出现一次为止，然后更新最长串的长度，并继续向后扫描。</li></ol><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; hash;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++)<br>        &#123;<br>            hash[s[i]] ++;<br>            <span class="hljs-keyword">while</span> (hash[s[i]] &gt; <span class="hljs-number">1</span>) &#123;<br>                hash[s[j]] --;<br>                j ++;<br>            &#125;<br>            res = <span class="hljs-built_in">max</span>(res, i - j + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 哈希表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 双指针算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2023/04/22/%E5%88%B7%E9%A2%98/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2023/04/22/%E5%88%B7%E9%A2%98/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：两数之和"><a href="#题目：两数之和" class="headerlink" title="题目：两数之和"></a>题目：两数之和<span id="more"></span></h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例 1：</p><blockquote><p>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.</p></blockquote><p>示例 2：</p><blockquote><p>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]</p></blockquote><p>示例 3：</p><blockquote><p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p></blockquote><p>提示：</p><ul><li><p>每个链表中的节点数在范围 [1, 100] 内</p></li><li><p>0 &lt;&#x3D; Node.val &lt;&#x3D; 9</p></li><li><p>题目数据保证列表表示的数字不含前导零</p></li></ul><p>来源：力扣（LeetCode）</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​这题的思想和高精度类似，都是从低位开始算，然后逐渐进位到高位，只不过这里的用的链表的形式。</p><p>​在模拟需要注意：</p><ol><li>​从低位到高位，逐位相加，如果和大于10，就保留个位，即<code>t % 10</code></li><li>如果最高位有进位，则在最前面补1</li></ol><p>​这里还用到了一个做链表题目的小技巧：</p><blockquote><p>​添加一个虚拟头节点：<code>ListNode *head = new ListNode(-1);</code>，这样可以不用特判处理完后的链表是否为空，返回的形式都是res -&gt; next</p></blockquote><p>下面是链表进行加入一个数的操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">ListNode* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t % <span class="hljs-number">10</span>);<br>cur-&gt;next = temp;<br>cur = temp;<br></code></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        <span class="hljs-keyword">auto</span> head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>), cur = head;<br>        <br>        <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l1 || l2 || t)&#123;<br>            <span class="hljs-keyword">if</span> (l1) t += l1-&gt;val, l1 = l1-&gt;next;<br>            <span class="hljs-keyword">if</span> (l2) t += l2-&gt;val, l2 = l2-&gt;next;<br>            cur-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t % <span class="hljs-number">10</span>);<br>            cur = cur-&gt;next;<br>            t /= <span class="hljs-number">10</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> head-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for-range又来啦~</title>
      <link href="/2023/04/22/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/for-range%E5%8F%88%E6%9D%A5%E4%BA%86/"/>
      <url>/2023/04/22/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/for-range%E5%8F%88%E6%9D%A5%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<h2 id="下面这段代码输出结果正确吗？"><a href="#下面这段代码输出结果正确吗？" class="headerlink" title="下面这段代码输出结果正确吗？"></a>下面这段代码输出结果正确吗？<span id="more"></span></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Foo <span class="hljs-keyword">struct</span> &#123;<br>bar <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s1 := []Foo&#123;<br>&#123;<span class="hljs-string">&quot;A&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;B&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;C&quot;</span>&#125;,<br>&#125;<br>s2 := <span class="hljs-built_in">make</span>([]*Foo, <span class="hljs-built_in">len</span>(s1))<br><span class="hljs-keyword">for</span> i, value := <span class="hljs-keyword">range</span> s1 &#123;<br>s2[i] = &amp;value<br>&#125;<br>fmt.Println(s1[<span class="hljs-number">0</span>], s1[<span class="hljs-number">1</span>], s1[<span class="hljs-number">2</span>])<br>fmt.Println(s2[<span class="hljs-number">0</span>], s2[<span class="hljs-number">1</span>], s2[<span class="hljs-number">2</span>])<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">输出：<br>&#123;A&#125; &#123;B&#125; &#123;C&#125;<br>&amp;&#123;A&#125; &amp;&#123;B&#125; &amp;&#123;C&#125;<br></code></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><p>​s2输出的结果是<code>&amp;&#123;C&#125;&amp;&#123;C&#125;&amp;&#123;C&#125;</code>，故上述的输出是错误的。</p><p>​在前面的题目，我们提到过，for-range使用短变量声明(:&#x3D;)的形式迭代变量时，变量i、value每次在循环题中都会被重用，而不是重新声明。故s2每次填充的都说value的地址，而在组后一次循环中，value被赋值为{C}。因此s2输出显示三个&amp;{C}。</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> s1 &#123;<br>s2[i] = &amp;s1[i]<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2023/04/21/%E5%88%B7%E9%A2%98/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/04/21/%E5%88%B7%E9%A2%98/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：两数之和"><a href="#题目：两数之和" class="headerlink" title="题目：两数之和"></a>题目：两数之和<span id="more"></span></h2><p>​给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>​你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>​你可以按任意顺序返回答案。</p><p>示例 1：</p><blockquote><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p></blockquote><p>示例 2：</p><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p><p>示例 3：</p><blockquote><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p></blockquote><p>提示：</p><blockquote><p>2 &lt;&#x3D; nums.length &lt;&#x3D; 10^4<br>-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9<br>-10^9 &lt;&#x3D; target &lt;&#x3D; 10^9<br>只会存在一个有效答案</p></blockquote><p>题目来源：力扣（LeetCode）</p><h4 id="解题思路一："><a href="#解题思路一：" class="headerlink" title="解题思路一："></a>解题思路一：</h4><p>​题意很清楚，就是要从一个数组里找到唯一存在的一对数的和为<code>target</code>，并返回他们的下标，很容易就能想到暴力：两层循环分别枚举一遍数组，如果<code>nums[i] + nums[j] == target</code>，就找到了答案，然后将其放入<code>vector</code>中返回即可，时间复杂度O(n^2)，勉强能过。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i ++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j ++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target)<br>                &#123;<br>                    res.<span class="hljs-built_in">push_back</span>(i), res.<span class="hljs-built_in">push_back</span>(j);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="解题思路二："><a href="#解题思路二：" class="headerlink" title="解题思路二："></a>解题思路二：</h4><p>​这题比较友好，n的数据范围比较小，但如果n的范围更大，显然是过不了的，故我们需要想一想别的 方法。</p><p>​这里有一种非常巧妙的方法：哈希表。</p><p>​我们只需要枚举一次数组，然后在每一次枚举时，我们需要做：</p><blockquote><ol><li>判断<code>target - nums[i]</code>是否存在哈希表中</li><li>将nums[i]插入哈希表中</li></ol></blockquote><p>​然后就能找到答案了。</p><p>​解释：由于数据只有一组解，假设答案为[i, j]（i &lt; j），则当我们循环到j时，nums[i]一定会存在哈希表中，且有nums[i] + nums[j] &#x3D; target，故一定能找到解。</p><p>​时间复杂度：只扫描一遍数组，且哈希表的插入和查询操作的复杂度是O(1)，故总时间复杂度为O(n)</p><h4 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; hash;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i ++)<br>        &#123;<br>            <span class="hljs-type">int</span> another = target - nums[i];<br>            <span class="hljs-keyword">if</span> (hash.<span class="hljs-built_in">count</span>(another))<br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(i), res.<span class="hljs-built_in">push_back</span>(hash[another]);<br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br>            hash[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 哈希表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组与slice</title>
      <link href="/2023/04/21/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%88%87%E7%89%87/"/>
      <url>/2023/04/21/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E5%88%87%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="问题：下面这段代码输出什么？"><a href="#问题：下面这段代码输出什么？" class="headerlink" title="问题：下面这段代码输出什么？"></a>问题：下面这段代码输出什么？<span id="more"></span></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">var</span> r [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>a[<span class="hljs-number">1</span>] = <span class="hljs-number">12</span><br>a[<span class="hljs-number">2</span>] = <span class="hljs-number">13</span><br>&#125;<br>r[i] = v<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;r = &quot;</span>, r)<br>fmt.Println(<span class="hljs-string">&quot;a = &quot;</span>, a)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r =  [<span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>a =  [<span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>​这一题与前面的 <a href="https://oyto.github.io/2023/04/19/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/for-range/">for - range</a>很相似，一眼就能看出来，因为for-range执行前是将原数组进行拷贝，所以在循环里改变的数组，是不会影响到我们循环时的副本的，所以答案为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r =  [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>a =  [<span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>​但事实并非如此，我们在之前的题目中，a是数组，而在这里a是slice。slice是引用类型，故其是一个指向底层数组的指针，因此我们在循环使用的副本依旧是一个指向原底层数组的副本，故对切片所有的操作，都会影响到底层数组，所以考研通过v获得修改后的数组元素。</p><p>​你学会了吗？</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slice</title>
      <link href="/2023/04/20/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/slice/"/>
      <url>/2023/04/20/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/slice/</url>
      
        <content type="html"><![CDATA[<h2 id="问题：下面这段代码输出什么？"><a href="#问题：下面这段代码输出什么？" class="headerlink" title="问题：下面这段代码输出什么？"></a>问题：下面这段代码输出什么？<span id="more"></span></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">change</span><span class="hljs-params">(s ...<span class="hljs-type">int</span>)</span></span> &#123;<br>s = <span class="hljs-built_in">append</span>(s,<span class="hljs-number">3</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>slice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>)<br>slice[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>slice[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>change(slice...)<br>fmt.Println(slice)<br>change(slice[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]...)<br>fmt.Println(slice)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="答案如下"><a href="#答案如下" class="headerlink" title="答案如下"></a>答案如下</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>​第一次调用change函数时，在函数内需要往切片里加入一个元素，但此时slice切片的长度已经达到了容量的上限，故需要扩容。当一个slice需要扩容时，Go会创建一个新的数组，将原有数组的元素复制到新数组中，并将新的元素插入到新数组中，故原slice的底层数组不变</p><p>​第二次调用change函数时，使用了操作符<code>[i,j]</code>获得一个新的切片，假定为 slice1，它的底层数组和原切片底层数组是重合的，不过 slice1 的长度、容量分别是 2、5，没有达到容量的上限，所以在使用 change() 函数中对 slice1增加元素时，底层数组的修改会影响到原切片。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for-range</title>
      <link href="/2023/04/19/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/for-range/"/>
      <url>/2023/04/19/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/for-range/</url>
      
        <content type="html"><![CDATA[<h2 id="下面这段代码输出什么？"><a href="#下面这段代码输出什么？" class="headerlink" title="下面这段代码输出什么？"></a>下面这段代码输出什么？<span id="more"></span></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">var</span> r [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> a &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>a[<span class="hljs-number">1</span>] = <span class="hljs-number">12</span><br>a[<span class="hljs-number">2</span>] = <span class="hljs-number">13</span><br>&#125;<br>r[i] = v<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;r = &quot;</span>, r)<br>fmt.Println(<span class="hljs-string">&quot;a = &quot;</span>, a)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r =  [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>a =  [<span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>​range 表达式是副本参与循环，即对于<code>range x</code>，我们复制了x，这里假设将其拷贝到b，在for循环里执行的时候，每次遍历的就是x的副本b，在例子里，就是每次遍历的是a的副本b，而不是a本身，则实际的range循环代码是下面这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> b = a<span class="hljs-comment">//相当于这里在循环之前，隐式先将a数组拷贝到b里</span><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> b &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>a[<span class="hljs-number">1</span>] = <span class="hljs-number">12</span><br>a[<span class="hljs-number">2</span>] = <span class="hljs-number">13</span><br>&#125;<br>r[i] = v<br>&#125;<br></code></pre></td></tr></table></figure><p>​因此无论 a 被如何修改，其副本 b 依旧保持原值，并且参与循环的是 b，因此 v 从 b 中取出的仍旧是 a 的原值，而非修改后的值。</p><p>​如果想要 r 和 a 一样输出，修改如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">var</span> r [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br><br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> &amp;a &#123;<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> &#123;<br>a[<span class="hljs-number">1</span>] = <span class="hljs-number">12</span><br>a[<span class="hljs-number">2</span>] = <span class="hljs-number">13</span><br>&#125;<br>r[i] = v<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;r = &quot;</span>, r)<br>fmt.Println(<span class="hljs-string">&quot;a = &quot;</span>, a)<br>&#125;<br></code></pre></td></tr></table></figure><p>​输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r =  [<span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>a =  [<span class="hljs-number">1</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>​修改后的代码是将地址传入了range表达式，其副本依旧是一个指向原数组a的指针，因此后续所有循环中均是&amp;a指向的原数组参与的，故v能从&amp;a中指向的原数组取出修改后的值。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你了解defer吗？</title>
      <link href="/2023/04/18/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E4%BD%A0%E4%BA%86%E8%A7%A3defer%E5%90%97%EF%BC%9F/"/>
      <url>/2023/04/18/Go%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/%E4%BD%A0%E4%BA%86%E8%A7%A3defer%E5%90%97%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="你了解defer吗？"><a href="#你了解defer吗？" class="headerlink" title="你了解defer吗？"></a>你了解defer吗？<span id="more"></span></h2><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> (r <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>r += n<br><span class="hljs-built_in">recover</span>()<br>&#125;()<br><br><span class="hljs-keyword">var</span> f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br><br><span class="hljs-keyword">defer</span> f()<br>f = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>r += <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(f(<span class="hljs-number">3</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题：上面的代码会输出什么？为什么？"><a href="#问题：上面的代码会输出什么？为什么？" class="headerlink" title="问题：上面的代码会输出什么？为什么？"></a>问题：上面的代码会输出什么？为什么？</h3><h3 id="首先我们先来了解一下go语言中的defer："><a href="#首先我们先来了解一下go语言中的defer：" class="headerlink" title="首先我们先来了解一下go语言中的defer："></a>首先我们先来了解一下go语言中的defer：</h3><p>​defer顾名思义，延迟。它是go语言中的一个关键字，主要用在函数或方法前面，作用是用于函数和方法的延迟调用，在语法上，<code>defer</code>与普通的函数调用没有什么区别。</p><p>​在使用上非常简单，只需要弄清楚以下几点即可：</p><ol><li>延迟的函数的什么时候被调用？<ol><li>函数return的时候</li><li>发生panic的时候</li></ol></li><li>延迟调用的语法规则<ol><li>defer关键字后面表达式必须是函数或者方法调用</li><li>延迟内容不能被括号括起来</li></ol></li><li>当一个函数中有多个defer时，他们的执行顺序是<strong>先进后出</strong></li><li>在函数执行return的过程可以分为三步：<ol><li>设置返回值</li><li>执行defer语句</li><li>将结果返回</li></ol></li><li>defer 定义的延迟函数的参数在 defer 语句出时就已经确定下来了</li></ol><p>​知道了这些，上面的题目久很好理解了。</p><p>​正确答案是<strong>7</strong>。</p><p>​当然，很有可能你的答案和正确答案一样，但分析不一定正确，所以接着往下看。</p><p>​这里只对<code>函数f</code>进行讲解：</p><blockquote><ol><li>首先使用defer关键字注册了一个匿名函数，然后这个匿名函数在<code>函数f</code>返回时执行。在这个匿名函数里，使用了<code>recover()</code>，这意味着它可以恢复panic。</li><li>接着定义了一个<code>变量f</code>，类型为<code>func()</code>，这里由于只声明了，但是没有定义，故<code>变量f</code>是一个<code>nil</code>函数。</li><li>然后使用defer关键字将<code>f变量</code>注册成延迟函数，这个延迟函数在<code>函数f</code>返回时会执行，但这个匿名函数是一个<code>nil函数</code>，因此在执行这个延迟函数时会触发panic</li><li>接下来是对<code>变量f</code>的定义 </li><li><code>return n + 1</code>此时，返回值变量<code>r = n + 1</code>，接着执行defer注册的延迟函数，因为defer函数的执行顺序是先进后出的，故先执行<code>变量f</code>，但由于这里注册的是一个<code>nil函数</code>，因此触发panic，接着执行最开始注册的匿名函数，此时<code>r = n + 1 + n</code>，遇到了recover()，所以恢复了panic，将r的值返回</li><li>最后返回给主函数的值<code>r = n + 1 + n = 7</code></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> 每日一题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大上升子序列和</title>
      <link href="/2023/04/17/%E5%88%B7%E9%A2%98/%E6%9C%80%E5%A4%A7%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/"/>
      <url>/2023/04/17/%E5%88%B7%E9%A2%98/%E6%9C%80%E5%A4%A7%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：最大上升子序列和"><a href="#题目：最大上升子序列和" class="headerlink" title="题目：最大上升子序列和"></a>题目：最大上升子序列和<span id="more"></span></h1><p>一个数的序列 bi，当 b1&lt;b2&lt;…&lt;bS 的时候，我们称这个序列是上升的。</p><p>对于给定的一个序列(a1,a2,…,aN)，我们可以得到一些上升的子序列(ai1,ai2,…,aiK)，这里1≤i1&lt;i2&lt;…&lt;iK≤N。</p><p>比如，对于序列(1,7,3,5,9,4,8)，有它的一些上升子序列，如(1,7),(3,4,8)等等。</p><p>这些子序列中和最大为18，为子序列(1,3,5,9)的和。</p><p>你的任务，就是对于给定的序列，求出最大上升子序列和。</p><p>注意，最长的上升子序列的和不一定是最大的，比如序列(100,1,2,3)的最大上升子序列和为100，而最长上升子序列为(1,2,3)。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行是序列的长度N。</p><p>第二行给出序列中的N个整数，这些整数的取值范围都在0到10000(可能重复)。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大上升子序列和。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤1000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span> <span class="hljs-number">4</span> <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">18<br></code></pre></td></tr></table></figure><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析:"></a>题目分析:</h4><p>​一看题目就知道是最长上升子序列模型，只不过这里求的是最大和，只需要对代码进行一部分修改即可。</p><p>​DP分析过程如下：</p><p>​<img src="/images/%E6%9C%80%E5%A4%A7%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C.png" alt="最大上升子序列和"></p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N], a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        f[i] = a[i];<span class="hljs-comment">//求的是最大和，故需要加上当前数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++)<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + a[i]);<span class="hljs-comment">//状态转移方程</span><br>        res = <span class="hljs-built_in">max</span>(res, f[i]);<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最长上升子序列模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由数据范围反推算法复杂度以及算法内容</title>
      <link href="/2023/04/16/%E6%9D%82%E7%B1%BB/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E5%8F%8D%E6%8E%A8%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%A5%E5%8F%8A%E7%AE%97%E6%B3%95%E5%86%85%E5%AE%B9/"/>
      <url>/2023/04/16/%E6%9D%82%E7%B1%BB/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E5%8F%8D%E6%8E%A8%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%A5%E5%8F%8A%E7%AE%97%E6%B3%95%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="见下图："><a href="#见下图：" class="headerlink" title="见下图："></a>见下图：<span id="more"></span></h1><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><img src="/images/%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4.png" alt="来自y总的总结"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 杂类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞机降落</title>
      <link href="/2023/04/16/%E5%88%B7%E9%A2%98/%E9%A3%9E%E6%9C%BA%E9%99%8D%E8%90%BD/"/>
      <url>/2023/04/16/%E5%88%B7%E9%A2%98/%E9%A3%9E%E6%9C%BA%E9%99%8D%E8%90%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：飞机降落"><a href="#题目：飞机降落" class="headerlink" title="题目：飞机降落"></a>题目：飞机降落<span id="more"></span></h1><p>有 N 架飞机准备降落到某个只有一条跑道的机场。</p><p>其中第 i 架飞机在 Ti 时刻到达机场上空，到达时它的剩余油料还可以继续盘旋 Di 个单位时间，即它最早可以于 Ti 时刻开始降落，最晚可以于 Ti+Di 时刻开始降落。</p><p>降落过程需要 Li 个单位时间。</p><p>一架飞机降落完毕时，另一架飞机可以立即在同一时刻开始降落，但是不能在前一架飞机完成降落前开始降落。</p><p>请你判断 N 架飞机是否可以全部安全降落。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多组数据。</p><p>第一行包含一个整数 T，代表测试数据的组数。</p><p>对于每组数据，第一行包含一个整数 N。</p><p>以下 N 行，每行包含三个整数：Ti，Di 和 Li。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每组数据，输出 <code>YES</code> 或者 <code>NO</code>，代表是否可以全部安全降落。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 30%30% 的数据，N≤2。<br>对于 100%100% 的数据，1≤T≤10，1≤N≤10，0≤Ti,Di,Li≤10^5</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">100</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">10</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">20</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">10</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">10</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">NO</span><br></code></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>对于第一组数据，可以安排第 33 架飞机于 00 时刻开始降落，2020 时刻完成降落。安排第 22 架飞机于 2020 时刻开始降落，3030 时刻完成降落。安排第 11 架飞机于 3030 时刻开始降落，4040 时刻完成降落。</p><p>对于第二组数据，无论如何安排，都会有飞机不能及时降落。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​根据题给数据范围n &lt;&#x3D; 10，我们可以大概猜一下是贪心的做法，关于根据数据范围推断算法，可以参考<a href="https://www.acwing.com/blog/content/32/">由数据范围反推算法复杂度以及算法内容</a>。</p><p>​我们可以暴搜所有的方案，即所有飞机的全排列，在暴搜的同时，进行判断 ，当前飞机是否可以放在前一个飞机后面。如果可以，则继续搜索，如果全部的飞机都搜索到了，说明这种顺序是满足条件的，返回True;如果不可以，则停止搜索。</p><p>​判断的条件是：当前飞机的最晚起飞时间需要 &gt;&#x3D; 前一个飞机的降落时间。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">15</span>;<br><br><span class="hljs-type">int</span> n;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Plane</span><br>&#123;<br>    <span class="hljs-type">int</span> t, d, l;<br>&#125;p[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> last)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (u == n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> t = p[i].t, d = p[i].d, l = p[i].l;<br>        <span class="hljs-keyword">if</span> (!st[i] &amp;&amp; t + d &gt;= last)<span class="hljs-comment">//当前飞机没有被放过且当前飞机能放在前一个飞机后面</span><br>        &#123;<br>            st[i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">//最早起飞时间需要在前一个飞机的降落之后也需要在该飞机的最早起飞时间之后，故取两者之最</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(u + <span class="hljs-number">1</span>, <span class="hljs-built_in">max</span>(last, t) + l)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            st[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <br>    <span class="hljs-keyword">while</span> (t --)<br>    &#123;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>        &#123;<br>            <span class="hljs-type">int</span> t, d, l;<br>            cin &gt;&gt; t &gt;&gt; d &gt;&gt; l;<br>            p[i] = &#123;t, d, l&#125;;<br>        &#125;<br>        <br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> dfs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>友好城市</title>
      <link href="/2023/04/16/%E5%88%B7%E9%A2%98/%E5%8F%8B%E5%A5%BD%E5%9F%8E%E5%B8%82/"/>
      <url>/2023/04/16/%E5%88%B7%E9%A2%98/%E5%8F%8B%E5%A5%BD%E5%9F%8E%E5%B8%82/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：友好城市"><a href="#题目：友好城市" class="headerlink" title="题目：友好城市"></a>题目：友好城市<span id="more"></span></h1><p>Palmia国有一条横贯东西的大河，河有笔直的南北两岸，岸上各有位置各不相同的N个城市。</p><p>北岸的每个城市有且仅有一个友好城市在南岸，而且不同城市的友好城市不相同。</p><p>每对友好城市都向政府申请在河上开辟一条直线航道连接两个城市，但是由于河上雾太大，政府决定避免任意两条航道交叉，以避免事故。</p><p>编程帮助政府做出一些批准和拒绝申请的决定，使得在保证任意两条航线不相交的情况下，被批准的申请尽量多。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第1行，一个整数N，表示城市数。</p><p>第2行到第n+1行，每行两个整数，中间用1个空格隔开，分别表示南岸和北岸的一对友好城市的坐标。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>仅一行，输出一个整数，表示政府所能批准的最多申请数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤5000<br>0≤xi≤10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">22 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">15 </span><span class="hljs-number">12</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">17 </span><span class="hljs-number">17</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​（1）每个城市上只能建立一座桥</p><p>​（2）所有的桥与桥之间不能相交<br>​目标：最多可以建立多少桥？</p><p>​贪心 + LIS：</p><p>​（1）用pair将每对友好城市绑定在一起，进行排序<br>​（2）对第二关键字求其LIS最长上升子序列的最大值即可</p><p>为何将其中一岸城市从小到大排序即可？<br>    因为如果将一岸的城市从小到大排好序，如果要满足题目要求不相交，则必须满足对岸也是从小到大排序的，否则就会有相交方案，则将某一岸排好序，再对另一岸求一遍<a href="https://oyto.github.io/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/">最长上升子序列</a>即可。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5010</span>;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N];<br>PII q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) cin &gt;&gt; q[i].first &gt;&gt; q[i].second;<br>    <span class="hljs-built_in">sort</span>(q, q + n); <span class="hljs-comment">//高度从低到高排序</span><br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)    <span class="hljs-comment">//故求的时候也要求的是从低到高的最长上升子序列</span><br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j ++)<br>            <span class="hljs-keyword">if</span> (q[i].second &gt; q[j].second) f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br><br>        res = <span class="hljs-built_in">max</span>(res, f[i]);<br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIS </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合唱队形</title>
      <link href="/2023/04/16/%E5%88%B7%E9%A2%98/%E5%90%88%E5%94%B1%E9%98%9F%E5%BD%A2/"/>
      <url>/2023/04/16/%E5%88%B7%E9%A2%98/%E5%90%88%E5%94%B1%E9%98%9F%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="题目：合唱队形"><a href="#题目：合唱队形" class="headerlink" title="题目：合唱队形"></a>题目：合唱队形<span id="more"></span></h1><p>N 位同学站成一排，音乐老师要请其中的 (N−K)位同学出列，使得剩下的 K 位同学排成合唱队形。     </p><p>合唱队形是指这样的一种队形：设 K 位同学从左到右依次编号为 1，2…，K，他们的身高分别为 T1，T2，…，TK,则他们的身高满足 T1&lt;…<Ti>Ti+1&gt;…&gt;TK(1≤i≤K)。  </p><p>你的任务是，已知所有 N 位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行是一个整数 N，表示同学的总数。</p><p>第二行有 N 个整数，用空格分隔，第 i 个整数 Ti是第 i 位同学的身高(厘米)。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包括一行，这一行只包含一个整数，就是最少需要几位同学出列。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>2≤N≤100<br>130≤Ti≤230</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">186 </span><span class="hljs-number">186</span> <span class="hljs-number">150</span> <span class="hljs-number">200</span> <span class="hljs-number">160</span> <span class="hljs-number">130</span> <span class="hljs-number">197</span> <span class="hljs-number">220</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​要求最少需要几位同学出列，即求合唱队形最多由多少人组成。</p><p>​这题与 <a href="https://oyto.github.io/2023/04/16/%E5%88%B7%E9%A2%98/%E7%99%BB%E5%B1%B1/">登山</a>同出一辙，都是需要求出以某个人的身高为最高点，该点的最长上升子序列最长和下降子序列，求出来之后，枚举所有人的身高，找出最长上升子序列最长与下降子序列之和的最大值，这个最大值就是我们能组成的合唱队形的最大人数，我们再用总的同学数<code>n</code> - <code>最大人数</code>，即可以求出需要最少出列同学数。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N], g[N], a[N];<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++)<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j]) f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i --)<br>    &#123;<br>        g[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt; i; j --)<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j]) g[i] = <span class="hljs-built_in">max</span>(g[i], g[j] + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) res = <span class="hljs-built_in">max</span>(res, f[i] + g[i] - <span class="hljs-number">1</span>);  <span class="hljs-comment">//中间点求了两次需要减去一次</span><br><br>    cout &lt;&lt; n - res &lt;&lt;  endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登山</title>
      <link href="/2023/04/16/%E5%88%B7%E9%A2%98/%E7%99%BB%E5%B1%B1/"/>
      <url>/2023/04/16/%E5%88%B7%E9%A2%98/%E7%99%BB%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="题目：登山"><a href="#题目：登山" class="headerlink" title="题目：登山"></a>题目：登山<span id="more"></span></h1><p>五一到了，ACM队组织大家去登山观光，队员们发现山上一共有N个景点，并且决定按照顺序来浏览这些景点，即每次所浏览景点的编号都要大于前一个浏览景点的编号。</p><p>同时队员们还有另一个登山习惯，就是不连续浏览海拔相同的两个景点，并且一旦开始下山，就不再向上走了。</p><p>队员们希望在满足上面条件的同时，尽可能多的浏览景点，你能帮他们找出最多可能浏览的景点数么？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数N，表示景点数量。</p><p>第二行包含N个整数，表示每个景点的海拔。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最多能浏览的景点数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>2≤N≤1000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">186 </span><span class="hljs-number">186</span> <span class="hljs-number">150</span> <span class="hljs-number">200</span> <span class="hljs-number">160</span> <span class="hljs-number">130</span> <span class="hljs-number">197</span> <span class="hljs-number">220</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​题目中说按照顺序来浏览这些景点，即只能往右走，不能往左走；不连续浏览海拔相同的两个景点，并且一旦开始下山，就不再向上走了，即路线一定是<code>先上后下</code>，这很明显是最长上升子序列模型，我们只需要求出所有景点的最长上升子序列和最长下降子序列，最后枚举所有景点，求出最长上升子序列与最长下降子序列和的最大值即可。</p><p>​这里还需要注意的是，由于求出来的是<code>最长上升子序列与最长下降子序列和的最大值</code>这里的顶点被算了两次，故最后的答案需要减去一次。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N], g[N], a[N];<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++)<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j]) f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i --)<br>    &#123;<br>        g[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt; i; j --)<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j]) g[i] = <span class="hljs-built_in">max</span>(g[i], g[j] + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) res = <span class="hljs-built_in">max</span>(res, f[i] + g[i] - <span class="hljs-number">1</span>);  <span class="hljs-comment">//中间点求了两次需要减去一次</span><br><br>    cout &lt;&lt; res &lt;&lt;  endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怪盗基德的滑翔翼</title>
      <link href="/2023/04/16/%E5%88%B7%E9%A2%98/%E6%80%AA%E7%9B%97%E5%9F%BA%E5%BE%B7%E7%9A%84%E6%BB%91%E7%BF%94%E7%BF%BC/"/>
      <url>/2023/04/16/%E5%88%B7%E9%A2%98/%E6%80%AA%E7%9B%97%E5%9F%BA%E5%BE%B7%E7%9A%84%E6%BB%91%E7%BF%94%E7%BF%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：怪盗基德的滑翔翼"><a href="#题目：怪盗基德的滑翔翼" class="headerlink" title="题目：怪盗基德的滑翔翼"></a>题目：怪盗基德的滑翔翼<span id="more"></span></h1><p>怪盗基德是一个充满传奇色彩的怪盗，专门以珠宝为目标的超级盗窃犯。</p><p>而他最为突出的地方，就是他每次都能逃脱中村警部的重重围堵，而这也很大程度上是多亏了他随身携带的便于操作的滑翔翼。</p><p>有一天，怪盗基德像往常一样偷走了一颗珍贵的钻石，不料却被柯南小朋友识破了伪装，而他的滑翔翼的动力装置也被柯南踢出的足球破坏了。</p><p>不得已，怪盗基德只能操作受损的滑翔翼逃脱。</p><p>假设城市中一共有N幢建筑排成一条线，每幢建筑的高度各不相同。</p><p>初始时，怪盗基德可以在任何一幢建筑的顶端。</p><p>他可以选择一个方向逃跑，但是不能中途改变方向（因为中森警部会在后面追击）。</p><p>因为滑翔翼动力装置受损，他只能往下滑行（即：只能从较高的建筑滑翔到较低的建筑）。</p><p>他希望尽可能多地经过不同建筑的顶部，这样可以减缓下降时的冲击力，减少受伤的可能性。</p><p>请问，他最多可以经过多少幢不同建筑的顶部(包含初始时的建筑)？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入数据第一行是一个整数K，代表有K组测试数据。</p><p>每组测试数据包含两行：第一行是一个整数N，代表有N幢建筑。第二行包含N个不同的整数，每一个对应一幢建筑的高度h，按照建筑的排列顺序给出。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每一组测试数据，输出一行，包含一个整数，代表怪盗基德最多可以经过的建筑数量。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤K≤100<br>1≤N≤100<br>0&lt;h&lt;10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-number">8</span><br><span class="hljs-symbol">300 </span><span class="hljs-number">207</span> <span class="hljs-number">155</span> <span class="hljs-number">299</span> <span class="hljs-number">298</span> <span class="hljs-number">170</span> <span class="hljs-number">158</span> <span class="hljs-number">65</span><br><span class="hljs-number">8</span><br><span class="hljs-symbol">65 </span><span class="hljs-number">158</span> <span class="hljs-number">170</span> <span class="hljs-number">298</span> <span class="hljs-number">299</span> <span class="hljs-number">155</span> <span class="hljs-number">207</span> <span class="hljs-number">300</span><br><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">6<br>6<br>9<br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​分析题目，我们可以发现，怪盗基德每次可以往左边或者往右边从高的建筑滑向低的建筑，这个模型正于最长上升子序列模型相符，不同的是：这里还需要求最长下降子序列。</p><p>​关于最长上升子序列模型的讲解，见<a href="https://oyto.github.io/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/">⭐</a></p><p>​知道了最长上升子序列，只需要从后面往前求一遍最长上升子序列，就可以得到最长下降子序列。</p><p>​最后的答案，即为最长上升子序列和最长下降子序列的最大值。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N], f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br><br>    <span class="hljs-keyword">while</span> (T --)<br>    &#123;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];<br><br>        <span class="hljs-comment">//正向求解LIS问题</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        &#123;<br>            f[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++)<br>                <span class="hljs-keyword">if</span> (a[i] &gt; a[j]) f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br><br>            res = <span class="hljs-built_in">max</span>(res, f[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//反向求解LIS问题</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i --)<br>        &#123;<br>            f[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt; i; j --)<br>                <span class="hljs-keyword">if</span> (a[i] &gt; a[j]) f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br><br>            res = <span class="hljs-built_in">max</span>(res, f[i]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方格取数</title>
      <link href="/2023/04/14/%E5%88%B7%E9%A2%98/%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0/"/>
      <url>/2023/04/14/%E5%88%B7%E9%A2%98/%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：方格取数"><a href="#题目：方格取数" class="headerlink" title="题目：方格取数"></a>题目：方格取数<span id="more"></span></h1><p>设有 N×N 的方格图，我们在其中的某些方格中填入正整数，而其它的方格中则放入数字0。如下图所示：</p><p><img src="https://cdn.acwing.com/media/article/image/2019/09/12/19_764ece6ed5-2.gif"></p><p>某人从图中的左上角 A 出发，可以向下行走，也可以向右行走，直到到达右下角的 B 点。</p><p>在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字0）。</p><p>此人从 A 点到 B 点共走了两次，试找出两条这样的路径，使得取得的数字和为最大。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行为一个整数N，表示 N×N 的方格图。</p><p>接下来的每行有三个整数，第一个为行号数，第二个为列号数，第三个为在该行、该列上所放的数。</p><p>行和列编号从 11 开始。</p><p>一行“0 0 0”表示结束。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示两条路径上取得的最大的和。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>N≤10</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">8</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">13</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">2</span> <span class="hljs-number">21</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">3</span> <span class="hljs-number">15</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">2</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">67<br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​从左上角走到右下角，于是想到DP中的数字三角形模型。关于数字三角形模型，可以去看这篇文章[线性DP](<a href="https://oyto.github.io/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/">线性DP - 小樱桃 (oyto.github.io)</a>&#x2F;)。</p><p>​这题的不同点是，这里要取两次数，于是进行DP过程：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs llvm">f[<span class="hljs-type">i1</span><span class="hljs-punctuation">,</span>j<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-type">i2</span><span class="hljs-punctuation">,</span>j<span class="hljs-number">2</span>]表示所有从(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)分别走到(<span class="hljs-type">i1</span><span class="hljs-punctuation">,</span>j<span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span>(<span class="hljs-type">i2</span><span class="hljs-punctuation">,</span>j<span class="hljs-number">2</span>)路径的最大值。<br><br>如何处理“同一个格子不能被重复选择”？<br>    分析后发现，只有当<span class="hljs-type">i1</span> + j<span class="hljs-number">1</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-type">i2</span> + j<span class="hljs-number">2</span>时，两条路径的格子才可能重合，<br>    于是可以根据这条性质将思维优化成三维，<br><br>集合：f[k<span class="hljs-punctuation">,</span><span class="hljs-type">i1</span><span class="hljs-punctuation">,</span><span class="hljs-type">i2</span>]表示所有从(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<span class="hljs-punctuation">,</span>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)走到(<span class="hljs-type">i1</span><span class="hljs-punctuation">,</span>k-<span class="hljs-type">i1</span>)<span class="hljs-punctuation">,</span>(<span class="hljs-type">i2</span><span class="hljs-punctuation">,</span>k-<span class="hljs-type">i2</span>)的路径的最大值<br>    k表示两条路线当前走到的格子的横纵坐标之和<br><br>属性：<span class="hljs-keyword">max</span><br><br>状态计算：<br>    以最后一步是从往下走还是往右走进行划分，因为有两次走法，所以被分成了四种情况<br>        下下、下右、右下、右右<br></code></pre></td></tr></table></figure><p>​<strong>为什么下面四个状态转移方程能代表四种状态？</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm">原因是，因为k 变小了<span class="hljs-number">1</span>，先不看最后一步，如果i变小<span class="hljs-number">1</span>，则j就不用变；如果i没有变，则j就需要变小<span class="hljs-number">1</span>；<br>上述两种情况刚好对应了最后一步是向下、右走，的横纵坐标变化情况，又因为是两次一起走，故有四种情况。<br><br><span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">max</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> f[k - <span class="hljs-number">1</span>][<span class="hljs-type">i1</span> - <span class="hljs-number">1</span>][<span class="hljs-type">i2</span> - <span class="hljs-number">1</span>] + t)<span class="hljs-comment">;   //下 下</span><br><span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">max</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> f[k - <span class="hljs-number">1</span>][<span class="hljs-type">i1</span> - <span class="hljs-number">1</span>][<span class="hljs-type">i2</span>] + t)<span class="hljs-comment">;       //下 右</span><br><span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">max</span>(<span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> f[k - <span class="hljs-number">1</span>][<span class="hljs-type">i1</span>][<span class="hljs-type">i2</span> - <span class="hljs-number">1</span>] + t)<span class="hljs-comment">;       //右 下</span><br></code></pre></td></tr></table></figure><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">15</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N * <span class="hljs-number">2</span>][N][N], g[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b &gt;&gt; c, a || b || c) g[a][b] = c;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= n + n; k ++)   <span class="hljs-comment">//枚举横纵坐标之和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i1 = <span class="hljs-number">1</span>; i1 &lt;= n; i1 ++)    <span class="hljs-comment">//枚举第一次走的横坐标</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i2 = <span class="hljs-number">1</span>; i2 &lt;= n; i2 ++)    <span class="hljs-comment">//枚举第二次走的横坐标</span><br>            &#123;<br>                <span class="hljs-type">int</span> j1 = k - i1, j2 = k - i2;   <span class="hljs-comment">//计算出两次走的纵坐标</span><br>                <span class="hljs-keyword">if</span> (j1 &gt;= <span class="hljs-number">1</span> &amp;&amp; j1 &lt;= n &amp;&amp; j2 &gt;= <span class="hljs-number">1</span> &amp;&amp; j2 &lt;= n)<br>                &#123;<br>                    <span class="hljs-type">int</span> t = g[i1][j1];  <span class="hljs-comment">//如果两个坐标相等，只加一次，因为第二次走这里，已经被拿走清空了</span><br>                    <span class="hljs-keyword">if</span> (i1 != i2) t += g[i2][j2];   <span class="hljs-comment">//坐标不相同，就两个位置全加上</span><br>                    <span class="hljs-type">int</span> &amp;x = f[k][i1][i2];<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2 - <span class="hljs-number">1</span>] + t);   <span class="hljs-comment">//下 下</span><br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2] + t);       <span class="hljs-comment">//下 右</span><br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2 - <span class="hljs-number">1</span>] + t);       <span class="hljs-comment">//右 下</span><br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2] + t);            <span class="hljs-comment">//右 右</span><br>                &#125;<br>            &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n + n][n][n]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字三角形模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最低通行费</title>
      <link href="/2023/04/14/%E5%88%B7%E9%A2%98/%E6%9C%80%E4%BD%8E%E9%80%9A%E8%A1%8C%E8%B4%B9/"/>
      <url>/2023/04/14/%E5%88%B7%E9%A2%98/%E6%9C%80%E4%BD%8E%E9%80%9A%E8%A1%8C%E8%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：最低通行费"><a href="#题目：最低通行费" class="headerlink" title="题目：最低通行费"></a>题目：最低通行费<span id="more"></span></h1><p>一个商人穿过一个 N×N 的正方形的网格，去参加一个非常重要的商务活动。</p><p>他要从网格的左上角进，右下角出。</p><p>每穿越中间 1 个小方格，都要花费 1 个单位时间。</p><p>商人必须在 (2N−1) 个单位时间穿越出去。</p><p>而在经过中间的每个小方格时，都需要缴纳一定的费用。</p><p>这个商人期望在规定时间内用最少费用穿越出去。</p><p>请问至少需要多少费用？</p><p>注意：不能对角穿越各个小方格（即，只能向上下左右四个方向移动且不能离开网格）。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行是一个整数，表示正方形的宽度 N。</p><p>后面 N 行，每行 N 个不大于 100 的正整数，为网格上每个小方格的费用。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示至少需要的费用。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤100</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span> <span class="hljs-number">4</span>  <span class="hljs-number">6</span>  <span class="hljs-number">8</span>  <span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span> <span class="hljs-number">5</span>  <span class="hljs-number">7</span>  <span class="hljs-number">15</span> <span class="hljs-number">17</span><br><span class="hljs-symbol">6 </span> <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">18</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">19</span> <span class="hljs-number">21</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">23</span> <span class="hljs-number">25</span> <span class="hljs-number">29</span> <span class="hljs-number">33</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">109<br></code></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>样例中，最小值为 109&#x3D;1+2+5+7+9+12+19+21+33。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​从左上角走到右下角的问题，自然想到DP中的[数字三角形模型](<a href="https://oyto.github.io/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/">线性DP - 小樱桃 (oyto.github.io)</a>)。</p><p>​唯一不同的是，本题是求路径和的最小值，故这里需要先进行初始化。</p><p>​<strong>为什么要进行初始化呢？</strong></p><p>​因为我们做数字三角形模型是求路径和的最大值，于是我们默认dp数组f[i][j]为0即可，但这里求的是最小值，若我们不进行初始化，最次取的都是0，就会忽略路径上的值，导致答案错误。</p><p>​<strong>初始化</strong></p><p>​我们可以按照下面的方式进行初始化：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j ++)<br>            f[i][j] = INF;<br></code></pre></td></tr></table></figure><p>​<strong>为什么要从0开始呢？</strong></p><ul><li>​因为第一行的元素进行状态转移的时候，会用到第0行，故如果不初始化第0行的话，会导致第一行求值出错，进而导致答案错误。</li></ul><p>​还有一个细节就是，我们需要初始化<code>f[1][1] = g[1][1]</code>，否则起点就会出错。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">int</span> f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            cin &gt;&gt; g[i][j];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j ++)<br>            f[i][j] = INF;<br>            <br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = g[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span> f[i][j] = <span class="hljs-built_in">min</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]) + g[i][j];<br>    <br>    cout &lt;&lt; f[n][n];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字三角形模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘花生</title>
      <link href="/2023/04/14/%E5%88%B7%E9%A2%98/%E6%91%98%E8%8A%B1%E7%94%9F/"/>
      <url>/2023/04/14/%E5%88%B7%E9%A2%98/%E6%91%98%E8%8A%B1%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：摘花生"><a href="#题目：摘花生" class="headerlink" title="题目：摘花生"></a>题目：摘花生<span id="more"></span></h1><p>Hello Kitty想摘点花生送给她喜欢的米老鼠。</p><p>她来到一片有网格状道路的矩形花生地(如下图)，从西北角进去，东南角出来。</p><p>地里每个道路的交叉点上都有种着一株花生苗，上面有若干颗花生，经过一株花生苗就能摘走该它上面所有的花生。</p><p>Hello Kitty只能向东或向南走，不能向西或向北走。</p><p>问Hello Kitty最多能够摘到多少颗花生。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行是一个整数T，代表一共有多少组数据。</p><p>接下来是T组数据。</p><p>每组数据的第一行是两个整数，分别代表花生苗的行数R和列数 C。</p><p>每组数据的接下来R行数据，从北向南依次描述每行花生苗的情况。每行数据有C个整数，按从西向东的顺序描述了该行每株花生苗上的花生数目M。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>对每组输入数据，输出一行，内容为Hello Kitty能摘到得最多的花生颗数。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>1≤T≤100,1≤R,C≤100,0≤M≤1000</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">8<br>16<br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​从左上角走到右下角，且每次只能向东或向南走，即往右或者往下走，裸的数字三角形模型，关于数字三角形模型，可以去看这篇文章[线性DP](<a href="https://oyto.github.io/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/">线性DP - 小樱桃 (oyto.github.io)</a>&#x2F;)。</p><p>​只需要注意，这题是多组输入数据，注意清理上次用过的g, f数组即可。（这题可以不用清零，因为每次需要用到的地方，都会被重新计算进行覆盖）</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> g[N][N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <br>    <span class="hljs-keyword">while</span> (t --)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> g);<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> f);<br>        <br>        cin &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>                cin &gt;&gt; g[i][j];<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j - <span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][j]) + g[i][j];<br>        <br>        cout &lt;&lt; f[n][m] &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字三角形模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冶炼金属</title>
      <link href="/2023/04/14/%E5%88%B7%E9%A2%98/%E5%86%B6%E7%82%BC%E9%87%91%E5%B1%9E/"/>
      <url>/2023/04/14/%E5%88%B7%E9%A2%98/%E5%86%B6%E7%82%BC%E9%87%91%E5%B1%9E/</url>
      
        <content type="html"><![CDATA[<h4 id="题目：冶炼金属"><a href="#题目：冶炼金属" class="headerlink" title="题目：冶炼金属"></a>题目：冶炼金属<span id="more"></span></h4><p>小蓝有一个神奇的炉子用于将普通金属 O 冶炼成为一种特殊金属 X。</p><p>这个炉子有一个称作转换率的属性 V，V 是一个正整数，这意味着消耗 V 个普通金属 O 恰好可以冶炼出一个特殊金属 X，当普通金属 O 的数目不足 V 时，无法继续冶炼。</p><p>现在给出了 N 条冶炼记录，每条记录中包含两个整数 A 和 B，这表示本次投入了 A 个普通金属 O，最终冶炼出了 B 个特殊金属 X。</p><p>每条记录都是独立的，这意味着上一次没消耗完的普通金属 O 不会累加到下一次的冶炼当中。</p><p>根据这 N 条冶炼记录，请你推测出转换率 V 的最小值和最大值分别可能是多少，题目保证评测数据不存在无解的情况。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个整数 N，表示冶炼记录的数目。</p><p>接下来输入 N 行，每行两个整数 A、B，含义如题目所述。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出两个整数，分别表示 V 可能的最小值和最大值，中间用空格分开。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 30% 的评测用例，1≤N≤102。对于 60% 的评测用例，1≤N≤103。<br>对于 100% 的评测用例，1≤N≤104，1≤B≤A≤109。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">75 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">53 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">59 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">20 </span><span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>当 V&#x3D;20 时，有：⌊7520⌋&#x3D;3，⌊5320⌋&#x3D;2，⌊5920⌋&#x3D;2，可以看到符合所有冶炼记录。</p><p>当 V&#x3D;25 时，有：⌊7525⌋&#x3D;3，⌊5325⌋&#x3D;2，⌊5925⌋&#x3D;2，可以看到符合所有冶炼记录。</p><p>且再也找不到比 20 更小或者比 25 更大的符合条件的 V 值了。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​读过题目后，可以发现题目需要分别找到一个最大值和最小值满足所给条件，而且对于找到的值，我们可以通过判断，能判断出它是大于我们的答案还是小于我们的答案，存在二段性，故可以采用二分做。</p><p>​check函数的书写，对于每个需要检查的值，我们通过其与所有组的数据进行判断：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> t = a[i] / x;<br><br><span class="hljs-keyword">if</span> (t &lt; b[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-comment">//说明我们找到的这个数太大了，以至于不能转化出的金属不足要求</span><br><span class="hljs-keyword">if</span> (t &gt; b[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> <span class="hljs-comment">//说明我们找到的这个数太大了，以至于转化出的金属超量</span><br><br><span class="hljs-comment">//如果所有的数据都没有出现上述情况，则说明当前这个数，是我们要找的答案</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>​</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> t = a[i] / x;<br>        <span class="hljs-keyword">if</span> (t &gt; b[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (t &lt; b[i]) <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i] &gt;&gt; b[i];<br>    <br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> t = <span class="hljs-built_in">check</span>(mid);<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span> || t == <span class="hljs-number">3</span>) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e9</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> t = <span class="hljs-built_in">check</span>(mid);<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span> || t == <span class="hljs-number">2</span>) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Go版本</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> N <span class="hljs-type">int</span> = <span class="hljs-number">10010</span><br><br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> a, b [N]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> in = bufio.NewReader(os.Stdin)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Fscan(in, &amp;n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>fmt.Fscan(in, &amp;a[i], &amp;b[i])<br>&#125;<br>l, r := <span class="hljs-number">1</span>, <span class="hljs-type">int</span>(<span class="hljs-number">1e9</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> l &gt;= r &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>mid := (l + r) / <span class="hljs-number">2</span><br>t := check(mid)<br><span class="hljs-keyword">if</span> t == <span class="hljs-number">1</span> || t == <span class="hljs-number">3</span> &#123;<br>r = mid<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>l = mid + <span class="hljs-number">1</span><br>&#125;<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%d &quot;</span>, l)<br>l, r = <span class="hljs-number">1</span>, <span class="hljs-type">int</span>(<span class="hljs-number">1e9</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> l &gt;= r &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>mid := (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span><br>t := check(mid)<br><span class="hljs-keyword">if</span> t == <span class="hljs-number">1</span> || t == <span class="hljs-number">2</span> &#123;<br>l = mid<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>r = mid - <span class="hljs-number">1</span><br>&#125;<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>, l)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">check</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>t := a[i] / x<br><span class="hljs-keyword">if</span> t &gt; b[i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">if</span> t &lt; b[i] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 二分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接龙数列</title>
      <link href="/2023/04/14/%E5%88%B7%E9%A2%98/%E6%8E%A5%E9%BE%99%E6%95%B0%E5%88%97/"/>
      <url>/2023/04/14/%E5%88%B7%E9%A2%98/%E6%8E%A5%E9%BE%99%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目：接龙"><a href="#题目：接龙" class="headerlink" title="题目：接龙"></a>题目：接龙<span id="more"></span></h1><p>对于一个长度为 K 的整数数列：A1,A2,…,AK，我们称之为接龙数列当且仅当 Ai 的首位数字恰好等于 Ai−1的末位数字 (2≤i≤K)。</p><p>例如 12,23,35,56,61,1112,23,35,56,61,11 是接龙数列；12,23,34,5612,23,34,56 不是接龙数列，因为 5656 的首位数字不等于 3434 的末位数字。</p><p>所有长度为 11 的整数数列都是接龙数列。</p><p>现在给定一个长度为 N的数列 A1,A2,…,AN，请你计算最少从中删除多少个数，可以使剩下的序列是接龙序列？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含一个整数 N。</p><p>第二行包含 N个整数 A1,A2,…,AN。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数代表答案。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于 20%20% 的数据，1≤N≤20<br>对于 50%50% 的数据，1≤N≤10000<br>对于 100%100% 的数据，1≤N≤10^5，1≤Ai≤10^9。所有 Ai 保证不包含前导 00。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">11 </span><span class="hljs-number">121</span> <span class="hljs-number">22</span> <span class="hljs-number">12</span> <span class="hljs-number">2023</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>删除 2222，剩余 11,121,12,202311,121,12,2023 是接龙数列。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​题目要求最少删除多少个数，即求最长的接龙数列长度。</p><p>​只要前一个数的结尾能和后一个数的开头一样，则可以进行接龙，这一点跟最长上升子序列模型相似：都是前一个数与后一个数存在某一种关系就可以接在一起。</p><p>​DP分析如下：</p><p><img src="/images/%E6%8E%A5%E9%BE%99%E6%95%B0%E5%88%97DP%E8%BF%87%E7%A8%8B.png" alt="接龙数列"></p><p>​分析到这里，代码就可以写了，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N];<br><span class="hljs-type">int</span> l[N], r[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-type">char</span> num[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        cin &gt;&gt; num;<br>        l[i] = num[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span>, r[i] = num[<span class="hljs-built_in">strlen</span>(num) - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j ++)<br>            <span class="hljs-keyword">if</span> (l[i] == r[j]) f[i] = <span class="hljs-built_in">max</span>(f[j] + <span class="hljs-number">1</span>, f[i]);<br>        res = <span class="hljs-built_in">max</span>(res, f[i]);<br>    &#125;<br>    <br>    cout &lt;&lt; n - res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​如果觉得这题就这么结束了，那就大错特错了。</p><p>​我们可以观察数据范围：<code>n &lt;= 100010</code>，而我们的算法的时间复杂度是O(n^2)的，故需要进行优化。</p><p>​我们发现只有当<code>l[i]</code> &#x3D;<code> r[j]</code>时，我们才需要更新状态，故我们可以用一个辅助数组，存下以<code>k</code>结尾的接龙数列有多少个，在更新时直接用<code>f[i] = max(f[i], g[l[i]])</code>进行更新状态即可，紧接着记得要更新<code>g[r[i]] = max(f[i], g[r[i]])</code>。</p><h4 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> f[N], g[N];<br><span class="hljs-type">int</span> l[N], r[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-type">char</span> num[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        cin &gt;&gt; num;<br>        l[i] = num[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span>, r[i] = num[<span class="hljs-built_in">strlen</span>(num) - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        f[i] = <span class="hljs-built_in">max</span>(f[i], g[l[i]] + <span class="hljs-number">1</span>);<span class="hljs-comment">//更新状态</span><br>        g[r[i]] = <span class="hljs-built_in">max</span>(f[i], g[r[i]]);<span class="hljs-comment">//更新g数组</span><br>        res = <span class="hljs-built_in">max</span>(res, f[i]);<br>    &#125;<br>    <br>    cout &lt;&lt; n - res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最长上升子序列模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历</title>
      <link href="/2023/04/13/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2023/04/13/%E5%88%B7%E9%A2%98/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：<span id="more"></span></h4><p>​编写一个程序，读入用户输入的一串先序遍历字符串，根据此字符串建立一个二叉树（以指针方式存储）。</p><p>例如如下的先序遍历字符串： <code>abc##de#g##f###</code> 其中 <code>#</code> 表示的是空格，空格字符代表空树。</p><p>建立起此二叉树以后，再对二叉树进行中序遍历，输出遍历结果。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>共一行，包含一个字符串，表示先序遍历字符串。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出将输入字符串建立二叉树后中序遍历的序列，字符之间用空格隔开。</p><p>注意，输出中不用包含 <code>#</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>输入字符串长度不超过 100100，且只包含小写字母和 <code>#</code>。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">abc##de#g##f###<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c <span class="hljs-selector-tag">b</span> e g d f <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>​给定先序遍历，求中序遍历。</p><p>​首先我们要知道什么是先序遍历和后序遍历。</p><blockquote><ul><li>先序遍历（Preorder Traversal）：先访问根节点，再递归地遍历左子树和右子树。先序遍历的顺序是根节点 -&gt; 左子树 -&gt; 右子树。</li><li>中序遍历（Inorder Traversal）：先递归地遍历左子树，再访问根节点，最后递归地遍历右子树。中序遍历的顺序是左子树 -&gt; 根节点 -&gt; 右子树。</li><li>后序遍历（Postorder Traversal）：先递归地遍历左子树和右子树，再访问根节点。后序遍历的顺序是左子树 -&gt; 右子树 -&gt; 根节点。</li></ul></blockquote><p>​于是我们以样例为例，画出先序遍历，如下图</p><p>​<img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.png" alt="二叉树的遍历"></p><p>​然后我们就可以发现，只要我们在每次搜到空树的时候，即回溯到该节点的父节点后，将当前节点（上一个节点的父节点）时，将其输出就能得到中序遍历。因为每次回溯到的点，都是一个父亲节点，且回溯到了这个点，说明其子节点也已经回溯过了，即输出过了。</p><h4 id="AC代码如下："><a href="#AC代码如下：" class="headerlink" title="AC代码如下："></a>AC代码如下：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> k;<br>string str;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (str[k] == <span class="hljs-string">&#x27;#&#x27;</span>)  <span class="hljs-comment">//遍历到了空树，回溯的同时，遍历下一个节点</span><br>    &#123;<br>        k ++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> t = str[k ++];     <span class="hljs-comment">//记录当前节点</span><br>    <span class="hljs-built_in">dfs</span>();  <span class="hljs-comment">//遍历左子树，直至走到空树，</span><br>    cout &lt;&lt; t &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">dfs</span>();  <span class="hljs-comment">//遍历右节点，直至走到空树</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; str;<br>    <br>    <span class="hljs-built_in">dfs</span>();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Go语言版</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;bufio&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> in = bufio.NewReader(os.Stdin)<br><span class="hljs-keyword">var</span> k <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span> str[k] == <span class="hljs-string">&#x27;#&#x27;</span> &#123;<br>        k ++<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    t := str[k]<br>    k ++<br>    dfs()<br>    fmt.Printf(<span class="hljs-string">&quot;%c &quot;</span>, t)<br>    dfs()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    fmt.Fscan(in, &amp;str)<br>    <br>    dfs()<br>    <br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> dfs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> 树的遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/04/11/test./index/"/>
      <url>/2023/04/11/test./index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Gin框架示例</title>
      <link href="/2023/04/11/%E6%A1%86%E6%9E%B6/Gin%E6%A1%86%E6%9E%B6%E7%A4%BA%E4%BE%8B/"/>
      <url>/2023/04/11/%E6%A1%86%E6%9E%B6/Gin%E6%A1%86%E6%9E%B6%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Gin框架示例"><a href="#Gin框架示例" class="headerlink" title="Gin框架示例"></a>Gin框架示例<span id="more"></span></h1><h2 id="1、AsciiJSON"><a href="#1、AsciiJSON" class="headerlink" title="1、AsciiJSON"></a>1、AsciiJSON</h2><blockquote><p>​使用 AsciiJSON 生成具有转义的非 ASCII 字符的 ASCII-only JSON。</p></blockquote><h4 id="（1）完整代码"><a href="#（1）完整代码" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default() <span class="hljs-comment">// 创建一个 Gin 路由引擎</span><br><br>r.GET(<span class="hljs-string">&quot;/someJSON&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123; <span class="hljs-comment">// 注册一个 GET 路由，并定义处理函数</span><br>data := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123; <span class="hljs-comment">// 定义一个 map 类型的数据，用于构造 JSON 响应</span><br><span class="hljs-string">&quot;lang&quot;</span>: <span class="hljs-string">&quot;GO语言&quot;</span>,   <span class="hljs-comment">// 设置 &quot;lang&quot; 键的值为 &quot;GO语言&quot;</span><br><span class="hljs-string">&quot;tag&quot;</span>:  <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>, <span class="hljs-comment">// 设置 &quot;tag&quot; 键的值为 &quot;&lt;br&gt;&quot;</span><br>&#125;<br><br>c.AsciiJSON(http.StatusOK, data) <span class="hljs-comment">// 使用 c.AsciiJSON() 方法将 map 数据转换为 ASCII JSON 格式，并作为响应发送给客户端</span><br>&#125;)<br><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 Gin web 服务器，监听在 8080 端口</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点"><a href="#（2）知识点" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li><code>gin.Default()</code>: 这是 Gin 框架的一个方法，用于创建一个带有默认中间件的路由引擎，包括了 <code>logger</code> 和 <code>recovery</code> 中间件，用于记录请求日志和在出现 panic 时进行恢复，防止程序崩溃。</li><li><code>r.GET(&quot;/someJSON&quot;, ...)</code>：路由注册方法，指定一个路径为”&#x2F;someJSON”的GET请求，当客户端请求”some&#x2F;JSON”路径时，会调用后面的处理函数来处理该请求。</li><li><code>fun(c *gin.Context) &#123;...&#125;</code>：这是一个匿名函数，作为路由处理函数，接收一个<code>gin.Context</code>参数。</li><li><code>gin.Context</code>：是Gin框架的一个上下文对象，用于在处理<code>HTTP</code>请求和生成<code>HTTP</code>响应时传递和管理数据。每当 Gin 框架处理一个<code> HTTP</code> 请求时，都会创建一个新的 <code>gin.Context</code> 对象，并将其传递给注册的路由处理函数。它包含了很多有用的方法和属性，用于访问HTTP请求的各种信息，如请求路径、HTTP方法、球请求参数、请求头、请求体等。</li><li><code>data := map[string]interface&#123;&#125;&#123;...&#125;</code>：创建了一个<code>map[string]interface&#123;&#125;</code>类型的变量<code>data</code>，用于构造要返回的<code>JSON</code>数据。这里使用了一个简单的map，包含了连个键值对，分别是”lang”和”tag”。</li><li><code>c.AsciiJSON(http.StatusOK, data)</code>：这是<code>gin.Context</code>的方法，用于将data变量的内容作为<code>ASCII JSON</code>格式的响应返回给客户端。<code>http.StatusOK</code>是HTTP状态码，表示请求成功，这里将其作为响应的状态码。data 变量作为响应的主体内容，通过 <code>ASCII JSON</code> 格式进行序列化，并设置了响应的 <code>Content-Type </code>为 “application&#x2F;json; charset&#x3D;utf-8”。最终，这个处理函数会将生成的响应发送给客户端。</li></ul><h4 id="（3）示例大意"><a href="#（3）示例大意" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>导入了 <code>gin</code> 和 <code>net/http</code> 包，引入了 Gin 框架和标准库中处理 HTTP 请求和响应的功能。</li><li>创建了一个默认的 Gin 路由引擎 <code>r</code>，作为 HTTP 请求的入口。</li><li>注册了一个 GET 路由，路径为 “&#x2F;someJSON”，并定义了一个处理函数，处理函数使用 <code>c.AsciiJSON()</code> 方法将一个定义好的 map 数据转换为 ASCII JSON 格式，并作为响应发送给客户端。</li><li>使用 <code>r.Run()</code> 方法启动了一个 Gin web 服务器，并监听在 8080 端口，等待客户端的 HTTP 请求。</li><li>当客户端通过浏览器或其他 HTTP 客户端访问 “&#x2F;someJSON” 路径时，服务器会返回一个 JSON 格式的响应，包含了定义好的 <code>data</code> 数据，其中 “lang” 键的值为 “GO语言”，”tag” 键的值为 “<br>“。这个响应的内容类型为 ASCII JSON。</li></ol></blockquote><h2 id="2、绑定表单数据至自定义结构体"><a href="#2、绑定表单数据至自定义结构体" class="headerlink" title="2、绑定表单数据至自定义结构体"></a>2、绑定表单数据至自定义结构体</h2><blockquote><p>​下述代码实现了一个简单的Web应用程序，通过Gin框架处理HTTP请求，将从请求中获取的数据绑定到结构体变量，并生成JSON格式的HTTP响应体。</p></blockquote><h4 id="（1）完整代码-1"><a href="#（1）完整代码-1" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-keyword">type</span> StructA <span class="hljs-keyword">struct</span> &#123;<br>FieldA <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;field_a&quot;`</span> <span class="hljs-comment">// FieldA 是 StructA 的字段，使用 form 标签 &quot;field_a&quot;</span><br>&#125;<br><br><span class="hljs-keyword">type</span> StructB <span class="hljs-keyword">struct</span> &#123;<br>NestedStruct StructA <span class="hljs-comment">// NestedStruct 是 StructB 的字段，类型为 StructA</span><br>FieldB       <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;field_b&quot;`</span> <span class="hljs-comment">// FieldB 是 StructB 的字段，使用 form 标签 &quot;field_b&quot;</span><br>&#125;<br><br><span class="hljs-keyword">type</span> StructC <span class="hljs-keyword">struct</span> &#123;<br>NestedStructPointer *StructA <span class="hljs-comment">// NestedStructPointer 是 StructC 的指针字段，指向 StructA</span><br>FieldC              <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;field_c&quot;`</span> <span class="hljs-comment">// FieldC 是 StructC 的字段，使用 form 标签 &quot;field_c&quot;</span><br>&#125;<br><br><span class="hljs-keyword">type</span> StructD <span class="hljs-keyword">struct</span> &#123;<br>NestedAnonyStruct <span class="hljs-keyword">struct</span> &#123; <span class="hljs-comment">// NestedAnonyStruct 是 StructD 的匿名结构体字段</span><br>FieldX <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;field_x&quot;`</span> <span class="hljs-comment">// FieldX 是匿名结构体的字段，使用 form 标签 &quot;field_x&quot;</span><br>&#125;<br>FieldD <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;field_d&quot;`</span> <span class="hljs-comment">// FieldD 是 StructD 的字段，使用 form 标签 &quot;field_d&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDataB</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> b StructB<br>c.Bind(&amp;b) <span class="hljs-comment">// 将请求数据绑定到 StructB</span><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;a&quot;</span>: b.NestedStruct, <span class="hljs-comment">// 返回 NestedStruct 的值作为响应，键名为 &quot;a&quot;</span><br><span class="hljs-string">&quot;b&quot;</span>: b.FieldB,       <span class="hljs-comment">// 返回 FieldB 的值作为响应，键名为 &quot;b&quot;</span><br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDataC</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> b StructC<br>c.Bind(&amp;b) <span class="hljs-comment">// 将请求数据绑定到 StructC</span><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;a&quot;</span>: b.NestedStructPointer, <span class="hljs-comment">// 返回 NestedStructPointer 的值作为响应，键名为 &quot;a&quot;</span><br><span class="hljs-string">&quot;c&quot;</span>: b.FieldC,              <span class="hljs-comment">// 返回 FieldC 的值作为响应，键名为 &quot;c&quot;</span><br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDataD</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> b StructD<br>c.Bind(&amp;b) <span class="hljs-comment">// 将请求数据绑定到 StructD</span><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;x&quot;</span>: b.NestedAnonyStruct, <span class="hljs-comment">// 返回 NestedAnonyStruct 的值作为响应，键名为 &quot;x&quot;</span><br><span class="hljs-string">&quot;d&quot;</span>: b.FieldD,            <span class="hljs-comment">// 返回 FieldD 的值作为响应，键名为 &quot;d&quot;</span><br>&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/getb&quot;</span>, GetDataB) <span class="hljs-comment">// 注册 GetDataB 作为 GET /getb 路由的处理函数</span><br>r.GET(<span class="hljs-string">&quot;/getc&quot;</span>, GetDataC) <span class="hljs-comment">// 注册 GetDataC 作为 GET /getc 路由的处理函数</span><br>r.GET(<span class="hljs-string">&quot;/getd&quot;</span>, GetDataD) <span class="hljs-comment">// 注册 GetDataD 作为 GET /getd 路由的处理函数</span><br><br>r.Run() <span class="hljs-comment">// 启动 Gin web 服务器</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-1"><a href="#（2）知识点-1" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li><code>c.Bind(&amp;b)</code>：使用了Gin框架的<code>Bind</code>方法，将从HTTP请求中获取的数据绑定到<code>b</code>变量。<code>&amp;b</code>表示传递<code>b</code>的指针，以便将数据绑定到<code>b</code>变量的字段。</li><li><code>c.JSON(200, gin.H&#123;&quot;a&quot;: b.NestedStruct, &quot;b&quot;: b.FieldB&#125;)</code>：使用Gin框架的<code>JSON</code>方法，生成HTTP响应的JSON格式。<code>200</code>表示HTTP响应的状态码为200，<code>gin.H</code>是Gin框架提供的一种快捷方式，表示一个<code>map[string]interface&#123;&#125;</code>类型的数据结构，用于构造<code>JSON</code>响应体。在这里，构造了一个包含两个键值对的<code>JSON</code>响应体，其中键为<code>a</code>和<code>b</code>，值分别为<code>b.NestedStruct</code>和<code>b.FieldB</code>，这些值来自之前绑定的<code>b</code>变量的字段。</li><li>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，通常用于在不同应用程序之间传输和存储数据。JSON采用键值对的形式表示数据，使用文本格式进行序列化，具有简洁、易读、易解析的特点。</li></ul><h4 id="（3）示例大意-1"><a href="#（3）示例大意-1" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>定义了四个结构体类型：<code>StructA</code>、<code>StructB</code>、<code>StructC</code>、<code>StructD</code>，分别包含了不同的字段和标签。</li><li>在<code>GetDataB</code>处理函数中，从HTTP请求中绑定数据到<code>StructB</code>类型的变量<code>b</code>，然后生成JSON响应体，包含了<code>b.NestedStruct</code>和<code>b.FieldB</code>字段的值。</li><li>在<code>GetDataC</code>处理函数中，从HTTP请求中绑定数据到<code>StructC</code>类型的变量<code>b</code>，然后生成JSON响应体，包含了<code>b.NestedStructPointer</code>和<code>b.FieldC</code>字段的值。</li><li>在<code>GetDataD</code>处理函数中，从HTTP请求中绑定数据到<code>StructD</code>类型的变量<code>b</code>，然后生成JSON响应体，包含了<code>b.NestedAnonyStruct</code>和<code>b.FieldD</code>字段的值。</li><li>在<code>main</code>函数中，创建了一个Gin的默认路由器，并注册了三个路由（<code>/getb</code>、<code>/getc</code>、<code>/getd</code>），并将对应的处理函数（<code>GetDataB</code>、<code>GetDataC</code>、<code>GetDataD</code>）作为处理函数。最后调用<code>r.Run()</code>启动Gin的web服务器，监听并处理HTTP请求。</li></ol></blockquote><h4 id="（4）使用-curl-命令结果："><a href="#（4）使用-curl-命令结果：" class="headerlink" title="（4）使用 curl 命令结果："></a>（4）使用 <code>curl</code> 命令结果：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">命令行输入：curl <span class="hljs-string">&quot;http://localhost:8080/getb?field_a=hello&amp;field_b=world&quot;</span><br>终端显示：&#123;<span class="hljs-string">&quot;a&quot;</span>:&#123;<span class="hljs-string">&quot;FieldA&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>&#125;,<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;world&quot;</span>&#125;<br>命令行输入：curl <span class="hljs-string">&quot;http://localhost:8080/getc?field_a=hello&amp;field_c=world&quot;</span><br>终端显示：&#123;<span class="hljs-string">&quot;a&quot;</span>:&#123;<span class="hljs-string">&quot;FieldA&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>&#125;,<span class="hljs-string">&quot;c&quot;</span>:<span class="hljs-string">&quot;world&quot;</span>&#125;<br>命令行输入：curl <span class="hljs-string">&quot;http://localhost:8080/getd?field_x=hello&amp;field_d=world&quot;</span><br>终端显示：&#123;<span class="hljs-string">&quot;d&quot;</span>:<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>:&#123;<span class="hljs-string">&quot;FieldX&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="3、绑定-HTML-复选框"><a href="#3、绑定-HTML-复选框" class="headerlink" title="3、绑定 HTML 复选框"></a>3、绑定 HTML 复选框</h2><h4 id="（1）前置条件"><a href="#（1）前置条件" class="headerlink" title="（1）前置条件"></a>（1）前置条件</h4><blockquote><p>​在main.go文件的同目录下，存在<code>views/form.html</code>目录，且<code>form.html</code>文件里存放了HTML模板文件，如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My Form Template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Check some colors<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>Red<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colors[]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span>Green<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colors[]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>Blue<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;colors[]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）完整代码"><a href="#（2）完整代码" class="headerlink" title="（2）完整代码"></a>（2）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> myForm <span class="hljs-keyword">struct</span> &#123;<br>Colors []<span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;colors[]&quot;`</span> <span class="hljs-comment">/* 定义一个结构体 myForm，其中包含一个 Colors 字段，</span><br><span class="hljs-comment">    用于接收表单提交的 colors[] 参数*/</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.LoadHTMLGlob(<span class="hljs-string">&quot;views/*&quot;</span>) <span class="hljs-comment">// 加载 views 目录下的 HTML 模板文件</span><br><br>r.GET(<span class="hljs-string">&quot;/&quot;</span>, indexHandler) <span class="hljs-comment">// 处理根路径的 GET 请求，调用 indexHandler 函数</span><br>r.POST(<span class="hljs-string">&quot;/&quot;</span>, formHandler) <span class="hljs-comment">// 处理根路径的 POST 请求，调用 formHandler 函数</span><br><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 Gin 服务器监听在 8080 端口</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">indexHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;form.html&quot;</span>, <span class="hljs-literal">nil</span>) <span class="hljs-comment">// 在响应中渲染 form.html 模板并返回 200 状态码</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">formHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> fakeForm myForm<br>c.Bind(&amp;fakeForm)                 <span class="hljs-comment">// 绑定请求参数到 myForm 结构体</span><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;color&quot;</span>: fakeForm.Colors&#125;) <span class="hljs-comment">/* 返回 JSON 格式的响应，</span><br><span class="hljs-comment">包含 fakeForm 结构体中的 Colors 字段值*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）知识点"><a href="#（3）知识点" class="headerlink" title="（3）知识点"></a>（3）知识点</h4><ul><li><code>r.LoadHTMLGlob(&quot;views/*&quot;)</code>: 加载<code>views</code>目录下的HTML模板文件，用于后续的HTML模板渲染。<code>LoadHTMLGlob()</code>方法接受一个模板文件路径的参数，使用通配符<code>*</code>可以匹配指定目录下的所有文件。</li><li><code>r.GET(&quot;/&quot;, indexHandler)</code>: 注册一个处理根路径的GET请求的路由，当客户端发送GET请求到根路径”&#x2F;“时，Gin会调用<code>indexHandler</code>函数进行处理。<code>indexHandler</code>函数是自定义的处理函数，用于处理根路径的GET请求。</li><li><code>r.POST(&quot;/&quot;, formHandler)</code>: 注册一个处理根路径的POST请求的路由，当客户端发送POST请求到根路径”&#x2F;“时，Gin会调用<code>formHandler</code>函数进行处理。<code>formHandler</code>函数是自定义的处理函数，用于处理根路径的POST请求。</li></ul><h4 id="（4）示例大意"><a href="#（4）示例大意" class="headerlink" title="（4）示例大意"></a>（4）示例大意</h4><blockquote><ol><li>定义了一个名为<code>myForm</code>的结构体，其中包含一个<code>Colors</code>字段，用于接收表单提交的<code>colors[]</code>参数。<code>Colors</code>字段使用了<code>form:&quot;colors[]&quot;</code>标签，表示在表单中使用<code>colors[]</code>作为参数名。</li><li>在<code>main()</code>函数中创建了一个Gin引擎实例，并设置了默认的中间件。</li><li>使用<code>r.LoadHTMLGlob(&quot;views/*&quot;)</code>加载了<code>views</code>目录下的HTML模板文件，用于后续的HTML模板渲染。</li><li>使用<code>r.GET(&quot;/&quot;, indexHandler)</code>注册了一个处理根路径的GET请求的路由，当客户端发送GET请求到根路径”&#x2F;“时，Gin会调用<code>indexHandler</code>函数进行处理。</li><li>使用<code>r.POST(&quot;/&quot;, formHandler)</code>注册了一个处理根路径的POST请求的路由，当客户端发送POST请求到根路径”&#x2F;“时，Gin会调用<code>formHandler</code>函数进行处理。</li><li>定义了<code>indexHandler</code>函数，用于处理根路径的GET请求。该函数通过调用<code>c.HTML()</code>方法，在响应中渲染名为<code>form.html</code>的HTML模板，并返回200状态码。</li><li>定义了<code>formHandler</code>函数，用于处理根路径的POST请求。该函数首先定义了一个名为<code>fakeForm</code>的<code>myForm</code>类型的变量，然后通过调用<code>c.Bind()</code>方法，将请求参数绑定到<code>fakeForm</code>结构体中。最后，通过调用<code>c.JSON()</code>方法，返回一个JSON格式的响应，包含<code>fakeForm</code>结构体中的<code>Colors</code>字段值。</li></ol></blockquote><h2 id="4、绑定查询字符串或表单数据"><a href="#4、绑定查询字符串或表单数据" class="headerlink" title="4、绑定查询字符串或表单数据"></a>4、绑定查询字符串或表单数据</h2><h4 id="（1）完整代码-2"><a href="#（1）完整代码-2" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    Name     <span class="hljs-type">string</span>    <span class="hljs-string">`form:&quot;name&quot;`</span>                     <span class="hljs-comment">// 表单参数 &quot;name&quot;</span><br>    Address  <span class="hljs-type">string</span>    <span class="hljs-string">`form:&quot;address&quot;`</span>                  <span class="hljs-comment">// 表单参数 &quot;address&quot;</span><br>    Birthday time.Time <span class="hljs-string">`form:&quot;birthday&quot; time_format:&quot;2006-01-02&quot; time_utc:&quot;1&quot;`</span> <br>    <span class="hljs-comment">// 表单参数 &quot;birthday&quot;，使用指定的时间格式和转换为 UTC 时间</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    route := gin.Default() <span class="hljs-comment">// 创建默认的 Gin 路由引擎</span><br><br>    route.GET(<span class="hljs-string">&quot;/testing&quot;</span>, startPage) <span class="hljs-comment">// 注册 GET 请求处理函数 &quot;/testing&quot;</span><br><br>    route.Run(<span class="hljs-string">&quot;:8085&quot;</span>) <span class="hljs-comment">// 启动 Gin 服务并监听在 8085 端口</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">startPage</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> person Person <span class="hljs-comment">// 创建一个 Person 结构体变量用于存储请求参数</span><br><br>    <span class="hljs-comment">// 使用 Gin 的 ShouldBind 方法将请求参数绑定到 Person 结构体变量上</span><br>    <span class="hljs-comment">// 如果请求是 GET 请求，则使用 Form 绑定引擎（query）进行参数绑定</span><br>    <span class="hljs-comment">// 如果请求是 POST 请求，则首先检查 content-type 是否为 JSON 或 XML，然后再使用 Form（form-data）绑定引擎</span><br>    <span class="hljs-comment">// 详细绑定规则可以参考：https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48</span><br>    <span class="hljs-keyword">if</span> err := c.ShouldBind(&amp;person); err == <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//绑定成功时返回nil，反之返回错误信息</span><br>log.Println(person.Name)<span class="hljs-comment">// 输出绑定后的 Name 字段值</span><br>log.Println(person.Address)<span class="hljs-comment">// 输出绑定后的 Address 字段值</span><br>log.Println(person.Birthday)<span class="hljs-comment">// 输出绑定后的 Birthday 字段值</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>log.Println(<span class="hljs-string">&quot;Error:&quot;</span>, err)<br>&#125;<br><br>    c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Success&quot;</span>) <span class="hljs-comment">// 返回 &quot;Success&quot; 字符串作为响应</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-2"><a href="#（2）知识点-2" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li>​<code>ShouldBind</code> 是 Gin 框架提供的一个方法，用于将 HTTP 请求中的参数绑定到一个结构体变量上。<code>ShouldBind</code> 方法会根据请求中的参数名称和目标结构体的字段名称进行自动匹配，并将对应的参数值绑定到结构体字段上。在示例代码中的 <code>Person</code> 结构体定义中使用了 <code>form</code> 标签来指定参数的来源和绑定规则，如 <code>form:&quot;name&quot;</code>、<code>form:&quot;address&quot;</code> 和 <code>form:&quot;birthday&quot; time_format:&quot;2006-01-02&quot; time_utc:&quot;1&quot;</code>。这样，在调用 <code>ShouldBind</code> 方法时，Gin 会根据请求中的表单参数名称和结构体字段的标签进行自动匹配和绑定。需要注意的是，<code>ShouldBind</code> 方法在绑定参数时会根据目标结构体字段的类型和标签进行自动转换和验证，如果绑定失败会返回错误信息。因此，在使用 <code>ShouldBind</code> 方法时，需要进行错误处理，可以通过判断返回的错误是否为 <code>nil</code> 来判断参数绑定是否成功。如果绑定失败，可以通过错误信息来获取详细的错误原因，并做相应的处理。</li></ul><h4 id="（3）代码大意"><a href="#（3）代码大意" class="headerlink" title="（3）代码大意"></a>（3）代码大意</h4><blockquote><ol><li>定义了一个 <code>Person</code> 结构体，用于存储请求参数。<code>Person</code> 结构体包含了三个字段：<code>Name</code>、<code>Address</code> 和 <code>Birthday</code>，分别对应请求中的表单参数 “name”、”address” 和 “birthday”。</li><li>创建了一个 Gin 路由引擎 <code>route</code>，使用了默认的中间件。</li><li>注册了一个 HTTP GET 请求的处理函数 <code>startPage</code>，该处理函数通过调用 Gin 的 <code>ShouldBind</code> 方法将请求参数绑定到 <code>Person</code> 结构体变量 <code>person</code> 上。<code>ShouldBind</code> 方法会根据请求的类型（GET 或 POST）和请求的 content-type 自动选择合适的绑定引擎（Form 或 JSON&#x2F;XML 绑定引擎）进行参数绑定。</li><li>在 <code>startPage</code> 函数中，通过打印 <code>person</code> 结构体的字段值来验证参数绑定是否成功。</li><li>最后，返回了一个 HTTP 200 OK 响应，内容为 “Success” 字符串。</li></ol><p>总的来说，这段代码实现了一个简单的 HTTP GET 请求处理函数，使用 Gin 框架来绑定请求参数并处理请求。当请求到达 <code>/testing</code> 路径时，会触发 <code>startPage</code> 函数，将请求参数绑定到 <code>Person</code> 结构体变量，并输出字段值。如果参数绑定失败，则输出错误信息。最后返回一个 “Success” 字符串作为响应。</p></blockquote><h4 id="（4）测试"><a href="#（4）测试" class="headerlink" title="（4）测试"></a>（4）测试</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">http:<span class="hljs-comment">//localhost:8085/testing?name=ft&amp;address=China&amp;birthday=2023-04-11</span><br></code></pre></td></tr></table></figure><p>若响应成功，可以看到页面中会显示<code>Success</code>；</p><p>若响应成功，且信息匹配成功，终端中会打印出信息。</p><h2 id="5、绑定-Uri"><a href="#5、绑定-Uri" class="headerlink" title="5、绑定 Uri"></a>5、绑定 Uri</h2><h4 id="（1）完整代码-3"><a href="#（1）完整代码-3" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">// Person 结构体用于绑定 URI 参数</span><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>ID   <span class="hljs-type">string</span> <span class="hljs-string">`uri:&quot;id&quot; binding:&quot;required,uuid&quot;`</span> <span class="hljs-comment">// 将 URI 中的 id 参数绑定到 ID 字段，并指定必填和 UUID 格式验证</span><br>Name <span class="hljs-type">string</span> <span class="hljs-string">`uri:&quot;name&quot; binding:&quot;required&quot;`</span>    <span class="hljs-comment">// 将 URI 中的 name 参数绑定到 Name 字段，并指定必填验证</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>route := gin.Default()<span class="hljs-comment">// 创建默认的 Gin 路由引擎</span><br><br><span class="hljs-comment">// 定义路由处理函数</span><br>route.GET(<span class="hljs-string">&quot;/:name/:id&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> person Person<br><span class="hljs-comment">// 使用 ShouldBindUri 方法将 URI 参数绑定到 Person 结构体</span><br><span class="hljs-keyword">if</span> err := c.ShouldBindUri(&amp;person); err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-comment">//绑定成功，返回nil</span><br>c.JSON(<span class="hljs-number">400</span>, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: err.Error()&#125;) <span class="hljs-comment">// 如果绑定失败，返回错误信息</span><br><span class="hljs-keyword">return</span><br>&#125;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;name&quot;</span>: person.Name, <span class="hljs-string">&quot;uuid&quot;</span>: person.ID&#125;) <span class="hljs-comment">// 如果绑定成功，返回绑定后的值</span><br>&#125;)<br><br>route.Run(<span class="hljs-string">&quot;:8088&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-3"><a href="#（2）知识点-3" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li><code>c.ShouldBindUri(&amp;person)</code>: 这是 <code>*gin.Context</code> 上下文对象的方法，用于将 URI 参数绑定到结构体变量 <code>person</code> 上。<code>ShouldBindUri</code> 方法会自动根据结构体字段的 <code>uri</code> 标签和 URI 路径中的参数名称进行匹配和绑定。在示例代码中，<code>ID</code> 字段的 <code>uri</code> 标签指定了参数名称为 <code>id</code>，<code>Name</code> 字段的 <code>uri</code> 标签指定了参数名称为 <code>name</code>。同时，结构体字段的 <code>binding</code> 标签还指定了参数的验证规则，例如 <code>required</code> 表示参数必填，<code>uuid</code> 表示参数的值必须是 UUID 格式。</li><li><code>c.JSON(400, gin.H&#123;&quot;msg&quot;: err.Error()&#125;)</code>: 这是 <code>*gin.Context</code> 上下文对象的方法，用于构建一个 JSON 格式的 HTTP 响应。其中，<code>400</code> 表示 HTTP 状态码为 400（Bad Request），<code>gin.H&#123;&quot;msg&quot;: err.Error()&#125;</code> 表示响应的 JSON 数据，包含一个名为 <code>msg</code> 的字段，值为错误信息的字符串。</li><li><code>c.JSON(200, gin.H&#123;&quot;name&quot;: person.Name, &quot;uuid&quot;: person.ID&#125;)</code>: 这是 <code>*gin.Context</code> 上下文对象的方法，用于构建一个 JSON 格式的 HTTP 响应。其中，<code>200</code> 表示 HTTP 状态码为 200（OK），<code>gin.H&#123;&quot;name&quot;: person.Name, &quot;uuid&quot;: person.ID&#125;</code> 表示响应的 JSON 数据，包含两个字段，分别为 <code>name</code> 和 <code>uuid</code>，值分别为 <code>person.Name</code> 和 <code>person.ID</code> 的值，即绑定后的 URI 参数值。</li></ul><h4 id="（3）示例大意-2"><a href="#（3）示例大意-2" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><p>上述代码使用了 Gin 框架来创建一个 HTTP 服务器，并定义了一个 GET 请求处理函数，该处理函数绑定了两个 URI 参数（<code>:name</code> 和 <code>:id</code>）到一个自定义的结构体 <code>Person</code> 的字段上。具体而言，代码实现了以下几个功能：</p><ol><li>导入了 <code>github.com/gin-gonic/gin</code> 包，该包是 Gin 框架的核心库，提供了用于构建 Web 应用的 HTTP 路由和中间件功能。</li><li>定义了一个名为 <code>Person</code> 的结构体，该结构体包含了两个字段 <code>ID</code> 和 <code>Name</code>，分别用于绑定 URI 参数 <code>id</code> 和 <code>name</code>。</li><li>创建了一个默认的 Gin 路由引擎实例 <code>route</code>，用于处理 HTTP 请求和路由。</li><li>定义了一个路由处理函数，处理 HTTP GET 请求，该处理函数绑定了路由路径中的 <code>:name</code> 和 <code>:id</code> 参数到 <code>Person</code> 结构体的字段上，并在绑定成功后返回绑定后的值，否则返回错误信息。</li><li>使用 <code>c.ShouldBindUri(&amp;person)</code> 方法将 URI 参数绑定到 <code>Person</code> 结构体的字段上。<code>ShouldBindUri</code> 方法会根据结构体字段的标签信息来解析和验证 URI 参数，并将解析后的值赋给结构体字段。</li><li>如果 URI 参数绑定失败（例如，缺少必填参数或参数格式不符合预期），则通过 <code>c.JSON</code> 方法返回 HTTP 状态码 400（Bad Request）和错误信息。</li><li>如果 URI 参数绑定成功，则通过 <code>c.JSON</code> 方法返回 HTTP 状态码 200（OK）和绑定后的值，包括 <code>Person</code> 结构体中的 <code>Name</code> 和 <code>ID</code> 字段的值。</li><li>最后，通过 <code>route.Run(&quot;:8088&quot;)</code> 启动 HTTP 服务器，监听在本地的 8088 端口上。一旦有请求到达该端口，将会由 Gin 路由引擎处理并调用相应的路由处理函数。</li></ol></blockquote><h4 id="（4）测试-1"><a href="#（4）测试-1" class="headerlink" title="（4）测试"></a>（4）测试</h4><p>网页：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">http:<span class="hljs-comment">//localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3</span><br>http:<span class="hljs-comment">//localhost:8088/thinkerou/not-uuid</span><br></code></pre></td></tr></table></figure><p>终端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">Invoke-WebRequest -Uri <span class="hljs-string">&quot;http://localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3&quot;</span> -Method GET<br><br>Invoke-WebRequest -Uri <span class="hljs-string">&quot;http://localhost:8088/thinkerou/not-uuid&quot;</span> -Method GET<br></code></pre></td></tr></table></figure><h2 id="6、控制Log高亮输出"><a href="#6、控制Log高亮输出" class="headerlink" title="6、控制Log高亮输出"></a>6、控制Log高亮输出</h2><blockquote><p>默认是会高亮（当然这基于你使用的 TTY）。</p></blockquote><h4 id="（1）完整代码-4"><a href="#（1）完整代码-4" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><blockquote><p>如果你不想使用日志高亮：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 关闭高亮</span><br>    gin.DisableConsoleColor()<br><br>    <span class="hljs-comment">// 创建一个带有默认中间件（logger和recovery）的gin路由器</span><br>    router := gin.Default()<br><br>    <span class="hljs-comment">// 处理GET请求，路径为&quot;/ping&quot;</span><br>    router.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;pong&quot;</span>) <span class="hljs-comment">// 向客户端返回字符串&quot;pong&quot;，状态码为200</span><br>    &#125;)<br><br>    <span class="hljs-comment">// 启动HTTP服务器，监听在端口8080上，等待客户端请求</span><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>手动设置高亮：</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 强制开启日志高亮显示</span><br>    gin.ForceConsoleColor()<br><br>    <span class="hljs-comment">// 创建一个带有默认中间件（logger和recovery）的gin路由器</span><br>    router := gin.Default()<br><br>    <span class="hljs-comment">// 处理GET请求，路径为&quot;/ping&quot;</span><br>    router.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;pong&quot;</span>) <span class="hljs-comment">// 向客户端返回字符串&quot;pong&quot;，状态码为200</span><br>    &#125;)<br><br>    <span class="hljs-comment">// 启动HTTP服务器，监听在端口8080上，等待客户端请求</span><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-4"><a href="#（2）知识点-4" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li><code>gin.ForceConsoleColor()</code>: 这是 Gin 框架的一个方法，用于强制开启日志的高亮显示。它可以让 Gin 框架在控制台输出的日志信息更加醒目和易读。</li><li><code>gin.DisableConsoleColor()</code>: 这是 Gin 框架的一个方法，用于关闭日志的高亮显示。当调用了这个方法后，Gin 框架在控制台输出的日志信息将不再具有高亮效果，变为普通的文本显示。</li></ul><h2 id="7、自定义HTTP配置"><a href="#7、自定义HTTP配置" class="headerlink" title="7、自定义HTTP配置"></a>7、自定义HTTP配置</h2><h4 id="（1）完整代码-5"><a href="#（1）完整代码-5" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><blockquote><p>​直接使用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    router := gin.Default() <span class="hljs-comment">// 创建一个 Gin 路由引擎实例，使用默认的中间件：日志和恢复中间件</span><br>    http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, router) <span class="hljs-comment">// 启动 HTTP 服务器，监听在端口 8080 上，使用创建的路由引擎处理请求</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>或</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    router := gin.Default() <span class="hljs-comment">// 创建一个 Gin 路由引擎实例，使用默认的中间件：日志和恢复中间件</span><br><br>    <span class="hljs-comment">// 创建一个自定义的 http.Server 实例</span><br>    s := &amp;http.Server&#123;<br>        Addr:           <span class="hljs-string">&quot;:8080&quot;</span>,                        <span class="hljs-comment">// 监听的地址和端口</span><br>        Handler:        router,                         <span class="hljs-comment">// 使用创建的路由引擎处理请求</span><br>        ReadTimeout:    <span class="hljs-number">10</span> * time.Second,               <span class="hljs-comment">// 读取请求超时时间</span><br>        WriteTimeout:   <span class="hljs-number">10</span> * time.Second,               <span class="hljs-comment">// 写入响应超时时间</span><br>        MaxHeaderBytes: <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>,                         <span class="hljs-comment">// 最大请求头大小</span><br>    &#125;<br><br>    s.ListenAndServe() <span class="hljs-comment">// 启动 HTTP 服务器，监听在指定的地址和端口，并使用创建的路由引擎处理请求</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-5"><a href="#（2）知识点-5" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li><p><code>http.ListenAndServe(&quot;:8080&quot;, router)</code>: 这是 Go 标准库 <code>net/http</code> 提供的一个方法，用于启动一个 HTTP 服务器并监听指定的地址和端口，并使用传入的路由引擎处理请求。在这里，我们指定监听地址为空字符串，表示监听所有可用的网卡，端口为 8080。<code>router</code> 是之前创建的 Gin 路由引擎实例，用于处理请求。</p></li><li><p><code>s := &amp;http.Server&#123;...&#125;</code>这段代码创建了一个 <code>http.Server</code> 实例，并设置了以下配置项：</p></li><li><ol><li><code>Addr</code>：指定服务器监听的地址和端口，这里设置为 <code>:8080</code>，表示监听在本地的 8080 端口。</li><li><code>Handler</code>：设置处理请求的路由引擎，这里使用了之前创建的 <code>router</code>，即 Gin 路由引擎。</li><li><code>ReadTimeout</code>：设置读取请求的超时时间，这里设置为 10 秒，表示如果在 10 秒内没有读取到完整的请求，服务器会关闭连接。</li><li><code>WriteTimeout</code>：设置写入响应的超时时间，这里设置为 10 秒，表示如果在 10 秒内没有完成响应的写入操作，服务器会关闭连接。</li><li><code>MaxHeaderBytes</code>：设置最大请求头的大小，这里设置为 1 &lt;&lt; 20，即 1MB，表示请求头的大小不超过 1MB。</li></ol></li><li><p>这些配置项可以根据具体的需求进行调整，用于自定义 HTTP 服务器的行为，例如设置超时时间、限制请求头大小等。在创建完 <code>http.Server</code> 实例后，可以通过调用 <code>ListenAndServe()</code> 方法来启动服务器，开始监听指定的地址和端口，并使用设置的路由引擎来处理请求。</p></li><li><p><code>s.ListenAndServe()</code>: 这是 http.Server 的一个方法，用于启动 HTTP 服务器，并监听在指定的地址和端口，使用创建的路由引擎处理请求。在这里，<code>s</code> 是之前创建的自定义 http.Server 实例，通过调用 <code>ListenAndServe()</code> 方法来启动服务器。</p></li></ul><h4 id="（3）示例大意-3"><a href="#（3）示例大意-3" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>创建一个默认的 Gin 路由引擎实例，使用了默认的中间件包括日志和恢复中间件。</li><li>创建一个自定义的 <code>http.Server</code> 实例，设置了监听的地址和端口为 <code>:8080</code>，使用之前创建的路由引擎 <code>router</code> 来处理请求，设置了读取请求的超时时间为 10 秒，写入响应的超时时间为 10 秒，最大请求头大小为 1MB。</li><li>调用 <code>ListenAndServe()</code> 方法启动 HTTP 服务器，开始监听指定的地址和端口，并使用创建的路由引擎来处理请求。</li></ol><p>这段代码的目的是创建一个自定义的 HTTP 服务器，使用 Gin 框架来处理请求，并设置了一些自定义的配置项，如超时时间和最大请求头大小。最后通过调用 <code>ListenAndServe()</code> 方法启动服务器，使其开始监听客户端请求。</p></blockquote><h2 id="8、-自定义-Log-文件"><a href="#8、-自定义-Log-文件" class="headerlink" title="8、 自定义 Log 文件"></a>8、 自定义 Log 文件</h2><h4 id="（1）完整代码-6"><a href="#（1）完整代码-6" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.New() <span class="hljs-comment">// 创建一个新的 Gin 路由引擎实例，不使用默认的中间件</span><br><br><span class="hljs-comment">// 添加自定义的日志中间件，将日志格式化为自定义格式</span><br>router.Use(gin.LoggerWithFormatter(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(param gin.LogFormatterParams)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// 自定义日志格式</span><br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s - [%s] \&quot;%s %s %s %d %s \&quot;%s\&quot; %s\&quot;\n&quot;</span>,<br>param.ClientIP,                       <span class="hljs-comment">//客户端 IP 地址</span><br>param.TimeStamp.Format(time.RFC1123), <span class="hljs-comment">//时间戳</span><br>param.Method,                         <span class="hljs-comment">//请求方法</span><br>param.Path,                           <span class="hljs-comment">//请求路径</span><br>param.Request.Proto,                  <span class="hljs-comment">//请求协议版本</span><br>param.StatusCode,                     <span class="hljs-comment">//响应状态码</span><br>param.Latency,                        <span class="hljs-comment">//请求耗时</span><br>param.Request.UserAgent(),            <span class="hljs-comment">//客户端 UserAgent 信息</span><br>param.ErrorMessage,                   <span class="hljs-comment">// 错误信息（若有错误发生时）</span><br>)<br>&#125;))<br><br>router.Use(gin.Recovery()) <span class="hljs-comment">// 添加恢复中间件，用于恢复从 panic 中恢复</span><br><br>router.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;pong&quot;</span>)<br>&#125;)<br><br>router.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器，监听在指定的地址和端口，并使用创建的路由引擎处理请求</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-6"><a href="#（2）知识点-6" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li><p><code>router.Use()</code>: 此方法用于向 Gin 路由引擎添加中间件。中间件是处理 HTTP 请求的函数，在请求到达实际的路由处理器之前被执行。在这段代码中，使用 <code>router.Use()</code> 添加了两个中间件函数：</p></li><li><p><code>router.Use()</code>: 此方法用于向 Gin 路由引擎添加中间件。中间件是处理 HTTP 请求的函数，在请求到达实际的路由处理器之前被执行。在这段代码中，使用 <code>router.Use()</code> 添加了两个中间件函数：</p></li><li><p><code>gin.LoggerWithFormatter()</code>: 这个中间件函数用于以自定义格式记录 HTTP 请求日志。<code>param</code> 参数是 <code>gin.LogFormatterParams</code> 类型的实例，包含了有关 HTTP 请求和响应的信息。在给定的代码中，<code>param</code> 被用于格式化一个自定义的日志字符串，其中包括了客户端 IP 地址、时间戳、HTTP 方法、请求路径、协议版本、响应状态码、请求耗时、客户端 UserAgent 信息和错误消息（如果有的话）。</p></li><li><p><code>gin.Recovery()</code>: 这个中间件函数用于从可能在处理 HTTP 请求时发生的 panic 中恢复。如果发生 panic，这个中间件会从中恢复，并向客户端返回一个 500 内部服务器错误的响应。</p></li></ul><h4 id="（3）示例大意-4"><a href="#（3）示例大意-4" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li><p>导入了 <code>fmt</code>、<code>github.com/gin-gonic/gin</code> 和 <code>time</code> 包。</p></li><li><p>在 <code>main()</code> 函数中，创建了一个新的 Gin 路由引擎实例 <code>router</code>，并使用 <code>gin.New()</code> 方法创建了一个不使用默认中间件的路由引擎。</p></li><li><p>使用 <code>router.Use()</code> 方法添加了两个自定义中间件：</p><p>a. <code>gin.LoggerWithFormatter()</code> 中间件，用于将日志格式化为自定义格式。在回调函数中，通过 <code>gin.LogFormatterParams</code> 参数获取了请求和响应的信息，然后使用自定义的格式将这些信息组合成一个日志字符串。</p><p>b. <code>gin.Recovery()</code> 中间件，用于从 panic 中恢复。这将确保在处理请求时发生 panic 时，服务器不会崩溃，而是能够从中恢复，并返回一个 500 内部服务器错误的响应。</p></li><li><p>使用 <code>router.GET()</code> 方法定义了一个处理 HTTP GET 请求的路由，路径为 “&#x2F;ping”。在回调函数中，使用 <code>c.String()</code> 方法向客户端发送一个状态码为 200 的 “pong” 字符串响应。</p></li><li><p>最后，使用 <code>router.Run()</code> 方法启动了 HTTP 服务器，监听在地址 “:8080” 上，并使用创建的路由引擎处理传入的请求。</p></li></ol><p>这段代码的功能是创建一个简单的 HTTP 服务器，监听在端口 8080，当访问 “&#x2F;ping” 路径时，返回一个 “pong” 的响应。同时，还添加了自定义的日志中间件和恢复中间件，以增强服务器的健壮性和可靠性。</p></blockquote><h2 id="9、自定义中间件"><a href="#9、自定义中间件" class="headerlink" title="9、自定义中间件"></a>9、自定义中间件</h2><h4 id="（1）完整代码-7"><a href="#（1）完整代码-7" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Logger</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        t := time.Now() <span class="hljs-comment">// 记录当前时间</span><br><br>        c.Set(<span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>) <span class="hljs-comment">// 设置一个名为 &quot;example&quot; 的自定义变量到 Gin 上下文中</span><br><br>        <span class="hljs-comment">// 请求前的处理逻辑</span><br><br>        c.Next() <span class="hljs-comment">// 执行下一个处理函数</span><br><br>        <span class="hljs-comment">// 请求后的处理逻辑</span><br>        latency := time.Since(t) <span class="hljs-comment">// 计算请求耗时</span><br>        log.Print(latency) <span class="hljs-comment">// 打印请求耗时</span><br><br>        status := c.Writer.Status() <span class="hljs-comment">// 获取响应状态码</span><br>        log.Println(status) <span class="hljs-comment">// 打印响应状态码</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.New() <span class="hljs-comment">// 创建一个新的 Gin 路由引擎实例</span><br><br>    r.Use(Logger()) <span class="hljs-comment">// 使用自定义的 Logger 中间件</span><br><br>    r.GET(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        example := c.MustGet(<span class="hljs-string">&quot;example&quot;</span>).(<span class="hljs-type">string</span>) <span class="hljs-comment">// 从 Gin 上下文中获取之前设置的 &quot;example&quot; 变量</span><br><br>        <span class="hljs-comment">// 打印：&quot;12345&quot;</span><br>        log.Println(example)<br>    &#125;)<br><br>    r.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器，监听在指定的地址和端口，并使用创建的路由引擎处理请求</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-7"><a href="#（2）知识点-7" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><ul><li><p><code>time.Now()</code>: 这是 Go 语言中的时间包 <code>time</code> 中的函数，用于获取当前时间。在这段代码中，用于记录请求处理开始的时间 <code>t</code>，以便后续计算请求耗时。</p></li><li><p><code>c.Set(key string, value interface&#123;&#125;)</code>: 这是 Gin 框架中 <code>Context</code> 对象的方法，用于在 Gin 上下文中设置一个自定义的键值对。在这段代码中，使用该方法将一个名为 “example” 的自定义变量设置到 Gin 上下文中，值为字符串 “12345”。</p></li><li><p><code>c.Next()</code>: 这是 Gin 框架中 <code>Context</code> 对象的方法，用于执行下一个处理函数。在这段代码中，用于将请求传递给下一个处理函数，通常在中间件中使用，确保请求能够继续向后处理。</p></li><li><p><code>time.Since(t)</code>: 这是 Go 语言中的时间包 <code>time</code> 中的函数，用于计算当前时间与给定时间 <code>t</code> 的时间差。在这段代码中，用于计算请求耗时，即当前时间与请求处理开始时间 <code>t</code> 的时间差。</p></li><li><p><code>log.Print(v ...interface&#123;&#125;)</code>: 这是 Go 语言中的日志包 <code>log</code> 中的函数，用于将日志消息打印到标准输出。在这段代码中，用于打印请求耗时 <code>latency</code>和用于打印响应状态码。</p></li><li><p><code>c.Writer.Status()</code>: 这是 Gin 框架中 <code>Context</code> 对象的方法，用于获取响应状态码。在这段代码中，用于获取响应状态码，以便后续打印到日志中。</p></li></ul><h4 id="（3）示例执行过程"><a href="#（3）示例执行过程" class="headerlink" title="（3）示例执行过程"></a>（3）示例执行过程</h4><blockquote><ol><li>在 <code>main()</code> 函数中，首先创建了一个新的 Gin 路由引擎实例 <code>r</code>。</li><li>使用 <code>r.Use(Logger())</code> 将自定义的 <code>Logger</code> 中间件注册到路由引擎 <code>r</code> 中，以便在处理请求时自动调用。</li><li>定义了一个处理 HTTP GET 请求的路由处理函数，路径为 “&#x2F;test”。在这个处理函数中，使用 <code>c.MustGet(&quot;example&quot;)</code> 从 Gin 上下文中获取之前在 <code>Logger</code> 中间件中设置的名为 “example” 的自定义变量，并将其转换为字符串类型。</li><li>在路由处理函数中，使用日志包 <code>log</code> 将获取到的 “example” 变量打印到日志中。</li><li>使用 <code>r.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器，监听在地址 “:8080” 并使用创建的路由引擎 <code>r</code> 处理请求。</li><li>当有请求到达时，Gin 框架会依次执行注册到路由引擎的中间件和路由处理函数。</li><li><code>Logger()</code> 中间件会在请求前记录当前时间，并设置一个名为 “example” 的自定义变量到 Gin 上下文中。然后，它会调用 <code>c.Next()</code> 执行下一个处理函数，即路由处理函数。</li><li>路由处理函数会从 Gin 上下文中获取 “example” 变量，并将其打印到日志中。</li><li>当路由处理函数执行完毕后，控制权会返回到 <code>Logger()</code> 中间件，它会计算请求耗时，并将请求耗时和响应状态码打印到日志中。</li><li>最后，HTTP 服务器会根据定义的路由引擎 <code>r</code> 处理请求，并在指定的地址和端口上监听。</li></ol></blockquote><h2 id="10、自定义验证器"><a href="#10、自定义验证器" class="headerlink" title="10、自定义验证器"></a>10、自定义验证器</h2><blockquote><p>可能有问题。略</p></blockquote><h4 id="（1）完整代码-8"><a href="#（1）完整代码-8" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin/binding&quot;</span><br>    <span class="hljs-string">&quot;github.com/go-playground/validator/v10&quot;</span><br>)<br><br><span class="hljs-comment">// Booking contains binded and validated data.</span><br><span class="hljs-keyword">type</span> Booking <span class="hljs-keyword">struct</span> &#123;<br>    CheckIn  time.Time <span class="hljs-string">`form:&quot;check_in&quot; binding:&quot;required,bookabledate&quot; time_format:&quot;2006-01-02&quot;`</span><br>    CheckOut time.Time <span class="hljs-string">`form:&quot;check_out&quot; binding:&quot;required,gtfield=CheckIn,bookabledate&quot; time_format:&quot;2006-01-02&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">var</span> bookableDate validator.Func = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(fl validator.FieldLevel)</span></span> <span class="hljs-type">bool</span> &#123;<br>    date, ok := fl.Field().Interface().(time.Time)<br>    <span class="hljs-keyword">if</span> ok &#123;<br>        today := time.Now()<br>        <span class="hljs-keyword">if</span> today.After(date) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    route := gin.Default()<br><br>    <span class="hljs-comment">// 注册自定义验证器函数</span><br>    <span class="hljs-keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;<br>        v.RegisterValidation(<span class="hljs-string">&quot;bookabledate&quot;</span>, bookableDate)<br>    &#125;<br><br>    <span class="hljs-comment">// 定义路由</span><br>    route.GET(<span class="hljs-string">&quot;/bookable&quot;</span>, getBookable)<br><br>    <span class="hljs-comment">// 启动服务</span><br>    route.Run(<span class="hljs-string">&quot;:8085&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getBookable</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    <span class="hljs-keyword">var</span> b Booking<br>    <span class="hljs-keyword">if</span> err := c.ShouldBindWith(&amp;b, binding.Query); err == <span class="hljs-literal">nil</span> &#123;<br>        c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Booking dates are valid!&quot;</span>&#125;)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-8"><a href="#（2）知识点-8" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><p><code>type Booking struct</code>: 定义了一个结构体类型 <code>Booking</code>，用于存储从请求中绑定和验证后的数据。</p></li><li><p><code>var bookableDate validator.Func</code>: 定义了一个自定义验证器函数 <code>bookableDate</code>，用于验证日期是否可预订。该函数会在后续的验证中使用。</p></li><li><p><code>binding.Validator.Engine()</code>: 获取 Gin 框架中的验证器引擎实例，用于注册自定义验证器函数。</p></li><li><p><code>v.RegisterValidation(&quot;bookabledate&quot;, bookableDate)</code>: 使用 <code>v.RegisterValidation()</code> 方法将自定义验证器函数 <code>bookableDate</code> 注册到 Gin 的验证器引擎中，并指定了验证器的名称为 “bookabledate”。这样，在后续的验证中就可以通过该名称来使用这个自定义验证器函数。</p></li><li><p><code>var bookableDate validator.Func</code>: 定义了一个自定义验证器函数 <code>bookableDate</code>，用于验证日期是否可预订。该函数会在后续的验证中使用。</p></li><li><p><code>c.ShouldBindWith(&amp;b, binding.Query)</code>: 在 <code>getBookable</code> 处理函数中，使用 <code>c.ShouldBindWith()</code> 方法将请求中的数据绑定到 <code>b</code> 变量，并使用 <code>binding.Query</code> 标签指定了从查询参数中获取数据。这样，请求中的数据就会被绑定到 <code>Booking</code> 结构体的字段，并且会进行后续的验证。</p></li><li><p><code>c.JSON(http.StatusBadRequest, gin.H&#123;&quot;error&quot;: err.Error()&#125;)</code>: 在验证失败时，使用 <code>c.JSON()</code> 方法将一个 JSON 格式的错误响应发送给客户端，其中包含了一个键值对，键为 “error”，值为验证失败的错误信息。HTTP 状态码被设置为 <code>http.StatusBadRequest</code>，表示请求参数错误。</p></li><li><p>自定义验证器函数，用于验证日期是否可预订，具体实现如下：</p><ul><li><code>func(fl validator.FieldLevel) bool</code>: 这是一个函数类型，参数为 <code>validator.FieldLevel</code>，返回值为 <code>bool</code>。<code>validator.FieldLevel</code> 是一个接口，用于在验证器中获取字段的相关信息，如字段的值、字段的标签等。</li><li><code>fl.Field().Interface().(time.Time)</code>: 使用 <code>fl.Field()</code> 方法获取字段的值，并使用 <code>Interface()</code> 方法将其转换为 <code>interface&#123;&#125;</code> 类型。然后使用类型断言将其转换为 <code>time.Time</code> 类型的值。这样，我们可以在函数中使用字段的实际值进行验证。</li><li><code>today := time.Now()</code>: 使用 <code>time.Now()</code> 函数获取当前的时间，并将其赋值给 <code>today</code> 变量，表示当前的日期时间。</li><li><code>if today.After(date) &#123; return false &#125;</code>: 使用 <code>today.After()</code> 方法比较当前时间和字段值的时间，如果当前时间晚于字段值的时间，则返回 <code>false</code>，表示验证失败，日期不可预订。</li><li><code>return true</code>: 如果验证通过，即当前时间不晚于字段值的时间，返回 <code>true</code>，表示日期可预订。</li></ul><p>总的来说，这个函数的实现逻辑是通过比较当前时间和字段值的时间来判断日期是否可预订，如果当前时间晚于字段值的时间，则认为日期不可预订，返回 <code>false</code>，否则返回 <code>true</code>。</p></li></ul></blockquote><h4 id="（3）示例大意-5"><a href="#（3）示例大意-5" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>定义了一个 <code>Booking</code> 结构体，包含了两个字段 <code>CheckIn</code> 和 <code>CheckOut</code>，分别表示入住日期和离店日期。这两个字段使用了 Gin 的 <code>form</code> 标签指定了它们在请求参数中的名称，并使用了 <code>binding</code> 标签来指定了验证规则。</li><li>定义了一个名为 <code>bookableDate</code> 的自定义验证器函数，用于验证日期是否可预订。这个函数在验证器中注册为 <code>bookabledate</code>，并在验证过程中获取字段的实际值，比较当前时间和字段值的时间来判断日期是否可预订。</li><li>在 <code>main</code> 函数中，创建了一个 Gin 的默认引擎，用于处理 HTTP 请求。然后使用 <code>binding.Validator.Engine()</code> 方法获取到验证器引擎，并使用 <code>v.RegisterValidation()</code> 方法注册了自定义验证器函数 <code>bookableDate</code>。</li><li>定义了一个名为 <code>getBookable</code> 的处理函数，用于处理 <code>/bookable</code> 路由的 GET 请求。在这个处理函数中，首先创建了一个 <code>Booking</code> 结构体实例 <code>b</code>，然后使用 <code>c.ShouldBindWith()</code> 方法将请求参数绑定到 <code>b</code> 上，并进行验证。如果验证通过，则返回 HTTP 状态码为 200 的 JSON 响应，表示预订日期有效；否则，返回 HTTP 状态码为 400 的 JSON 响应，表示验证失败并返回错误信息。</li><li>启动了 Gin 服务，并监听在 8085 端口上。</li></ol></blockquote><h2 id="11、定义路由日志的格式"><a href="#11、定义路由日志的格式" class="headerlink" title="11、定义路由日志的格式"></a>11、定义路由日志的格式</h2><h4 id="（1）完整代码-9"><a href="#（1）完整代码-9" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default() <span class="hljs-comment">// 创建一个 Gin 实例作为路由引擎</span><br><br><span class="hljs-comment">// 设置 DebugPrintRouteFunc 函数，用于在控制台打印路由信息</span><br>gin.DebugPrintRouteFunc = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(httpMethod, absolutePath, handlerName <span class="hljs-type">string</span>, nuHandlers <span class="hljs-type">int</span>)</span></span> &#123;<br>log.Printf(<span class="hljs-string">&quot;endpoint %v %v %v %v\n&quot;</span>, httpMethod, absolutePath, handlerName, nuHandlers)<br>&#125;<br><br><span class="hljs-comment">// 定义 POST /foo 路由，处理函数返回 JSON 响应 &quot;foo&quot;</span><br>r.POST(<span class="hljs-string">&quot;/foo&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, <span class="hljs-string">&quot;foo&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 定义 GET /bar 路由，处理函数返回 JSON 响应 &quot;bar&quot;</span><br>r.GET(<span class="hljs-string">&quot;/bar&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, <span class="hljs-string">&quot;bar&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 定义 GET /status 路由，处理函数返回 JSON 响应 &quot;ok&quot;</span><br>r.GET(<span class="hljs-string">&quot;/status&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(http.StatusOK, <span class="hljs-string">&quot;ok&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-9"><a href="#（2）知识点-9" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>gin.DebugPrintRouteFunc</code>: 这是 Gin 框架中的一个变量，用于设置在控制台打印路由信息的函数。您在代码中通过给该变量赋值一个函数来自定义路由信息的打印方式。在您的示例中，设置了一个自定义的打印函数，用于在控制台输出 HTTP 方法、URL 路径、处理函数名和处理函数的数量。其中，<code>httpMethod</code> 是 HTTP 请求方法（如 “GET”、”POST” 等），<code>absolutePath</code> 是路由的完整路径，<code>handlerName</code> 是处理函数的名称，<code>nuHandlers</code> 是处理函数的数量，通过调用 <code>log.Printf</code> 函数将路由调试打印的信息输出到控制台。</li><li><code>r.GET(&quot;/bar&quot;, func(c *gin.Context) &#123; ... &#125;)</code>: 这是 Gin 框架中的一个方法，用于定义一个处理 HTTP GET 请求的路由。在这里，您定义了一个处理 <code>/bar</code> 路径的 GET 请求的路由，并传入一个匿名函数作为处理函数。可以在浏览器中输入网址<code>[localhost:8080/bar](http://localhost:8080/bar)</code>访问。</li><li><code>r.POST(&quot;/foo&quot;, func(c *gin.Context) &#123; ... &#125;)</code>: 这是 Gin 框架中的一个方法，用于定义一个处理 HTTP POST 请求的路由。在这里，您定义了一个处理 <code>/foo</code> 路径的 POST 请求的路由，并传入一个匿名函数作为处理函数。这个匿名函数会在请求到达时被调用，其中 <code>c *gin.Context</code> 是处理函数的参数，表示当前请求的上下文。不能在浏览器中直接输入网址访问，因为这里的是POST请求，需要在客户端输入<code>curl -X POST http://localhost:8080/foo</code>或者在 PowerShell 中发送 HTTP 请求并指定请求方法访问<code>Invoke-RestMethod -Uri &#39;http://localhost:8080/foo&#39; -Method Post</code></li></ul></blockquote><h4 id="（3）示例大意-6"><a href="#（3）示例大意-6" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>导入了所需的包，包括日志处理、HTTP 相关的包以及 Gin 框架的包。</li><li>在 <code>main</code> 函数中创建了一个 Gin 实例 <code>r</code>，作为路由引擎。</li><li>使用 <code>gin.DebugPrintRouteFunc</code> 函数设置了一个自定义的路由调试打印函数，用于在控制台打印路由信息。</li><li>定义了一个处理 POST 请求的路由 <code>/foo</code>，当该路由接收到 POST 请求时，会执行传入的匿名函数，该函数会在 HTTP 响应中返回 JSON 格式的响应 “foo”。</li><li>定义了一个处理 GET 请求的路由 <code>/bar</code>，当该路由接收到 GET 请求时，会执行传入的匿名函数，该函数会在 HTTP 响应中返回 JSON 格式的响应 “bar”。</li><li>定义了一个处理 GET 请求的路由 <code>/status</code>，当该路由接收到 GET 请求时，会执行传入的匿名函数，该函数会在 HTTP 响应中返回 JSON 格式的响应 “ok”。</li><li>调用 <code>r.Run()</code> 启动 HTTP 服务，监听地址为 0.0.0.0:8080。</li></ol></blockquote><h2 id="12、在中间件中使用-Goroutine"><a href="#12、在中间件中使用-Goroutine" class="headerlink" title="12、在中间件中使用 Goroutine"></a>12、在中间件中使用 Goroutine</h2><h4 id="（1）完整代码-10"><a href="#（1）完整代码-10" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default()<br><br>    <span class="hljs-comment">// 定义 /long_async 路由</span><br>    r.GET(<span class="hljs-string">&quot;/long_async&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 创建在 goroutine 中使用的副本</span><br>        cCp := c.Copy()<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-comment">// 用 time.Sleep() 模拟一个长任务。</span><br>            time.Sleep(<span class="hljs-number">5</span> * time.Second)<br><br>            <span class="hljs-comment">// 请注意您使用的是复制的上下文 &quot;cCp&quot;，这一点很重要</span><br>            log.Println(<span class="hljs-string">&quot;Done! in path &quot;</span> + cCp.Request.URL.Path)<br>        &#125;()<br>    &#125;)<br><br>    <span class="hljs-comment">// 定义 /long_sync 路由</span><br>    r.GET(<span class="hljs-string">&quot;/long_sync&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 用 time.Sleep() 模拟一个长任务。</span><br>        time.Sleep(<span class="hljs-number">5</span> * time.Second)<br><br>        <span class="hljs-comment">// 因为没有使用 goroutine，不需要拷贝上下文</span><br>        log.Println(<span class="hljs-string">&quot;Done! in path &quot;</span> + c.Request.URL.Path)<br>    &#125;)<br><br>    <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>    r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-10"><a href="#（2）知识点-10" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>c.Copy()</code>：创建一个上下文的副本，用于在 goroutine 中使用。在多个 goroutine 中处理请求时，需要使用上下文的副本，以避免竞态条件和并发访问的问题。</li><li><code>go func() &#123; ... &#125;()</code>：这段代码是一个匿名的 Go 语言协程（goroutine），通过 <code>go</code> 关键字开启一个新的并发执行的函数。这个函数中的逻辑很简单，首先通过 <code>time.Sleep(5 * time.Second)</code> 模拟一个耗时的操作，即暂停当前 goroutine 的执行 5 秒钟。在这个暂停期间，当前的 goroutine 不会继续执行，而是让出 CPU 时间给其他 goroutine，从而实现了并发执行。当 <code>time.Sleep()</code> 结束后，该 goroutine 会继续执行剩下的代码。这段代码通过调用 <code>log.Println()</code> 在日志中打印一条消息，内容为 “Done! int path “ + cCp.Request.URL.Path。其中，<code>cCp</code> 是在创建这个 goroutine 时通过 <code>c.Copy()</code> 创建的当前请求上下文的副本，用于记录请求的路径。</li><li><code>time.Sleep()</code>：模拟一个长时间运行的任务，暂停当前 goroutine 的执行一段时间，以模拟耗时的操作。在这段代码中，使用 <code>time.Sleep(5 * time.Second)</code> 暂停当前 goroutine 的执行 5 秒。</li><li><code>c.Request.URL.Path</code>：获取当前请求的路径，用于在日志中记录处理请求的路径。</li><li>通过分别访问<code>long_async</code>目录和<code>long_sync</code>目录，会发现：前者每次刷新页面，后台就会立即打印日志，过五秒后才会打印输出路径；反观后者，每次刷新页面需要过五秒，后台才会同时输出日志和打印路径。<code>long_async</code>当前的 goroutine 不会继续执行，而是让出 CPU 时间给其他 goroutine，从而实现了并发执行。</li></ul></blockquote><h4 id="（3）示例大意-7"><a href="#（3）示例大意-7" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>使用 <code>gin.Default()</code> 创建了一个默认的 Gin 引擎 <code>r</code>，用于处理 HTTP 请求和响应。</li><li>定义了两个路由：<ul><li><code>/long_async</code> 路由，使用 <code>r.GET</code> 方法注册了一个处理 GET 请求的处理函数。在这个处理函数中，通过 <code>c.Copy()</code> 创建了一个上下文副本 <code>cCp</code>，然后使用 <code>go</code> 关键字启动了一个 goroutine，在 goroutine 中使用 <code>time.Sleep()</code> 模拟了一个长时间运行的任务，最后在日志中打印了请求路径信息。</li><li><code>/long_sync</code> 路由，同样使用 <code>r.GET</code> 方法注册了一个处理 GET 请求的处理函数。在这个处理函数中，也使用了 <code>time.Sleep()</code> 模拟了一个长时间运行的任务，但没有使用 goroutine，因此不需要拷贝上下文，直接通过 <code>c</code> 访问了请求路径信息，并在日志中打印了请求路径信息。</li></ul></li><li>使用 <code>r.Run(&quot;:8080&quot;)</code> 启动了一个 web 服务器，监听在本地的 8080 端口上，等待接收来自客户端的请求。</li></ol></blockquote><h2 id="13、优雅地重启或停止"><a href="#13、优雅地重启或停止" class="headerlink" title="13、优雅地重启或停止"></a>13、优雅地重启或停止</h2><h4 id="（1）完整代码-11"><a href="#（1）完整代码-11" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// +build go1.8</span><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;context&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;os/signal&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建一个默认的 Gin 路由实例</span><br>    router := gin.Default()<br><br>    <span class="hljs-comment">// 注册一个处理函数到 &quot;/&quot; 路径的 GET 请求</span><br>    router.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 模拟一个长任务，暂停 5 秒</span><br>        time.Sleep(<span class="hljs-number">5</span> * time.Second)<br>        c.String(http.StatusOK, <span class="hljs-string">&quot;Welcome Gin Server&quot;</span>)<br>    &#125;)<br><br>    <span class="hljs-comment">// 创建一个 http.Server 实例，配置监听地址和 Gin 路由作为处理器</span><br>    srv := &amp;http.Server&#123;<br>        Addr:    <span class="hljs-string">&quot;:8080&quot;</span>,<br>        Handler: router,<br>    &#125;<br><br>    <span class="hljs-comment">// 启动一个 goroutine 监听和处理 HTTP 请求</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">// 启动 HTTP 服务器，监听和处理请求</span><br>        <span class="hljs-keyword">if</span> err := srv.ListenAndServe(); err != <span class="hljs-literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;<br>            log.Fatalf(<span class="hljs-string">&quot;listen: %s\n&quot;</span>, err)<br>        &#125;<br>    &#125;()<br><br>    <span class="hljs-comment">// 等待中断信号以优雅地关闭服务器（设置 5 秒的超时时间）</span><br>    quit := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal)<br>    signal.Notify(quit, os.Interrupt)<br>    &lt;-quit<br>    log.Println(<span class="hljs-string">&quot;Shutdown Server ...&quot;</span>)<br><br>    <span class="hljs-comment">// 创建一个超时上下文，设置 5 秒超时</span><br>    ctx, cancel := context.WithTimeout(context.Background(), <span class="hljs-number">5</span>*time.Second)<br>    <span class="hljs-keyword">defer</span> cancel()<br>    <span class="hljs-comment">// 关闭服务器，等待未完成的请求完成或超时</span><br>    <span class="hljs-keyword">if</span> err := srv.Shutdown(ctx); err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(<span class="hljs-string">&quot;Server Shutdown:&quot;</span>, err)<br>    &#125;<br>    log.Println(<span class="hljs-string">&quot;Server exiting&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-11"><a href="#（2）知识点-11" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>srv := &amp;http.Server&#123;        Addr:    &quot;:8080&quot;,        Handler: router,    &#125;</code>创建了一个 <code>http.Server</code> 实例，用于配置 HTTP 服务器的监听地址和请求处理器.<ul><li><code>Addr: &quot;:8080&quot;</code>：指定了服务器监听的地址和端口号。在这里，服务器会监听在本地的 8080 端口上，表示可以通过访问 <code>http://localhost:8080</code> 来与服务器进行通信。</li><li><code>Handler: router</code>：指定了服务器的请求处理器。在这里，使用了 Gin 框架创建的路由实例 <code>router</code> 作为服务器的请求处理器。Gin 路由可以用于注册不同的 HTTP 请求处理函数，根据请求的 URL 路径和 HTTP 方法来进行路由和处理。</li></ul></li><li><code>srv.ListenAndServe()</code>：这是 <code>http.Server</code> 的方法，用于启动服务器并开始监听和处理请求。它会一直在后台运行，直到服务器关闭或发生错误。</li><li><code>err := srv.ListenAndServe()</code>：将 <code>srv.ListenAndServe()</code> 的返回值赋给变量 <code>err</code>，用于捕获可能发生的错误。</li><li><code>err != nil &amp;&amp; err != http.ErrServerClosed</code>：通过条件判断语句检查 <code>err</code> 是否不为空且不等于 <code>http.ErrServerClosed</code>，即判断是否有错误发生且错误不是因为服务器被关闭导致的。</li><li><code>log.Fatalf(&quot;listen: %s\n&quot;, err)</code>：如果有错误发生，使用 <code>log.Fatalf()</code> 方法将错误信息格式化并输出到标准错误（stderr），然后调用 <code>log.Fatal()</code> 方法终止程序的运行。<code>log.Fatalf()</code> 是 <code>log</code> 包的一个函数，它会在输出错误信息后直接调用 <code>os.Exit(1)</code> 终止程序。</li><li><code>quit := make(chan os.Signal)</code>：创建了一个用于接收信号的通道 <code>quit</code>，该通道的类型是 <code>os.Signal</code>，用于接收操作系统发送的信号。</li><li><code>signal.Notify(quit, os.Interrupt)</code>：通过 <code>signal</code> 包的 <code>Notify</code> 函数，将 <code>os.Interrupt</code>（表示中断信号，通常由用户在终端中按下 Ctrl+C 产生）注册到 <code>quit</code> 通道，表示当收到中断信号时，将向 <code>quit</code> 通道发送该信号。</li><li><code>&lt;-quit</code>：通过从 <code>quit</code> 通道中接收信号，代码会一直阻塞在这里，直到接收到中断信号。一旦收到中断信号，代码会继续执行下一行。</li><li><code>ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)</code>：通过 <code>context.WithTimeout</code> 函数创建了一个带有超时的上下文 <code>ctx</code>，超时时间设置为 5 秒。<code>context.Background()</code> 返回一个空的上下文作为父上下文。</li><li><code>defer cancel()</code>：使用 <code>defer</code> 语句延迟调用 <code>cancel()</code> 函数，确保在函数执行完毕后取消上下文，以避免资源泄漏。</li><li><code>if err := srv.Shutdown(ctx); err != nil</code>：调用 <code>srv.Shutdown</code> 方法来优雅地关闭服务器，传入之前创建的带有超时的上下文 <code>ctx</code>。该方法会等待服务器处理完当前的请求后再关闭服务器，以实现优雅关闭。</li><li><code>log.Fatal(&quot;Server Shutdown:&quot;, err)</code>：如果服务器关闭过程中发生错误，使用 <code>log.Fatal</code> 输出错误信息并终止程序运行。</li></ul></blockquote><h4 id="（3）示例大意-8"><a href="#（3）示例大意-8" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><p>首先，创建了一个默认的 Gin 路由实例，注册了一个处理函数到 “&#x2F;“ 路径的 GET 请求，其中模拟了一个长任务，暂停 5 秒，然后返回 “Welcome Gin Server” 字符串作为响应。</p><p>接着，创建了一个 http.Server 实例，配置了监听地址为 “:8080”，并将 Gin 路由作为处理器。</p><p>然后，通过启动一个 goroutine 来监听和处理 HTTP 请求，调用 <code>srv.ListenAndServe()</code> 方法来启动 HTTP 服务器。</p><p>接下来，通过使用 <code>os/signal</code> 包来等待中断信号（如 Ctrl+C），一旦接收到中断信号，服务器将开始优雅地关闭。</p><p>创建了一个超时上下文 <code>ctx</code>，设置了 5 秒的超时时间，并通过 <code>srv.Shutdown()</code> 方法来优雅地关闭服务器，等待未完成的请求完成或超时。</p><p>最后，使用 <code>log.Fatal()</code> 输出错误信息并终止程序运行，或者输出 “Server exiting” 消息表示服务器成功退出。</p></blockquote><h2 id="14、路由组"><a href="#14、路由组" class="headerlink" title="14、路由组"></a>14、路由组</h2><h4 id="（1）完整代码-12"><a href="#（1）完整代码-12" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    router := gin.Default() <span class="hljs-comment">// 创建一个默认的 Gin 路由引擎实例</span><br><br>    <span class="hljs-comment">// 简单的路由组: v1</span><br>    v1 := router.Group(<span class="hljs-string">&quot;/v1&quot;</span>) <span class="hljs-comment">// 创建一个名为 &quot;/v1&quot; 的路由组</span><br>    &#123;<br>        v1.POST(<span class="hljs-string">&quot;/login&quot;</span>, loginEndpoint) <span class="hljs-comment">// 在 &quot;/v1&quot; 路由组下定义了一个 HTTP POST 方法的路由 &quot;/login&quot;，并将该路由与名为 loginEndpoint 的处理函数绑定</span><br>        v1.POST(<span class="hljs-string">&quot;/submit&quot;</span>, submitEndpoint) <span class="hljs-comment">// 在 &quot;/v1&quot; 路由组下定义了一个 HTTP POST 方法的路由 &quot;/submit&quot;，并将该路由与名为 submitEndpoint 的处理函数绑定</span><br>        v1.POST(<span class="hljs-string">&quot;/read&quot;</span>, readEndpoint) <span class="hljs-comment">// 在 &quot;/v1&quot; 路由组下定义了一个 HTTP POST 方法的路由 &quot;/read&quot;，并将该路由与名为 readEndpoint 的处理函数绑定</span><br>    &#125;<br><br>    <span class="hljs-comment">// 简单的路由组: v2</span><br>    v2 := router.Group(<span class="hljs-string">&quot;/v2&quot;</span>) <span class="hljs-comment">// 创建一个名为 &quot;/v2&quot; 的路由组</span><br>    &#123;<br>        v2.POST(<span class="hljs-string">&quot;/login&quot;</span>, loginEndpoint) <span class="hljs-comment">// 在 &quot;/v2&quot; 路由组下定义了一个 HTTP POST 方法的路由 &quot;/login&quot;，并将该路由与名为 loginEndpoint 的处理函数绑定</span><br>        v2.POST(<span class="hljs-string">&quot;/submit&quot;</span>, submitEndpoint) <span class="hljs-comment">// 在 &quot;/v2&quot; 路由组下定义了一个 HTTP POST 方法的路由 &quot;/submit&quot;，并将该路由与名为 submitEndpoint 的处理函数绑定</span><br>        v2.POST(<span class="hljs-string">&quot;/read&quot;</span>, readEndpoint) <span class="hljs-comment">// 在 &quot;/v2&quot; 路由组下定义了一个 HTTP POST 方法的路由 &quot;/read&quot;，并将该路由与名为 readEndpoint 的处理函数绑定</span><br>    &#125;<br><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器并监听在端口 8080</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-12"><a href="#（2）知识点-12" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>router.Group(&quot;/v1&quot;)&#123;...&#125;</code>: 这是创建了一个名为 “&#x2F;v1” 的路由组。路由组可以用来对一组路由进行分组，方便管理和配置共享的中间件。</li></ul></blockquote><h4 id="（3）示例大意-9"><a href="#（3）示例大意-9" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li><code>func main()</code>: 这是 Go 语言的入口函数，是程序的入口点。</li><li><code>router := gin.Default()</code>: 创建了一个默认的 Gin 路由引擎实例。<code>gin.Default()</code> 函数返回一个默认配置的 Gin 路由引擎，包含了常用的中间件，如日志、恢复等。</li><li><code>v1 := router.Group(&quot;/v1&quot;)</code>: 创建了一个名为 “&#x2F;v1” 的路由组。路由组用于将多个路由进行分组管理，可以对这些路由应用相同的中间件、路由组级别的处理函数等。</li><li><code>v1.POST(&quot;/login&quot;, loginEndpoint)</code>: 在 “&#x2F;v1” 路由组下定义了一个 HTTP POST 方法的路由 “&#x2F;login”，并将该路由与名为 loginEndpoint 的处理函数绑定。这表示当客户端发送 HTTP POST 请求到 “&#x2F;v1&#x2F;login” 时，将调用 loginEndpoint 函数来处理该请求。</li><li><code>v1.POST(&quot;/submit&quot;, submitEndpoint)</code>: 在 “&#x2F;v1” 路由组下定义了一个 HTTP POST 方法的路由 “&#x2F;submit”，并将该路由与名为 submitEndpoint 的处理函数绑定。这表示当客户端发送 HTTP POST 请求到 “&#x2F;v1&#x2F;submit” 时，将调用 submitEndpoint 函数来处理该请求。</li><li><code>v1.POST(&quot;/read&quot;, readEndpoint)</code>: 在 “&#x2F;v1” 路由组下定义了一个 HTTP POST 方法的路由 “&#x2F;read”，并将该路由与名为 readEndpoint 的处理函数绑定。这表示当客户端发送 HTTP POST 请求到 “&#x2F;v1&#x2F;read” 时，将调用 readEndpoint 函数来处理该请求。</li><li><code>v2 := router.Group(&quot;/v2&quot;)</code>: 创建了一个名为 “&#x2F;v2” 的路由组，类似于上面的 “&#x2F;v1” 路由组。</li><li><code>v2.POST(&quot;/login&quot;, loginEndpoint)</code>: 在 “&#x2F;v2” 路由组下定义了一个 HTTP POST 方法的路由 “&#x2F;login”，并将该路由与名为 loginEndpoint 的处理函数绑定。</li><li><code>v2.POST(&quot;/submit&quot;, submitEndpoint)</code>: 在 “&#x2F;v2” 路由组下定义了一个 HTTP POST 方法的路由 “&#x2F;submit”，并将该路由与名为 submitEndpoint 的处理函数绑定。</li><li><code>v2.POST(&quot;/read&quot;, readEndpoint)</code>: 在 “&#x2F;v2” 路由组下定义了一个 HTTP POST 方法的路由 “&#x2F;read”，并将该路由与名为 readEndpoint 的处理函数绑定。</li><li><code>router.Run(&quot;:8080&quot;)</code>: 启动 HTTP 服务器并监听在端口 8080。一旦服务器启动，就会开始接受来自客户端的请求，并根据定义的路由规则和处理函数来处理这些请求。</li></ol></blockquote><h2 id="15、如何记录日志"><a href="#15、如何记录日志" class="headerlink" title="15、如何记录日志"></a>15、如何记录日志</h2><h4 id="（1）完整代码-13"><a href="#（1）完整代码-13" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 禁用控制台颜色，将日志写入文件时不需要控制台颜色。</span><br>    gin.DisableConsoleColor()<br><br>    <span class="hljs-comment">// 记录到文件。</span><br>    f, _ := os.Create(<span class="hljs-string">&quot;gin.log&quot;</span>) <span class="hljs-comment">// 创建一个名为 &quot;gin.log&quot; 的文件用于记录日志</span><br>    gin.DefaultWriter = io.MultiWriter(f) <span class="hljs-comment">// 设置 Gin 的默认日志写入器为同时写入文件 f</span><br><br>    <span class="hljs-comment">// 如果需要同时将日志写入文件和控制台，请使用以下代码。</span><br>    <span class="hljs-comment">// gin.DefaultWriter = io.MultiWriter(f, os.Stdout)</span><br><br>    router := gin.Default() <span class="hljs-comment">// 创建一个默认的 Gin 路由引擎实例</span><br>    router.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123; <span class="hljs-comment">// 定义一个 HTTP GET 方法的路由 &quot;/ping&quot;</span><br>        c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;pong&quot;</span>) <span class="hljs-comment">// 在请求处理函数中返回字符串 &quot;pong&quot;</span><br>    &#125;)<br><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器并监听在端口 8080</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-13"><a href="#（2）知识点-13" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><p><code>gin.DisableConsoleColor()</code>: 禁用控制台颜色输出，这样在将日志写入文件时不会包含控制台颜色信息。</p></li><li><p><code>f, _ := os.Create(&quot;gin.log&quot;)</code>: 创建一个名为 “gin.log” 的文件用于记录日志，并将文件对象保存在变量 f 中。如果创建文件出现错误，错误会被忽略。</p></li><li><p><code>gin.DefaultWriter = io.MultiWriter(f)</code>: 将文件 f 设置为 Gin 框架的默认日志写入器，这样日志将同时写入文件 f。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">wd, err := os.Getwd()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;获取当前工作目录失败:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>logFilePath := wd + <span class="hljs-string">&quot;/gin.log&quot;</span><br>fmt.Println(<span class="hljs-string">&quot;gin.log 文件路径:&quot;</span>, logFilePath)<br></code></pre></td></tr></table></figure><p>可以用这段代码获取当前工作目录，<code>gin.log</code>文件就在该路径下。</p></li></ul></blockquote><h4 id="（3）示例大意-10"><a href="#（3）示例大意-10" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>调用 <code>gin.DisableConsoleColor()</code> 禁用控制台颜色输出，因为日志将被写入文件，不需要控制台颜色。</li><li>调用 <code>os.Create(&quot;gin.log&quot;)</code> 创建一个名为 “gin.log” 的文件，用于记录日志，并将返回的文件对象赋值给变量 <code>f</code>。</li><li>将 <code>f</code> 设置为 Gin 框架的默认日志写入器，通过调用 <code>gin.DefaultWriter = io.MultiWriter(f)</code>。这样，Gin 框架的日志将同时写入 <code>gin.log</code> 文件和控制台（如果需要同时写入文件和控制台，可以注释掉当前行，将下一行的注释取消）。</li><li>调用 <code>gin.Default()</code> 创建一个默认的 Gin 路由引擎实例，并将返回的引擎对象赋值给变量 <code>router</code>。</li><li>使用 <code>router.GET(&quot;/ping&quot;, ...)</code> 定义一个 HTTP GET 方法的路由 “&#x2F;ping”，并传入一个请求处理函数，该函数会在收到请求时返回字符串 “pong”。</li><li>调用 <code>router.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器，并监听在端口 8080，等待接收客户端请求。一旦接收到请求，就会调用之前定义的请求处理函数进行处理。</li></ol></blockquote><h2 id="16、HTML渲染"><a href="#16、HTML渲染" class="headerlink" title="16、HTML渲染"></a>16、HTML渲染</h2><h4 id="（1）完整代码-14"><a href="#（1）完整代码-14" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><h4 id="（2）代码解释"><a href="#（2）代码解释" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><h2 id="17、HTTP2-server-推送"><a href="#17、HTTP2-server-推送" class="headerlink" title="17、HTTP2 server 推送"></a>17、HTTP2 server 推送</h2><h4 id="（1）完整代码-15"><a href="#（1）完整代码-15" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;html/template&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">// 定义一个 HTML 模板</span><br><span class="hljs-keyword">var</span> html = template.Must(template.New(<span class="hljs-string">&quot;https&quot;</span>).Parse(<span class="hljs-string">`</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">  &lt;title&gt;Https Test&lt;/title&gt;</span><br><span class="hljs-string">  &lt;script src=&quot;/assets/app.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">  &lt;h1 style=&quot;color:red;&quot;&gt;Welcome, Ginner!&lt;/h1&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">`</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default() <span class="hljs-comment">// 创建一个默认的 Gin 路由引擎实例</span><br>    r.Static(<span class="hljs-string">&quot;/assets&quot;</span>, <span class="hljs-string">&quot;./assets&quot;</span>) <span class="hljs-comment">// 将静态文件夹 &quot;./assets&quot; 注册为 &quot;/assets&quot; 的静态资源路径</span><br>    r.SetHTMLTemplate(html) <span class="hljs-comment">// 设置 HTML 模板</span><br><br>    r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123; <span class="hljs-comment">// 定义一个 HTTP GET 方法的路由 &quot;/&quot;</span><br>        <span class="hljs-keyword">if</span> pusher := c.Writer.Pusher(); pusher != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 判断是否支持服务器推送</span><br>            <span class="hljs-comment">// 使用 pusher.Push() 做服务器推送</span><br>            <span class="hljs-keyword">if</span> err := pusher.Push(<span class="hljs-string">&quot;/assets/app.js&quot;</span>, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;<br>                log.Printf(<span class="hljs-string">&quot;Failed to push: %v&quot;</span>, err) <span class="hljs-comment">// 如果推送失败，则记录日志</span><br>            &#125;<br>        &#125;<br>        c.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;https&quot;</span>, gin.H&#123; <span class="hljs-comment">// 返回 HTML 模板，并设置状态码和数据</span><br>            <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>        &#125;)<br>    &#125;)<br><br>    <span class="hljs-comment">// 监听并在 https://127.0.0.1:8080 上启动服务，使用 TLS 加密</span><br>    r.RunTLS(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-string">&quot;./testdata/server.pem&quot;</span>, <span class="hljs-string">&quot;./testdata/server.key&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-14"><a href="#（2）知识点-14" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>var html = template.Must(template.New(&quot;https&quot;).Parse(...))</code>: 定义了一个名为 <code>html</code> 的 HTML 模板。<code>template.Must</code> 是一个辅助函数，用于将模板解析为 <code>template.Template</code> 对象，并在解析过程中检查是否出错。</li><li><code>r.Static(&quot;/assets&quot;, &quot;./assets&quot;)</code>: 将静态文件夹 <code>&quot;./assets&quot;</code> 注册为 “&#x2F;assets” 的静态资源路径，这样当客户端请求 “&#x2F;assets&#x2F;app.js” 时，会返回位于本地文件系统的 “.&#x2F;assets&#x2F;app.js” 文件作为响应。</li><li><code>r.SetHTMLTemplate(html)</code>: 设置之前定义的 <code>html</code> 模板为 Gin 框架的 HTML 模板。</li><li><code>r.GET(&quot;/&quot;, func(c *gin.Context) &#123; ... &#125;)</code>: 定义一个 HTTP GET 方法的路由 “&#x2F;“，并传入一个请求处理函数，该函数会在收到请求时执行。在这个例子中，请求处理函数中通过 <code>c.Writer.Pusher()</code> 检查是否支持服务器推送。如果支持，通过 <code>pusher.Push(&quot;/assets/app.js&quot;, nil)</code> 进行服务器推送，推送的资源路径为 “&#x2F;assets&#x2F;app.js”。然后使用 <code>c.HTML()</code> 返回之前定义的 HTML 模板，并设置状态码为 200 和数据为 <code>gin.H&#123;&quot;status&quot;: &quot;success&quot;&#125;</code>。</li><li><code>r.RunTLS(&quot;:8080&quot;, &quot;./testdata/server.pem&quot;, &quot;./testdata/server.key&quot;)</code>: 启动 HTTP 服务器，并监听在 8080 端口，并使用 TLS 加密进行安全通信。第二个参数 “.&#x2F;testdata&#x2F;server.pem” 是 TLS 证书文件的路径，第三个参数 “.&#x2F;testdata&#x2F;server.key” 是 TLS 私钥文件的路径，用于在服务器端进行 TLS 握手和加密通信。这样，服务器将通过 HTTPS 监听客户端的请求。</li></ul></blockquote><h4 id="（3）示例大意-11"><a href="#（3）示例大意-11" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>定义 HTML 模板：使用 <code>template.Must</code> 函数创建了一个名为 “https” 的 HTML 模板，用于返回给客户端。</li><li>创建 Gin 路由引擎实例：使用 <code>gin.Default()</code> 函数创建了一个默认的 Gin 路由引擎实例。</li><li>注册静态文件路径：使用 <code>r.Static()</code> 方法将静态文件夹 “.&#x2F;assets” 注册为 “&#x2F;assets” 的静态资源路径，使得客户端可以通过访问 “&#x2F;assets” 路径来获取静态文件。</li><li>设置 HTML 模板：使用 <code>r.SetHTMLTemplate()</code> 方法设置了之前定义的 HTML 模板。</li><li>定义根路由处理函数：使用 <code>r.GET()</code> 方法定义了一个 HTTP GET 方法的根路由处理函数，该处理函数会返回之前定义的 HTML 模板，并在响应头中设置了支持服务器推送的信息。</li><li>启动 HTTPS 服务器：使用 <code>r.RunTLS()</code> 方法在 “<a href="https://127.0.0.1:8080/">https://127.0.0.1:8080</a>“ 地址上启动了一个监听 TLS 加密的 HTTPS 服务器，使用了之前定义的 TLS 证书和私钥文件。</li></ol></blockquote><h2 id="18、-JSONP"><a href="#18、-JSONP" class="headerlink" title="18、 JSONP"></a>18、 JSONP</h2><blockquote><p>使用 JSONP 向不同域的服务器请求数据。如果查询参数存在回调，则将回调添加到响应体中。</p></blockquote><h4 id="（1）完整代码-16"><a href="#（1）完整代码-16" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;net/http&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>r.GET(<span class="hljs-string">&quot;/JSONP&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>data := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br>&#125;<br><br><span class="hljs-comment">// 获取 callback 参数值</span><br>callback := c.Query(<span class="hljs-string">&quot;callback&quot;</span>)<br><br><span class="hljs-comment">// 使用 JSONP 格式返回数据</span><br>c.JSONP(http.StatusOK, gin.H&#123;<br><span class="hljs-string">&quot;callback&quot;</span>: callback,<br><span class="hljs-string">&quot;data&quot;</span>:     data,<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-15"><a href="#（2）知识点-15" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>c.Query(&quot;callback&quot;)</code>: <code>c.Query</code> 方法用于获取 HTTP 请求中的查询参数。这里使用 <code>c.Query(&quot;callback&quot;)</code> 获取了名为 “callback” 的查询参数的值</li><li><code>c.JSONP(http.StatusOK, gin.H&#123;...&#125;)</code>: <code>c.JSONP</code> 方法用于将 JSON 数据以 JSONP 格式返回给客户端。<code>http.StatusOK</code> 表示 HTTP 响应状态码为 200，<code>gin.H&#123;...&#125;</code> 表示要返回的 JSON 数据。这里返回了一个包含 “callback” 和 “data” 两个字段的 JSON 数据，其中 “callback” 字段的值为上一步获取的查询参数 “callback” 的值，”data” 字段的值为一个包含 “foo” 字段的 map 数据。</li></ul></blockquote><h2 id="19、Multipart-x2F-Urlencoded-绑定"><a href="#19、Multipart-x2F-Urlencoded-绑定" class="headerlink" title="19、Multipart&#x2F;Urlencoded 绑定"></a>19、Multipart&#x2F;Urlencoded 绑定</h2><h4 id="（1）完整代码-17"><a href="#（1）完整代码-17" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> LoginForm <span class="hljs-keyword">struct</span> &#123;<br>User     <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;user&quot; binding:&quot;required&quot;`</span>     <span class="hljs-comment">// 表单字段 user，使用 binding:&quot;required&quot; 标签表示必填</span><br>Password <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;password&quot; binding:&quot;required&quot;`</span> <span class="hljs-comment">// 表单字段 password，使用 binding:&quot;required&quot; 标签表示必填</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br>router.POST(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 使用 c.ShouldBind 方法将请求数据绑定到 LoginForm 结构体</span><br><span class="hljs-keyword">var</span> form LoginForm<br><span class="hljs-keyword">if</span> c.ShouldBind(&amp;form) == <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 如果绑定成功</span><br><span class="hljs-keyword">if</span> form.User == <span class="hljs-string">&quot;user&quot;</span> &amp;&amp; form.Password == <span class="hljs-string">&quot;password&quot;</span> &#123; <span class="hljs-comment">// 判断用户名和密码是否正确</span><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;you are logged in&quot;</span>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.JSON(<span class="hljs-number">401</span>, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.JSON(<span class="hljs-number">401</span>, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;missing params&quot;</span>&#125;) <span class="hljs-comment">// 如果请求数据缺少必填字段，则返回错误状态</span><br>&#125;<br>&#125;)<br>router.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器并监听在端口 8080</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-16"><a href="#（2）知识点-16" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>type LoginForm struct &#123; ... &#125;</code>: <code>LoginForm</code> 是一个自定义的结构体类型，用于表示登录表单的数据结构。结构体中包含了两个字段：<code>User</code> 和 <code>Password</code>，分别对应表单中的 “user” 和 “password” 字段。</li><li><code>router.POST(&quot;/login&quot;, func(c *gin.Context) &#123; ... &#125;)</code>: <code>router.POST</code> 方法注册了一个 HTTP POST 方法的路由，路由路径为 “&#x2F;login”。当客户端发送 HTTP POST 请求到 “&#x2F;login” 路径时，Gin 会调用传入的匿名函数作为该路由的处理函数。</li><li><code>c.ShouldBind(&amp;form)</code>: <code>c.ShouldBind</code> 方法用于将 HTTP 请求中的数据绑定到指定的结构体对象。这里使用 <code>c.ShouldBind(&amp;form)</code> 将请求数据绑定到 <code>form</code> 变量，该变量是上一步定义的 <code>LoginForm</code> 结构体对象。</li><li><code>c.JSON(200, gin.H&#123;...&#125;)</code>: <code>c.JSON</code> 方法用于将 JSON 数据作为响应发送给客户端。<code>200</code> 表示 HTTP 响应状态码为 200，<code>gin.H&#123;...&#125;</code> 表示要返回的 JSON 数据。这里返回了一个包含 “status” 字段的 JSON 数据，字段的值根据登录表单的用户名和密码进行判断而定。</li><li><code>c.JSON(401, gin.H&#123;...&#125;)</code>: 同样地，<code>c.JSON</code> 方法也可以用于返回 HTTP 响应状态码为 401 的错误响应。这里通过 <code>c.JSON(401, gin.H&#123;&quot;status&quot;: &quot;unauthorized&quot;&#125;)</code> 和 <code>c.JSON(401, gin.H&#123;&quot;status&quot;: &quot;missing params&quot;&#125;)</code> 分别返回了未授权和缺少必填字段的错误信息。</li></ul></blockquote><h4 id="（3）示例大意-12"><a href="#（3）示例大意-12" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>定义了一个 LoginForm 结构体，用于绑定 POST 请求中的表单数据。该结构体包含了两个字段，分别是 User 和 Password，使用了 Gin 框架的表单绑定标签进行验证，要求这两个字段都是必填的。</li><li>在 main 函数中创建了一个 Gin 路由实例 router。</li><li>设置了一个 POST 路由 “&#x2F;login”，并定义了处理函数。在该处理函数中，使用 c.ShouldBind 方法将请求数据绑定到 LoginForm 结构体。</li><li>如果绑定成功，即表单数据满足要求，那么进一步判断用户名和密码是否正确，如果正确，则返回 HTTP 状态码 200 和一个 JSON 格式的成功消息；否则，返回 HTTP 状态码 401 和一个 JSON 格式的未授权消息。</li><li>如果请求数据缺少必填字段，即绑定失败，那么返回 HTTP 状态码 401 和一个 JSON 格式的缺少参数消息。</li><li>最后，通过调用 router.Run(“:8080”) 启动 HTTP 服务器并监听在端口 8080，等待客户端请求。</li></ol></blockquote><h2 id="20、表单"><a href="#20、表单" class="headerlink" title="20、表单"></a>20、表单</h2><h4 id="（1）完整代码-18"><a href="#（1）完整代码-18" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br><br>router.POST(<span class="hljs-string">&quot;/form_post&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>message := c.PostForm(<span class="hljs-string">&quot;message&quot;</span>) <span class="hljs-comment">// 获取表单中的 &quot;message&quot; 字段值</span><br>nick := c.DefaultPostForm(<span class="hljs-string">&quot;nick&quot;</span>, <span class="hljs-string">&quot;anonymous&quot;</span>) <span class="hljs-comment">// 获取表单中的 &quot;nick&quot; 字段值，如果为空则默认为 &quot;anonymous&quot;</span><br><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;status&quot;</span>:  <span class="hljs-string">&quot;posted&quot;</span>,<br><span class="hljs-string">&quot;message&quot;</span>: message,<br><span class="hljs-string">&quot;nick&quot;</span>:    nick,<br>&#125;)<br>&#125;)<br>router.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器并监听在端口 8080</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）知识点-17"><a href="#（2）知识点-17" class="headerlink" title="（2）知识点"></a>（2）知识点</h4><blockquote><ul><li><code>c.PostForm(&quot;message&quot;)</code>: 使用 <code>c</code> 上下文对象的 <code>PostForm</code> 方法获取表单中名为 “message” 的字段的值。</li><li><code>c.DefaultPostForm(&quot;nick&quot;, &quot;anonymous&quot;)</code>: 使用 <code>c</code> 上下文对象的 <code>DefaultPostForm</code> 方法获取表单中名为 “nick” 的字段的值，如果该字段为空，则返回默认值 “anonymous”。</li></ul></blockquote><h4 id="（3）示例大意-13"><a href="#（3）示例大意-13" class="headerlink" title="（3）示例大意"></a>（3）示例大意</h4><blockquote><ol><li>导入了 “github.com&#x2F;gin-gonic&#x2F;gin” 包，引入 Gin 框架的依赖。</li><li>创建了一个 Gin 路由引擎，使用了默认的中间件。</li><li>定义了一个处理 POST 请求的路由 “&#x2F;form_post”，并传入一个处理函数。</li><li>在处理函数中，使用了 c.PostForm 方法获取表单中的 “message” 字段值，并保存到变量 message 中。</li><li>使用了 c.DefaultPostForm 方法获取表单中的 “nick” 字段值，并保存到变量 nick 中，如果 “nick” 字段为空，则默认值为 “anonymous”。</li><li>使用了 c.JSON 方法返回 JSON 格式的响应，包含了三个键值对： “status”、”message” 和 “nick”。</li><li>调用 router.Run 方法启动 HTTP 服务器并监听在端口 8080，等待客户端的请求。</li></ol></blockquote><h2 id="21、只绑定-url-查询字符串"><a href="#21、只绑定-url-查询字符串" class="headerlink" title="21、只绑定 url 查询字符串"></a>21、只绑定 url 查询字符串</h2><h4 id="（1）完整代码-19"><a href="#（1）完整代码-19" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>Name    <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;name&quot;`</span><br>Address <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;address&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br><br><span class="hljs-comment">// 定义路由 &quot;/testing&quot;，并将请求交给 startPage 函数处理</span><br>router.Any(<span class="hljs-string">&quot;/testing&quot;</span>, startPage)<br><br>router.Run(<span class="hljs-string">&quot;:8085&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器并监听在端口 8085</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">startPage</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">var</span> person Person<br><br><span class="hljs-comment">// 使用 ShouldBindQuery 方法将请求中的 Query String 绑定到 person 对象</span><br><span class="hljs-keyword">if</span> c.ShouldBindQuery(&amp;person) == <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;====== Only Bind By Query String ======&quot;</span>)<br>log.Println(person.Name)<br>log.Println(person.Address)<br>&#125;<br><br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Success&quot;</span>) <span class="hljs-comment">// 返回 &quot;Success&quot; 字符串作为响应</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-1"><a href="#（2）代码解释-1" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用了 Gin 框架创建了一个 HTTP 服务器，并定义了一个路由处理函数 <code>startPage</code> 用于处理 “&#x2F;testing” 的请求，可以处理 GET、POST、PUT、DELETE 等任何请求方法。在路由处理函数中，通过 <code>c.ShouldBindQuery()</code> 方法将请求中的 Query String 绑定到 <code>person</code> 对象，其中 <code>person.Name</code> 和 <code>person.Address</code> 分别对应了请求中的 “name” 和 “address” 参数。</p><p>接着使用 <code>log.Println()</code> 方法输出绑定后的字段值到控制台。</p><p>最后，通过调用 <code>c.String()</code> 方法返回状态码 200 和 “Success” 字符串作为响应，表示处理成功。HTTP 服务器监听在端口 8085，并通过 <code>router.Run()</code> 启动。</p></blockquote><h2 id="22、路径中的参数"><a href="#22、路径中的参数" class="headerlink" title="22、路径中的参数"></a>22、路径中的参数</h2><h4 id="（1）完整代码-20"><a href="#（1）完整代码-20" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;net/http&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br><br><span class="hljs-comment">// 这个处理函数将匹配 /user/john，但不会匹配 /user/ 或 /user</span><br>router.GET(<span class="hljs-string">&quot;/user/:name&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>name := c.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>c.String(http.StatusOK, <span class="hljs-string">&quot;Hello %s&quot;</span>, name)<br>&#125;)<br><br><span class="hljs-comment">// 这个处理函数将匹配 /user/john/ 和 /user/john/send</span><br><span class="hljs-comment">// 如果没有其他路由匹配 /user/john，它将重定向到 /user/john/</span><br>router.GET(<span class="hljs-string">&quot;/user/:name/*action&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>name := c.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>action := c.Param(<span class="hljs-string">&quot;action&quot;</span>)<br>message := name + <span class="hljs-string">&quot; is &quot;</span> + action<br>c.String(http.StatusOK, message)<br>&#125;)<br><br>router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-2"><a href="#（2）代码解释-2" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用了 Gin 框架创建了一个 HTTP 服务器，并定义了两个路由处理函数。第一个处理函数通过路由 “&#x2F;user&#x2F;:name” 匹配 URL 中的 “:name” 参数，并将其值绑定到变量 name 中，然后通过 <code>c.String()</code> 方法返回 “Hello %s” 字符串，其中 %s 会被 name 的值替代。</p><p>第二个处理函数通过路由 “&#x2F;user&#x2F;:name&#x2F;*action” 匹配 URL 中的 “:name” 参数和 “*action” 参数，”*action” 表示匹配 “&#x2F;user&#x2F;:name” 后面的任意路径，将其值绑定到变量 name 和 action 中，然后通过 <code>c.String()</code> 方法返回包含 name 和 action 的消息字符串。</p><p>在 Gin 框架中，路由参数可以通过 <code>:paramName</code> 的方式定义，表示在 URL 中匹配该位置的任意字符串，并将其值作为参数传递给路由处理函数。同时，Gin 还支持通配符 “*”，可以匹配任意路径片段，用于处理较为复杂的路由需求。</p></blockquote><h2 id="23、PureJSON"><a href="#23、PureJSON" class="headerlink" title="23、PureJSON"></a>23、PureJSON</h2><blockquote><p>​通常，JSON 使用 unicode 替换特殊 HTML 字符，例如 &lt; 变为 \ u003c。如果要按字面对这些字符进行编码，则可以使用 PureJSON。Go 1.6 及更低版本无法使用此功能。</p></blockquote><h4 id="（1）完整代码-21"><a href="#（1）完整代码-21" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br><span class="hljs-comment">// 提供 unicode 实体</span><br>r.GET(<span class="hljs-string">&quot;/json&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;html&quot;</span>: <span class="hljs-string">&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;</span>,<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 提供字面字符</span><br>r.GET(<span class="hljs-string">&quot;/purejson&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.PureJSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;html&quot;</span>: <span class="hljs-string">&quot;&lt;b&gt;Hello, world!&lt;/b&gt;&quot;</span>,<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-3"><a href="#（2）代码解释-3" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用了 Gin 框架创建了一个 HTTP 服务器，并定义了三个路由处理函数。其中 <code>/json</code> 路由使用 <code>c.JSON()</code> 方法返回 JSON 格式的响应体，其中包含一个名为 “html” 的字段，值为 “<b>Hello, world!</b>“。<code>c.JSON()</code> 方法会将响应体序列化为 JSON 格式并设置相应的 Content-Type 头，使得返回的响应体在客户端以 JSON 格式展示。</p><p>而 <code>/purejson</code> 路由使用 <code>c.PureJSON()</code> 方法同样返回 JSON 格式的响应体，但不会对响应体中的特殊字符进行转义，保留原始字符。这在某些情况下可能有用，例如当需要返回包含 HTML 标签等特殊字符的响应体时。</p><p>最后，通过调用 <code>r.Run()</code> 方法在 0.0.0.0:8080 上启动 HTTP 服务器并监听请求。Gin 框架的 <code>Run()</code> 方法会自动选择可用的端口并启动服务器。</p></blockquote><h2 id="24、POST-表单中的-URL-参数"><a href="#24、POST-表单中的-URL-参数" class="headerlink" title="24、POST 表单中的 URL 参数"></a>24、POST 表单中的 URL 参数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">POST /post?id=<span class="hljs-number">1234</span>&amp;page=<span class="hljs-number">1</span> HTTP/<span class="hljs-number">1.1</span><br>Content-Type: application/x-www-form-urlencoded<br><br>name=manu&amp;message=this_is_great<br></code></pre></td></tr></table></figure><h4 id="（1）完整代码-22"><a href="#（1）完整代码-22" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br><br>router.POST(<span class="hljs-string">&quot;/post&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br>id := c.Query(<span class="hljs-string">&quot;id&quot;</span>)               <span class="hljs-comment">// 获取 URL 查询参数 &quot;id&quot;</span><br>page := c.DefaultQuery(<span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>) <span class="hljs-comment">// 获取 URL 查询参数 &quot;page&quot;，如果不存在则默认为 &quot;0&quot;</span><br>name := c.PostForm(<span class="hljs-string">&quot;name&quot;</span>)         <span class="hljs-comment">// 获取 POST 表单字段 &quot;name&quot;</span><br>message := c.PostForm(<span class="hljs-string">&quot;message&quot;</span>)   <span class="hljs-comment">// 获取 POST 表单字段 &quot;message&quot;</span><br><br>fmt.Printf(<span class="hljs-string">&quot;id: %s; page: %s; name: %s; message: %s&quot;</span>, id, page, name, message)<br>&#125;)<br>router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-4"><a href="#（2）代码解释-4" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用了 Gin 框架创建了一个 HTTP 服务器，并定义了一个处理 POST 请求的路由处理函数。该处理函数从请求中获取 URL 查询参数 “id” 和 “page”，以及 POST 表单字段 “name” 和 “message” 的值，并将其打印输出。</p><p>使用 <code>c.Query()</code> 方法可以获取 URL 查询参数的值，其中参数为参数名。而使用 <code>c.PostForm()</code> 方法可以获取 POST 表单字段的值，同样参数为字段名。如果 POST 表单中没有指定的字段，可以使用 <code>c.DefaultPostForm()</code> 方法设置一个默认值。</p><p>最后，通过调用 <code>router.Run()</code> 方法在 “:8080” 上启动 HTTP 服务器并监听请求。Gin 框架的 <code>Run()</code> 方法会自动选择可用的端口并启动服务器。</p></blockquote><h2 id="25、查询字符串参数"><a href="#25、查询字符串参数" class="headerlink" title="25、查询字符串参数"></a>25、查询字符串参数</h2><h4 id="（1）完整代码-23"><a href="#（1）完整代码-23" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br><br><span class="hljs-comment">// 使用现有的基础请求对象解析查询字符串参数。</span><br><span class="hljs-comment">// 示例 URL： /welcome?firstname=Jane&amp;lastname=Doe</span><br>router.GET(<span class="hljs-string">&quot;/welcome&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>firstname := c.DefaultQuery(<span class="hljs-string">&quot;firstname&quot;</span>, <span class="hljs-string">&quot;Guest&quot;</span>) <span class="hljs-comment">// 获取查询参数 &quot;firstname&quot;，如果不存在则默认为 &quot;Guest&quot;</span><br>lastname := c.Query(<span class="hljs-string">&quot;lastname&quot;</span>)                   <span class="hljs-comment">// 获取查询参数 &quot;lastname&quot;</span><br><br>c.String(http.StatusOK, <span class="hljs-string">&quot;Hello %s %s&quot;</span>, firstname, lastname)<br>&#125;)<br>router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-5"><a href="#（2）代码解释-5" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用了 Gin 框架创建了一个 HTTP 服务器，并定义了一个处理 GET 请求的路由处理函数。该处理函数从 URL 查询参数 “firstname” 和 “lastname” 的值，并将其组合成字符串后作为响应返回。</p><p>使用 <code>c.Query()</code> 方法可以获取 URL 查询参数的值，其中参数为参数名。而使用 <code>c.DefaultQuery()</code> 方法可以获取 URL 查询参数的值，并设置一个默认值，当查询参数不存在时使用。这在示例中用于获取 “firstname” 的值，并设置默认值为 “Guest”。</p><p>Gin 框架的 <code>Run()</code> 方法会自动选择可用的端口并启动 HTTP 服务器，通过调用 <code>router.Run(&quot;:8080&quot;)</code> 在 “:8080” 上启动 HTTP 服务器并监听请求。</p></blockquote><h2 id="26、重定向"><a href="#26、重定向" class="headerlink" title="26、重定向"></a>26、重定向</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    c.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;http://www.google.com/&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="（1）完整代码-24"><a href="#（1）完整代码-24" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    c.Request.URL.Path = <span class="hljs-string">&quot;/test2&quot;</span><br>    r.HandleContext(c)<br>&#125;)<br>r.GET(<span class="hljs-string">&quot;/test2&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>    c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;hello&quot;</span>: <span class="hljs-string">&quot;world&quot;</span>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-6"><a href="#（2）代码解释-6" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>​当访问 <code>/test</code> 时，请求的 URL 路径被修改为 <code>/test2</code>，然后再次处理请求。由于 <code>/test2</code> 路径有对应的路由处理函数，所以会返回 <code>&#123;&quot;hello&quot;: &quot;world&quot;&#125;</code> JSON 响应。</p></blockquote><h2 id="27、运行多个服务"><a href="#27、运行多个服务" class="headerlink" title="27、运行多个服务"></a>27、运行多个服务</h2><h4 id="（1）完整代码-25"><a href="#（1）完整代码-25" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;golang.org/x/sync/errgroup&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>g errgroup.Group <span class="hljs-comment">// 全局 errgroup.Group 对象，用于管理多个 Goroutine</span><br>)<br><br><span class="hljs-comment">// 创建并返回一个 Gin 实例，作为 server01 的路由处理器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">router01</span><span class="hljs-params">()</span></span> http.Handler &#123;<br>e := gin.New() <span class="hljs-comment">// 创建一个新的 Gin 实例</span><br>e.Use(gin.Recovery()) <span class="hljs-comment">// 添加 Recovery 中间件，用于处理请求中的错误</span><br>e.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123; <span class="hljs-comment">// 定义根路径的 GET 请求处理函数</span><br>c.JSON(<br>http.StatusOK,<br>gin.H&#123;<br><span class="hljs-string">&quot;code&quot;</span>:  http.StatusOK,<br><span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Welcome server 01&quot;</span>,<br>&#125;,<br>)<br>&#125;)<br><br><span class="hljs-keyword">return</span> e<br>&#125;<br><br><span class="hljs-comment">// 创建并返回一个 Gin 实例，作为 server02 的路由处理器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">router02</span><span class="hljs-params">()</span></span> http.Handler &#123;<br>e := gin.New() <span class="hljs-comment">// 创建一个新的 Gin 实例</span><br>e.Use(gin.Recovery()) <span class="hljs-comment">// 添加 Recovery 中间件，用于处理请求中的错误</span><br>e.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123; <span class="hljs-comment">// 定义根路径的 GET 请求处理函数</span><br>c.JSON(<br>http.StatusOK,<br>gin.H&#123;<br><span class="hljs-string">&quot;code&quot;</span>:  http.StatusOK,<br><span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Welcome server 02&quot;</span>,<br>&#125;,<br>)<br>&#125;)<br><br><span class="hljs-keyword">return</span> e<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>server01 := &amp;http.Server&#123;<br>Addr:         <span class="hljs-string">&quot;:8080&quot;</span>,         <span class="hljs-comment">// server01 监听的地址和端口</span><br>Handler:      router01(),      <span class="hljs-comment">// server01 使用 router01 作为路由处理器</span><br>ReadTimeout:  <span class="hljs-number">5</span> * time.Second, <span class="hljs-comment">// server01 读取超时时间</span><br>WriteTimeout: <span class="hljs-number">10</span> * time.Second, <span class="hljs-comment">// server01 写入超时时间</span><br>&#125;<br><br>server02 := &amp;http.Server&#123;<br>Addr:         <span class="hljs-string">&quot;:8081&quot;</span>,         <span class="hljs-comment">// server02 监听的地址和端口</span><br>Handler:      router02(),      <span class="hljs-comment">// server02 使用 router02 作为路由处理器</span><br>ReadTimeout:  <span class="hljs-number">5</span> * time.Second, <span class="hljs-comment">// server02 读取超时时间</span><br>WriteTimeout: <span class="hljs-number">10</span> * time.Second, <span class="hljs-comment">// server02 写入超时时间</span><br>&#125;<br><br><span class="hljs-comment">// 使用 errgroup 管理多个 Goroutine，分别启动 server01 和 server02</span><br>g.Go(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> server01.ListenAndServe()<br>&#125;)<br><br>g.Go(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> server02.ListenAndServe()<br>&#125;)<br><br><span class="hljs-keyword">if</span> err := g.Wait(); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 等待两个 Goroutine 结束</span><br>log.Fatal(err) <span class="hljs-comment">// 如果有错误发生，则输出错误日志</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-7"><a href="#（2）代码解释-7" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用 Gin 框架创建了两个独立的 HTTP 服务器，分别监听不同的端口。<code>router01</code> 和 <code>router02</code> 函数分别定义了两个 Gin 路由处理器，分别处理根路径的 GET 请求，并返回不同的 JSON 响应。</p><p>通过 <code>errgroup</code> 包管理两个 Goroutine，分别启动了 <code>server01</code> 和 <code>server02</code> 的监听操作。每个服务器都使用了不同的监听地址和端口，以及不同的路由处理器。</p><p>如果有错误发生，<code>errgroup.Wait()</code> 方法会等待两个 Goroutine 结束，并返回错误。如果返回的错误不为空，则使用 <code>log.Fatal()</code> 输出错误日志并终止程序运行。</p><p>这段代码的主要作用是创建并同时启动两个独立的 HTTP 服务器，它们分别监听不同的端口，并使用 Gin 框架处理路由请求。使用 <code>errgroup</code> 包可以方便地管理多个 Goroutine，并在任何一个 Goroutine 发生错误时及时捕获和处理。这种方式可以有效地提高服务器的可靠性和稳定性。</p></blockquote><h2 id="28、SecureJSON"><a href="#28、SecureJSON" class="headerlink" title="28、SecureJSON"></a>28、SecureJSON</h2><blockquote><p>使用 SecureJSON 防止 json 劫持。如果给定的结构是数组值，则默认预置 <code>&quot;while(1),&quot;</code> 到响应体。</p></blockquote><h4 id="（1）完整代码-26"><a href="#（1）完整代码-26" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default()  <span class="hljs-comment">// 创建一个默认的 Gin 实例</span><br><br>    <span class="hljs-comment">// 你也可以使用自己的 SecureJSON 前缀</span><br>    <span class="hljs-comment">// r.SecureJsonPrefix(&quot;)]&#125;&#x27;,\n&quot;)</span><br><br>    r.GET(<span class="hljs-string">&quot;/someJSON&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  <span class="hljs-comment">// 注册处理路由 &quot;/someJSON&quot; 的 GET 请求的处理函数</span><br>        names := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;lena&quot;</span>, <span class="hljs-string">&quot;austin&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>&#125;  <span class="hljs-comment">// 创建一个字符串切片 names</span><br><br>        <span class="hljs-comment">// 将 names 切片作为 JSON 响应返回给客户端</span><br>        <span class="hljs-comment">// 使用 http.StatusOK 表示 HTTP 响应的状态码为 200 OK</span><br>        <span class="hljs-comment">// 并在返回的 JSON 数据前加上安全前缀，防止 JSON 劫持攻击</span><br>        c.SecureJSON(http.StatusOK, names)<br>    &#125;)<br><br>    <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>    r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-8"><a href="#（2）代码解释-8" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用 Gin 框架创建一个 HTTP 服务器，并定义了一个路由处理函数。代码的主要逻辑如下：</p><ol><li>使用 <code>gin.Default()</code> 创建一个默认的 Gin 实例 <code>r</code>，它包含了一些常用的中间件，如日志、恢复等。</li><li>注册一个处理路由 <code>/someJSON</code> 的 GET 请求的处理函数。该处理函数接收一个 <code>gin.Context</code> 对象 <code>c</code>，用于处理 HTTP 请求和构建 HTTP 响应。</li><li>在处理函数中，创建一个字符串切片 <code>names</code>，包含了三个字符串元素。</li><li>使用 <code>c.SecureJSON(http.StatusOK, names)</code> 将 <code>names</code> 切片作为 JSON 响应返回给客户端。这里使用了 <code>http.StatusOK</code> 表示 HTTP 响应的状态码为 200 OK，并且在返回的 JSON 数据前加上了安全前缀，防止 JSON 劫持攻击。</li><li>调用 <code>r.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器，监听在 0.0.0.0:8080 地址上。</li></ol><p>这段代码的功能是创建一个简单的 HTTP 服务器，当客户端通过 <code>/someJSON</code> 路径发送 GET 请求时，返回一个包含三个字符串元素的 JSON 数组作为响应。服务器监听在 0.0.0.0:8080 地址上，并使用 Gin 框架处理路由和构建 HTTP 响应。</p></blockquote><h2 id="29、从-reader-读取数据"><a href="#29、从-reader-读取数据" class="headerlink" title="29、从 reader 读取数据"></a>29、从 reader 读取数据</h2><h4 id="（1）完整代码-27"><a href="#（1）完整代码-27" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;net/http&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 创建一个默认的 Gin 路由引擎</span><br>router := gin.Default()<br><br><span class="hljs-comment">// 定义处理路由 /someDataFromReader 的 GET 请求的处理函数</span><br>router.GET(<span class="hljs-string">&quot;/someDataFromReader&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 发起 HTTP GET 请求获取远程文件</span><br>response, err := http.Get(<span class="hljs-string">&quot;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> || response.StatusCode != http.StatusOK &#123;<br><span class="hljs-comment">// 如果请求出错或者响应状态码不是 200 OK，则返回 503 Service Unavailable 状态码</span><br>c.Status(http.StatusServiceUnavailable)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 获取响应的 Body、ContentLength 和 ContentType</span><br>reader := response.Body<br>contentLength := response.ContentLength<br>contentType := response.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>)<br><br><span class="hljs-comment">// 构建额外的响应头</span><br>extraHeaders := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;Content-Disposition&quot;</span>: <span class="hljs-string">`attachment; filename=&quot;gopher.png&quot;`</span>,<br>&#125;<br><br><span class="hljs-comment">// 使用 c.DataFromReader 方法将文件数据作为响应返回给客户端</span><br>c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)<br>&#125;)<br><br><span class="hljs-comment">// 启动 HTTP 服务器并监听在 :8080 地址上</span><br>router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-9"><a href="#（2）代码解释-9" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>这段代码使用了 Gin 框架创建了一个 HTTP 服务器，并注册了一个处理路由 “&#x2F;someDataFromReader” 的 GET 请求的处理函数。</p><ol><li><code>gin.Default()</code> 创建了一个默认的 Gin 路由引擎。</li><li><code>router.GET(&quot;/someDataFromReader&quot;, func(c *gin.Context) &#123; ... &#125;)</code> 定义了处理路由 “&#x2F;someDataFromReader” 的 GET 请求的处理函数。函数体中的代码会在接收到 “&#x2F;someDataFromReader” 的 GET 请求时执行。</li><li><code>http.Get(&quot;https://raw.githubusercontent.com/gin-gonic/logo/master/color.png&quot;)</code> 发起了一个 HTTP GET 请求，获取远程文件的内容。如果请求出错或者响应状态码不是 200 OK，会返回 503 Service Unavailable 状态码给客户端。</li><li><code>c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)</code> 使用 Gin 提供的 <code>c.DataFromReader</code> 方法将文件数据作为响应返回给客户端。<code>http.StatusOK</code> 是响应的状态码，<code>contentLength</code> 是文件的长度，<code>contentType</code> 是文件的 MIME 类型，<code>reader</code> 是文件的内容，<code>extraHeaders</code> 是一些额外的响应头，这里设置了 Content-Disposition 头，指定文件名为 “gopher.png”。</li><li><code>router.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器并监听在 “:8080” 地址上，开始接受客户端的请求。</li></ol><p>总体来说，这段代码实现了一个简单的 HTTP 服务器，通过处理 GET 请求获取远程文件内容，并将文件数据作为响应返回给客户端，同时设置了文件的 Content-Disposition 头，指定文件名为 “gopher.png”。</p></blockquote><h2 id="30、-静态文件服务"><a href="#30、-静态文件服务" class="headerlink" title="30、 静态文件服务"></a>30、 静态文件服务</h2><h4 id="（1）完整代码-28"><a href="#（1）完整代码-28" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    router := gin.Default() <span class="hljs-comment">// 创建一个 Gin 路由引擎实例</span><br><br>    <span class="hljs-comment">// 注册静态文件路由，将请求 &quot;/assets&quot; 的静态文件从当前目录下的 &quot;./assets&quot; 目录中返回给客户端</span><br>    router.Static(<span class="hljs-string">&quot;/assets&quot;</span>, <span class="hljs-string">&quot;./assets&quot;</span>)<br><br>    <span class="hljs-comment">// 注册基于文件系统的静态文件路由，将请求 &quot;/more_static&quot; 的静态文件从指定的文件系统路径 &quot;my_file_system&quot; 中返回给客户端</span><br>    router.StaticFS(<span class="hljs-string">&quot;/more_static&quot;</span>, http.Dir(<span class="hljs-string">&quot;my_file_system&quot;</span>))<br><br>    <span class="hljs-comment">// 注册单个文件的静态文件路由，将请求 &quot;/favicon.ico&quot; 的静态文件从当前目录下的 &quot;./resources/favicon.ico&quot; 文件返回给客户端</span><br>    router.StaticFile(<span class="hljs-string">&quot;/favicon.ico&quot;</span>, <span class="hljs-string">&quot;./resources/favicon.ico&quot;</span>)<br><br>    <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-10"><a href="#（2）代码解释-10" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>以上代码使用 Gin 框架创建了一个简单的静态文件服务器。通过注册静态文件路由，可以将指定目录下的静态文件返回给客户端，例如图片、CSS、JavaScript 等资源文件，以供客户端的浏览器进行访问和加载。这对于构建前端应用或者提供静态资源文件的需求非常有用。在代码中使用了不同的静态文件路由注册方式，包括 <code>router.Static()</code>、<code>router.StaticFS()</code> 和 <code>router.StaticFile()</code>，用于处理不同的静态文件请求。最后，通过调用 <code>router.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器，监听地址为 “0.0.0.0:8080”，并开始接收并处理客户端的请求。</p></blockquote><h2 id="31、-设置和获取-Cookie"><a href="#31、-设置和获取-Cookie" class="headerlink" title="31、 设置和获取 Cookie"></a>31、 设置和获取 Cookie</h2><h4 id="（1）完整代码-29"><a href="#（1）完整代码-29" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default() <span class="hljs-comment">// 创建一个 Gin 路由引擎实例</span><br><br>router.GET(<span class="hljs-string">&quot;/cookie&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123; <span class="hljs-comment">// 注册 &quot;/cookie&quot; 路由的 GET 方法处理函数</span><br>cookie, err := c.Cookie(<span class="hljs-string">&quot;gin_cookie&quot;</span>) <span class="hljs-comment">// 获取名为 &quot;gin_cookie&quot; 的 Cookie</span><br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 如果获取 Cookie 发生错误，则设置一个默认值</span><br>cookie = <span class="hljs-string">&quot;NotSet&quot;</span><br>c.SetCookie(<span class="hljs-string">&quot;gin_cookie&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-number">3600</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>) <span class="hljs-comment">// 设置名为 &quot;gin_cookie&quot; 的 Cookie 值为 &quot;test&quot;，过期时间为 3600 秒，路径为 &quot;/&quot;，域名为 &quot;localhost&quot;，不限制 HTTPS 连接，允许 JS 访问</span><br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;Cookie value: %s \n&quot;</span>, cookie) <span class="hljs-comment">// 在控制台打印 Cookie 的值</span><br>&#125;)<br><br>router.Run() <span class="hljs-comment">// 启动 HTTP 服务器，开始接收并处理客户端的请求</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-11"><a href="#（2）代码解释-11" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>​以上代码使用 Gin 框架创建了一个简单的 HTTP 服务器，并注册了一个 “&#x2F;cookie” 路由的 GET 方法处理函数。在处理函数中，通过 <code>c.Cookie(&quot;gin_cookie&quot;)</code> 获取名为 “gin_cookie” 的 Cookie 值，并在控制台打印出来。如果获取 Cookie 发生错误（例如不存在），则设置一个默认值，并通过 <code>c.SetCookie()</code> 方法设置名为 “gin_cookie” 的 Cookie 值为 “test”，过期时间为 3600 秒，路径为 “&#x2F;“，域名为 “localhost”，不限制 HTTPS 连接，允许 JS 访问。最后，通过调用 <code>router.Run()</code> 启动 HTTP 服务器，监听默认的地址和端口（0.0.0.0:8080），并开始接收并处理客户端的请求。</p></blockquote><h2 id="32、支持-Let’s-Encrypt"><a href="#32、支持-Let’s-Encrypt" class="headerlink" title="32、支持 Let’s Encrypt"></a>32、支持 Let’s Encrypt</h2><h4 id="（1）完整代码-30"><a href="#（1）完整代码-30" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><blockquote><p>一行代码支持 LetsEncrypt HTTPS servers 示例。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/autotls&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default() <span class="hljs-comment">// 创建一个 Gin 路由引擎实例</span><br><br><span class="hljs-comment">// 注册 &quot;/ping&quot; 路由的 GET 方法处理函数</span><br>r.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;pong&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 使用 Autotls 启动 HTTP 服务器并监听域名 &quot;example1.com&quot; 和 &quot;example2.com&quot;</span><br>log.Fatal(autotls.Run(r, <span class="hljs-string">&quot;example1.com&quot;</span>, <span class="hljs-string">&quot;example2.com&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>自定义 autocert manager 示例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><br><span class="hljs-string">&quot;github.com/gin-gonic/autotls&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;golang.org/x/crypto/acme/autocert&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default() <span class="hljs-comment">// 创建一个 Gin 路由引擎实例</span><br><br><span class="hljs-comment">// 注册 &quot;/ping&quot; 路由的 GET 方法处理函数</span><br>r.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;pong&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 创建一个 Autocert 管理器，用于配置 Let&#x27;s Encrypt 自动证书管理</span><br>m := autocert.Manager&#123;<br>Prompt:     autocert.AcceptTOS,                    <span class="hljs-comment">// 接受服务条款</span><br>HostPolicy: autocert.HostWhitelist(<span class="hljs-string">&quot;example1.com&quot;</span>, <span class="hljs-string">&quot;example2.com&quot;</span>), <span class="hljs-comment">// 允许的域名白名单</span><br>Cache:      autocert.DirCache(<span class="hljs-string">&quot;/var/www/.cache&quot;</span>),   <span class="hljs-comment">// 证书缓存目录</span><br>&#125;<br><br><span class="hljs-comment">// 使用 Autotls 启动 HTTP 服务器并监听域名 &quot;example1.com&quot; 和 &quot;example2.com&quot;，并配置自动证书管理器</span><br>log.Fatal(autotls.RunWithManager(r, &amp;m))<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="（2）代码解释-12"><a href="#（2）代码解释-12" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>以上代码使用 Gin 框架创建了一个简单的 HTTP 服务器，并注册了一个 “&#x2F;ping” 路由的 GET 方法处理函数，用于处理 “&#x2F;ping” 路径的请求，并返回 “pong” 字符串。然后，通过调用 <code>autotls.Run()</code> 方法使用 Autotls 启动 HTTP 服务器并监听域名 “example1.com” 和 “example2.com”，这将自动为这两个域名配置 HTTPS，并使用 Let’s Encrypt 证书进行 TLS 加密。如果启动服务器出现错误，会通过 <code>log.Fatal()</code> 方法记录并输出错误信息，并终止程序的运行。</p></blockquote><blockquote><p>以上代码使用 Gin 框架创建了一个简单的 HTTP 服务器，并注册了一个 “&#x2F;ping” 路由的 GET 方法处理函数，用于处理 “&#x2F;ping” 路径的请求，并返回 “pong” 字符串。然后，通过创建一个 Autocert 管理器来配置 Let’s Encrypt 自动证书管理，包括接受服务条款、允许的域名白名单和证书缓存目录等参数。最后，通过调用 <code>autotls.RunWithManager()</code> 方法使用 Autotls 启动 HTTP 服务器并监听域名 “example1.com” 和 “example2.com”，并配置自动证书管理器。如果启动服务器出现错误，会通过 <code>log.Fatal()</code> 方法记录并输出错误信息，并终止程序的运行。</p></blockquote><h2 id="33、将-request-body-绑定到不同的结构体中"><a href="#33、将-request-body-绑定到不同的结构体中" class="headerlink" title="33、将 request body 绑定到不同的结构体中"></a>33、将 request body 绑定到不同的结构体中</h2><h4 id="（1）完整代码-31"><a href="#（1）完整代码-31" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><blockquote><p>一般通过调用 <code>c.Request.Body</code> 方法绑定数据，但不能多次调用这个方法。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> formA <span class="hljs-keyword">struct</span> &#123;<br>Foo <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;foo&quot; xml:&quot;foo&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">type</span> formB <span class="hljs-keyword">struct</span> &#123;<br>Bar <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;bar&quot; xml:&quot;bar&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SomeHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>objA := formA&#123;&#125;<br>objB := formB&#123;&#125;<br><br><span class="hljs-comment">// 尝试使用 c.ShouldBind() 方法将请求体绑定到 formA 结构体对象</span><br><span class="hljs-keyword">if</span> errA := c.ShouldBind(&amp;objA); errA == <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusOK, <span class="hljs-string">`the body should be formA`</span>)<br><span class="hljs-comment">// 如果绑定失败，则尝试将请求体绑定到 formB 结构体对象</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> errB := c.ShouldBind(&amp;objB); errB == <span class="hljs-literal">nil</span> &#123;<br>c.String(http.StatusOK, <span class="hljs-string">`the body should be formB`</span>)<br><span class="hljs-comment">// 如果两次绑定都失败，则执行其他逻辑</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-13"><a href="#（2）代码解释-13" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>以上代码是一个使用 Gin 框架的 HTTP 请求处理函数 SomeHandler，它通过两次调用 c.ShouldBind() 方法尝试将请求体绑定到两个不同的结构体对象 formA 和 formB。首先尝试将请求体绑定到 formA 对象，如果绑定成功，则返回一个字符串 “the body should be formA”。如果绑定失败，则尝试将请求体绑定到 formB 对象，如果绑定成功，则返回一个字符串 “the body should be formB”。如果两次绑定都失败，则执行其他逻辑。需要注意的是，c.ShouldBind() 方法使用了 c.Request.Body，一旦读取，请求体将变为 EOF，无法再次使用，因此在使用该方法时需要注意不可重用的特性。</p></blockquote><h2 id="34、-单文件上传"><a href="#34、-单文件上传" class="headerlink" title="34、 单文件上传"></a>34、 单文件上传</h2><h4 id="（1）完整代码-32"><a href="#（1）完整代码-32" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    router := gin.Default()<br><br>    <span class="hljs-comment">// 为 multipart forms 设置较低的内存限制 (默认是 32 MiB)</span><br>    <span class="hljs-comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span><br><br>    <span class="hljs-comment">// 定义上传文件的接口路由为 &quot;/upload&quot;，使用 POST 方法</span><br>    router.POST(<span class="hljs-string">&quot;/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 获取上传的文件对象</span><br>        file, _ := c.FormFile(<span class="hljs-string">&quot;file&quot;</span>) <span class="hljs-comment">// 通过 c.FormFile() 方法获取上传的文件，&quot;file&quot; 是上传文件的字段名</span><br>        log.Println(file.Filename) <span class="hljs-comment">// 打印上传文件的文件名</span><br><br>        <span class="hljs-comment">// 上传文件至指定目录</span><br>        <span class="hljs-comment">// c.SaveUploadedFile(file, dst) // 使用 c.SaveUploadedFile() 方法将文件保存到指定的目录</span><br><br>        c.String(http.StatusOK, fmt.Sprintf(<span class="hljs-string">&quot;&#x27;%s&#x27; uploaded!&quot;</span>, file.Filename)) <span class="hljs-comment">// 返回上传成功的信息</span><br>    &#125;)<br><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 Gin 服务器，监听在 8080 端口</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-14"><a href="#（2）代码解释-14" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>首先，创建了一个默认的 Gin 路由引擎 <code>router := gin.Default()</code>。</li><li>设置了一个上传文件的接口路由为 “&#x2F;upload”，并使用 POST 方法处理文件上传请求：<code>router.POST(&quot;/upload&quot;, func(c *gin.Context) &#123;...&#125;)</code>。这里使用了匿名函数作为路由处理函数，接收一个 <code>c *gin.Context</code> 参数，用于处理 HTTP 请求和响应。</li><li>在路由处理函数中，通过 <code>c.FormFile(&quot;file&quot;)</code> 获取上传的文件对象。<code>c.FormFile</code> 方法是 Gin 框架提供的用于获取上传文件的方法，其中 “file” 是上传文件的字段名。如果没有找到对应的文件字段，会返回错误。</li><li>使用 <code>log.Println(file.Filename)</code> 打印上传文件的文件名。这里只是简单地将文件名打印到控制台，实际应用中可能需要根据需求进行文件名的处理。</li><li>可以通过 <code>c.SaveUploadedFile(file, dst)</code> 将文件保存到指定目录。其中 <code>file</code> 是上传的文件对象，<code>dst</code> 是目标保存路径。在实际应用中，需要根据需求设置合适的目标保存路径，并处理文件名重复等情况。</li><li>使用 <code>c.String(http.StatusOK, fmt.Sprintf(&quot;&#39;%s&#39; uploaded!&quot;, file.Filename))</code> 返回上传成功的信息。这里使用了 Gin 框架提供的 <code>c.String</code> 方法，设置 HTTP 响应状态码为 200，返回一个字符串作为响应体，其中包含上传文件的文件名。</li><li>最后，通过 <code>router.Run(&quot;:8080&quot;)</code> 启动 Gin 服务器，监听在 8080 端口，等待接收文件上传请求。</li></ol></blockquote><h2 id="35、-多文件上传"><a href="#35、-多文件上传" class="headerlink" title="35、 多文件上传"></a>35、 多文件上传</h2><h4 id="（1）完整代码-33"><a href="#（1）完整代码-33" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建默认的 Gin 路由引擎</span><br>    router := gin.Default()<br><br>    <span class="hljs-comment">// 为 multipart forms 设置较低的内存限制 (默认是 32 MiB)</span><br>    <span class="hljs-comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span><br><br>    <span class="hljs-comment">// 设置文件上传的接口路由为 &quot;/upload&quot;，使用 POST 方法处理文件上传请求</span><br>    router.POST(<span class="hljs-string">&quot;/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 获取上传的 multipart form 数据</span><br>        form, _ := c.MultipartForm()<br><br>        <span class="hljs-comment">// 获取上传的文件对象列表</span><br>        files := form.File[<span class="hljs-string">&quot;upload[]&quot;</span>]<br><br>        <span class="hljs-comment">// 遍历文件对象列表</span><br>        <span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files &#123;<br>            log.Println(file.Filename)<br>            <span class="hljs-comment">// 这里可以根据需求处理文件，比如保存文件到指定目录、处理文件名重复等情况</span><br>            <span class="hljs-comment">// c.SaveUploadedFile(file, dst)</span><br>        &#125;<br><br>        <span class="hljs-comment">// 返回上传成功的信息，包含上传的文件数量</span><br>        c.String(http.StatusOK, fmt.Sprintf(<span class="hljs-string">&quot;%d files uploaded!&quot;</span>, <span class="hljs-built_in">len</span>(files)))<br>    &#125;)<br><br>    <span class="hljs-comment">// 启动 Gin 服务器，监听在 8080 端口，等待接收文件上传请求</span><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-15"><a href="#（2）代码解释-15" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>创建 Gin 路由引擎：通过 <code>gin.Default()</code> 创建了一个默认的 Gin 路由引擎，用于处理 HTTP 请求。</li><li>设置文件上传接口：使用 <code>router.POST(&quot;/upload&quot;, ...)</code> 将文件上传接口设置为 “&#x2F;upload”，并指定 HTTP 方法为 POST。这意味着该接口将处理客户端发送的 POST 请求。</li><li>获取上传的 multipart form 数据：在接口的处理函数中，使用 <code>c.MultipartForm()</code> 方法获取上传的 multipart form 数据，其中 <code>c</code> 是 <code>*gin.Context</code> 类型的请求上下文对象。</li><li>获取上传的文件对象列表：从 <code>multipart.Form</code> 结构体中的 <code>File</code> 字段获取上传的文件对象列表。这里使用了 “upload[]” 作为文件字段的名称，表示可以上传多个文件，且字段名为 “upload[]”。</li><li>处理上传的文件：通过遍历文件对象列表，可以对每个文件进行处理，例如获取文件名、保存文件到指定目录、处理文件名重复等。这里的处理逻辑通过注释进行了简单说明，实际应用中需要根据需求进行具体处理。</li><li>返回上传成功的信息：通过 <code>c.String()</code> 方法返回上传成功的信息，包含上传的文件数量。</li><li>启动 HTTP 服务器：使用 <code>router.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器，监听在 8080 端口，等待接收文件上传请求。</li></ol><p>需要注意的是，这段代码还有一部分注释掉的代码，包括了设置 <code>router.MaxMultipartMemory</code> 限制内存大小的功能。可以根据实际需求取消注释并设置合适的内存限制。同时，这段代码还没有处理文件上传过程中可能出现的错误情况，如文件大小限制、文件类型限制等，需要根据具体需求进行完善。</p></blockquote><h2 id="36、-使用-BasicAuth-中间件"><a href="#36、-使用-BasicAuth-中间件" class="headerlink" title="36、  使用 BasicAuth 中间件"></a>36、  使用 BasicAuth 中间件</h2><h4 id="（1）完整代码-34"><a href="#（1）完整代码-34" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 模拟一些私人数据</span><br><span class="hljs-keyword">var</span> secrets = gin.H&#123;<br>    <span class="hljs-string">&quot;foo&quot;</span>:    gin.H&#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;foo@bar.com&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&quot;123433&quot;</span>&#125;,<br>    <span class="hljs-string">&quot;austin&quot;</span>: gin.H&#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;austin@example.com&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&quot;666&quot;</span>&#125;,<br>    <span class="hljs-string">&quot;lena&quot;</span>:   gin.H&#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;lena@guapa.com&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&quot;523443&quot;</span>&#125;,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default()<br><br>    <span class="hljs-comment">// 路由组使用 gin.BasicAuth() 中间件</span><br>    <span class="hljs-comment">// gin.Accounts 是 map[string]string 的一种快捷方式</span><br>    authorized := r.Group(<span class="hljs-string">&quot;/admin&quot;</span>, gin.BasicAuth(gin.Accounts&#123;<br>        <span class="hljs-string">&quot;foo&quot;</span>:    <span class="hljs-string">&quot;bar&quot;</span>,<br>        <span class="hljs-string">&quot;austin&quot;</span>: <span class="hljs-string">&quot;1234&quot;</span>,<br>        <span class="hljs-string">&quot;lena&quot;</span>:   <span class="hljs-string">&quot;hello2&quot;</span>,<br>        <span class="hljs-string">&quot;manu&quot;</span>:   <span class="hljs-string">&quot;4321&quot;</span>,<br>    &#125;))<br><br>    <span class="hljs-comment">// /admin/secrets 端点</span><br>    <span class="hljs-comment">// 触发 &quot;localhost:8080/admin/secrets</span><br>    authorized.GET(<span class="hljs-string">&quot;/secrets&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 获取用户，它是由 BasicAuth 中间件设置的</span><br>        <span class="hljs-comment">// 使用 c.MustGet() 方法获取经过 BasicAuth 中间件处理后的用户信息</span><br>        user := c.MustGet(gin.AuthUserKey).(<span class="hljs-type">string</span>)<br>        <span class="hljs-keyword">if</span> secret, ok := secrets[user]; ok &#123;<br>            <span class="hljs-comment">// 根据用户信息获取对应的私人数据</span><br>            c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;user&quot;</span>: user, <span class="hljs-string">&quot;secret&quot;</span>: secret&#125;)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果用户信息不存在于私人数据中，返回默认的信息</span><br>            c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;user&quot;</span>: user, <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-string">&quot;NO SECRET :(&quot;</span>&#125;)<br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>    r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-16"><a href="#（2）代码解释-16" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>定义了一个 <code>secrets</code> 变量，模拟了一些私人数据，使用了 <code>gin.H</code> 来表示 key-value 结构的 map。</li><li>创建了一个默认的 Gin 路由引擎 <code>r</code>。</li><li>使用 <code>r.Group()</code> 方法创建了一个路由组 <code>/admin</code>，并在该路由组上应用了 <code>gin.BasicAuth()</code> 中间件。<code>gin.BasicAuth()</code> 中间件用于进行 HTTP 基本身份验证，需要传入一个 <code>gin.Accounts</code> 类型的参数，其中包含了允许访问的用户名和密码的键值对。</li><li>在路由组中定义了一个 GET 请求的处理函数，处理 <code>/admin/secrets</code> 路径的请求。在该处理函数中，使用 <code>c.MustGet()</code> 方法获取经过 <code>gin.BasicAuth()</code> 中间件处理后的用户信息，其中 <code>gin.AuthUserKey</code> 是 Gin 框架中用于存储经过认证的用户信息的上下文键名。</li><li>根据用户信息从 <code>secrets</code> 变量中获取对应的私人数据，如果存在则返回用户信息和私人数据，否则返回默认的信息。</li><li>使用 <code>r.Run()</code> 方法启动 HTTP 服务器，监听在 0.0.0.0:8080 地址上。</li></ol></blockquote><h2 id="37、-使用-HTTP-方法"><a href="#37、-使用-HTTP-方法" class="headerlink" title="37、   使用 HTTP 方法"></a>37、   使用 HTTP 方法</h2><h4 id="（1）完整代码-35"><a href="#（1）完整代码-35" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 禁用控制台颜色</span><br>    <span class="hljs-comment">// gin.DisableConsoleColor()</span><br><br>    <span class="hljs-comment">// 使用默认中间件（logger 和 recovery 中间件）创建 gin 路由</span><br>    router := gin.Default()<br><br>    <span class="hljs-comment">// 注册不同的 HTTP 方法对应的处理函数</span><br>    router.GET(<span class="hljs-string">&quot;/someGet&quot;</span>, getting)       <span class="hljs-comment">// 处理 HTTP GET 请求</span><br>    router.POST(<span class="hljs-string">&quot;/somePost&quot;</span>, posting)     <span class="hljs-comment">// 处理 HTTP POST 请求</span><br>    router.PUT(<span class="hljs-string">&quot;/somePut&quot;</span>, putting)       <span class="hljs-comment">// 处理 HTTP PUT 请求</span><br>    router.DELETE(<span class="hljs-string">&quot;/someDelete&quot;</span>, deleting) <span class="hljs-comment">// 处理 HTTP DELETE 请求</span><br>    router.PATCH(<span class="hljs-string">&quot;/somePatch&quot;</span>, patching)   <span class="hljs-comment">// 处理 HTTP PATCH 请求</span><br>    router.HEAD(<span class="hljs-string">&quot;/someHead&quot;</span>, head)         <span class="hljs-comment">// 处理 HTTP HEAD 请求</span><br>    router.OPTIONS(<span class="hljs-string">&quot;/someOptions&quot;</span>, options) <span class="hljs-comment">// 处理 HTTP OPTIONS 请求</span><br><br>    <span class="hljs-comment">// 默认在 8080 端口启动服务，除非定义了一个 PORT 的环境变量。</span><br>    router.Run()<br>    <span class="hljs-comment">// router.Run(&quot;:3000&quot;) 可以硬编码指定端口号</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-17"><a href="#（2）代码解释-17" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>以上代码使用 Gin 框架创建了一个 HTTP 服务器，并注册了不同的 HTTP 方法对应的处理函数。每个处理函数在接收到对应的 HTTP 请求时会被调用，从而进行相应的处理逻辑。<code>router.Run()</code> 函数会在默认端口 8080 上启动 HTTP 服务，可以通过设置环境变量 <code>PORT</code> 来修改端口号。如果需要固定端口号，可以通过 <code>router.Run(&quot;:3000&quot;)</code> 来指定特定的端口号</li></ol></blockquote><h2 id="38、使用中间件"><a href="#38、使用中间件" class="headerlink" title="38、使用中间件"></a>38、使用中间件</h2><h4 id="（1）完整代码-36"><a href="#（1）完整代码-36" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 新建一个没有任何默认中间件的路由</span><br>    r := gin.New()<br><br>    <span class="hljs-comment">// 全局中间件</span><br>    <span class="hljs-comment">// Logger 中间件将日志写入 gin.DefaultWriter，即使你将 GIN_MODE 设置为 release。</span><br>    <span class="hljs-comment">// 默认情况下 gin.DefaultWriter = os.Stdout</span><br>    r.Use(gin.Logger())<br><br>    <span class="hljs-comment">// Recovery 中间件会 recover 任何 panic。如果有 panic 的话，会写入 500。</span><br>    r.Use(gin.Recovery())<br><br>    <span class="hljs-comment">// 你可以为每个路由添加任意数量的中间件。</span><br>    r.GET(<span class="hljs-string">&quot;/benchmark&quot;</span>, MyBenchLogger(), benchEndpoint)<br><br>    <span class="hljs-comment">// 认证路由组</span><br>    <span class="hljs-comment">// authorized := r.Group(&quot;/&quot;, AuthRequired())</span><br>    <span class="hljs-comment">// 和使用以下两行代码的效果完全一样:</span><br>    authorized := r.Group(<span class="hljs-string">&quot;/&quot;</span>)<br>    <span class="hljs-comment">// 路由组中间件! 在此例中，我们在 &quot;authorized&quot; 路由组中使用自定义创建的 </span><br>    <span class="hljs-comment">// AuthRequired() 中间件</span><br>    authorized.Use(AuthRequired())<br>    &#123;<br>        authorized.POST(<span class="hljs-string">&quot;/login&quot;</span>, loginEndpoint)<br>        authorized.POST(<span class="hljs-string">&quot;/submit&quot;</span>, submitEndpoint)<br>        authorized.POST(<span class="hljs-string">&quot;/read&quot;</span>, readEndpoint)<br><br>        <span class="hljs-comment">// 嵌套路由组</span><br>        testing := authorized.Group(<span class="hljs-string">&quot;testing&quot;</span>)<br>        testing.GET(<span class="hljs-string">&quot;/analytics&quot;</span>, analyticsEndpoint)<br>    &#125;<br><br>    <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>    r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-18"><a href="#（2）代码解释-18" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>创建 Gin 路由：代码通过 <code>gin.New()</code> 函数创建了一个新的 Gin 路由实例，并赋值给变量 <code>r</code>。这个路由实例没有任何默认的中间件。</li><li>全局中间件：代码通过 <code>r.Use()</code> 函数注册了两个全局中间件，分别是 <code>gin.Logger()</code> 和 <code>gin.Recovery()</code>。<code>gin.Logger()</code> 用于记录日志，<code>gin.Recovery()</code> 用于恢复从处理函数中的 panic。</li><li>路由和处理函数：代码通过 <code>r.GET()</code>、<code>r.POST()</code> 等方法注册了多个路由，并指定了相应的处理函数。例如，<code>r.GET(&quot;/benchmark&quot;, MyBenchLogger(), benchEndpoint)</code> 注册了一个 GET 请求的路由 “&#x2F;benchmark”，并使用了自定义的中间件 <code>MyBenchLogger()</code> 和处理函数 <code>benchEndpoint()</code>。</li><li>路由组和嵌套路由组：代码通过 <code>r.Group()</code> 方法创建了一个名为 “authorized” 的路由组，并在其中注册了多个路由和处理函数。这些路由和处理函数都位于 “authorized” 路由组下，并且共享路由组中注册的中间件 <code>AuthRequired()</code>，用于认证授权。另外，代码还演示了如何在路由组内创建嵌套的路由组，例如 <code>testing := authorized.Group(&quot;testing&quot;)</code>。</li><li>启动 HTTP 服务：代码通过 <code>r.Run(&quot;:8080&quot;)</code> 启动了一个 HTTP 服务，并监听在 0.0.0.0:8080 上。这将使服务在这个地址上接受来自客户端的请求。</li></ol></blockquote><h2 id="39、-映射查询字符串或表单参数"><a href="#39、-映射查询字符串或表单参数" class="headerlink" title="39、 映射查询字符串或表单参数"></a>39、 映射查询字符串或表单参数</h2><h4 id="（1）完整代码-37"><a href="#（1）完整代码-37" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-19"><a href="#（2）代码解释-19" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote></blockquote><h2 id="40、模型绑定和验证"><a href="#40、模型绑定和验证" class="headerlink" title="40、模型绑定和验证"></a>40、模型绑定和验证</h2><h4 id="（1）完整代码-38"><a href="#（1）完整代码-38" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Login 是一个结构体，用于绑定登录请求的 JSON、XML、HTML 表单数据</span><br><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>    User     <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;user&quot; json:&quot;user&quot; xml:&quot;user&quot;  binding:&quot;required&quot;`</span> <span class="hljs-comment">// User 字段，对应请求中的 &quot;user&quot; 参数，使用 form、json、xml 格式进行绑定，并设置为必需字段</span><br>    Password <span class="hljs-type">string</span> <span class="hljs-string">`form:&quot;password&quot; json:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span> <span class="hljs-comment">// Password 字段，对应请求中的 &quot;password&quot; 参数，使用 form、json、xml 格式进行绑定，并设置为必需字段</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    router := gin.Default() <span class="hljs-comment">// 创建一个默认的 Gin 路由实例</span><br><br>    <span class="hljs-comment">// 绑定 JSON 请求 (&quot;/loginJSON&quot;)</span><br>    router.POST(<span class="hljs-string">&quot;/loginJSON&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-keyword">var</span> json Login<br>        <span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 使用 ShouldBindJSON 方法将请求中的 JSON 数据绑定到 Login 结构体，并检查是否出现错误</span><br>            c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;) <span class="hljs-comment">// 若绑定失败，返回错误信息到客户端</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> json.User != <span class="hljs-string">&quot;manu&quot;</span> || json.Password != <span class="hljs-string">&quot;123&quot;</span> &#123; <span class="hljs-comment">// 检查登录信息是否匹配</span><br>            c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;) <span class="hljs-comment">// 若登录信息不匹配，返回未授权状态码和错误信息到客户端</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;you are logged in&quot;</span>&#125;) <span class="hljs-comment">// 登录成功，返回状态码和登录成功信息到客户端</span><br>    &#125;)<br><br>    <span class="hljs-comment">// 绑定 XML 请求 (&quot;/loginXML&quot;)</span><br>    router.POST(<span class="hljs-string">&quot;/loginXML&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-keyword">var</span> xml Login<br>        <span class="hljs-keyword">if</span> err := c.ShouldBindXML(&amp;xml); err != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">// 使用 ShouldBindXML 方法将请求中的 XML 数据绑定到 Login 结构体，并检查是否出现错误</span><br>            c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;) <span class="hljs-comment">// 若绑定失败，返回错误信息到客户端</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> xml.User != <span class="hljs-string">&quot;manu&quot;</span> || xml.Password != <span class="hljs-string">&quot;123&quot;</span> &#123; <span class="hljs-comment">// 检查登录信息是否匹配</span><br>            c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;) <span class="hljs-comment">// 若登录信息不匹配，返回未授权状态码和错误信息到客户端</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;you are logged in&quot;</span>&#125;) <span class="hljs-comment">// 登录成功，返回状态码和登录成功信息到客户端</span><br>    &#125;)<br><span class="hljs-comment">// 绑定 HTML 表单 (user=manu&amp;password=123)</span><br>    router.POST(<span class="hljs-string">&quot;/loginForm&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-keyword">var</span> form Login<br>        <span class="hljs-comment">// 根据 Content-Type Header 推断使用哪个绑定器。</span><br>        <span class="hljs-keyword">if</span> err := c.ShouldBind(&amp;form); err != <span class="hljs-literal">nil</span> &#123;<br>            c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>            <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> form.User != <span class="hljs-string">&quot;manu&quot;</span> || form.Password != <span class="hljs-string">&quot;123&quot;</span> &#123;<br>            c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;unauthorized&quot;</span>&#125;)<br>            <span class="hljs-keyword">return</span><br>        &#125; <br><br>        c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;you are logged in&quot;</span>&#125;)<br>    &#125;)<br><br>    <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-20"><a href="#（2）代码解释-20" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>定义了一个名为 <code>Login</code> 的结构体，其中包含了 <code>User</code> 和 <code>Password</code> 两个字段，用于接收登录请求中的用户和密码信息。结构体中使用了标签（tag）来指定了字段在不同请求中的绑定方式，如 <code>form:&quot;user&quot;</code> 表示在 HTML 表单中使用 <code>user</code> 字段名进行绑定，<code>json:&quot;user&quot;</code> 表示在 JSON 中使用 <code>user</code> 字段名进行绑定，<code>xml:&quot;user&quot;</code> 表示在 XML 中使用 <code>user</code> 字段名进行绑定。</li><li>在 <code>main</code> 函数中，创建了一个默认的 Gin 路由实例，并注册了三个路由处理函数分别处理 <code>/loginJSON</code>、<code>/loginXML</code>、<code>/loginForm</code> 这三个不同的路由。</li><li><code>/loginJSON</code> 路由处理函数通过 <code>c.ShouldBindJSON(&amp;json)</code> 方法将请求体中的 JSON 数据绑定到 <code>json</code> 结构体变量中，如果绑定失败，则返回错误信息；如果绑定成功，则判断 <code>json.User</code> 和 <code>json.Password</code> 是否符合预期的值，如果不符合，则返回未授权的状态码和错误信息，否则返回登录成功的状态码和信息。</li><li><code>/loginXML</code> 路由处理函数通过 <code>c.ShouldBindXML(&amp;xml)</code> 方法将请求体中的 XML 数据绑定到 <code>xml</code> 结构体变量中，如果绑定失败，则返回错误信息；如果绑定成功，则判断 <code>xml.User</code> 和 <code>xml.Password</code> 是否符合预期的值，如果不符合，则返回未授权的状态码和错误信息，否则返回登录成功的状态码和信息。</li><li><code>/loginForm</code> 路由处理函数通过 <code>c.ShouldBind(&amp;form)</code> 方法根据请求头中的 <code>Content-Type</code> 判断请求体中的数据类型，并将数据绑定到 <code>form</code> 结构体变量中，如果绑定失败，则返回错误信息；如果绑定成功，则判断 <code>form.User</code> 和 <code>form.Password</code> 是否符合预期的值，如果不符合，则返回未授权的状态码和错误信息，否则返回登录成功的状态码和信息。</li><li>最后通过 <code>router.Run(&quot;:8080&quot;)</code> 启动了服务，监听在 <code>0.0.0.0:8080</code> 地址上。</li></ol></blockquote><h2 id="41、-路由参数"><a href="#41、-路由参数" class="headerlink" title="41、 路由参数"></a>41、 路由参数</h2><h4 id="（1）完整代码-39"><a href="#（1）完整代码-39" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建一个默认的 gin 路由引擎</span><br>    router := gin.Default()<br><br>    <span class="hljs-comment">// 注册一个处理器函数，处理匹配到的路由 /user/:name</span><br>    <span class="hljs-comment">// :name 表示该路由段为参数，可以匹配任何字符串，并将其作为参数传递给处理器函数</span><br>    router.GET(<span class="hljs-string">&quot;/user/:name&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 从路由参数中获取名字参数值</span><br>        name := c.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>        <span class="hljs-comment">// 在响应中返回 &quot;Hello &#123;name&#125;&quot; 字符串</span><br>        c.String(http.StatusOK, <span class="hljs-string">&quot;Hello %s&quot;</span>, name)<br>    &#125;)<br><br>    <span class="hljs-comment">// 注册一个处理器函数，处理匹配到的路由 /user/:name/*action</span><br>    <span class="hljs-comment">// :name 和 *action 都表示参数，:name 匹配一个字符串，*action 匹配多个字符串</span><br>    <span class="hljs-comment">// 如果没有其他路由匹配 /user/:name，该处理器函数将处理该请求并进行重定向到 /user/:name/</span><br>    router.GET(<span class="hljs-string">&quot;/user/:name/*action&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 从路由参数中获取名字和动作参数值</span><br>        name := c.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>        action := c.Param(<span class="hljs-string">&quot;action&quot;</span>)<br>        <span class="hljs-comment">// 根据参数值构建消息字符串</span><br>        message := name + <span class="hljs-string">&quot; is &quot;</span> + action<br>        <span class="hljs-comment">// 在响应中返回消息字符串</span><br>        c.String(http.StatusOK, message)<br>    &#125;)<br><br>    <span class="hljs-comment">// 启动 HTTP 服务器并监听在 :8080 上</span><br>    router.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-21"><a href="#（2）代码解释-21" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>第一个处理器函数处理了路由 <code>/user/:name</code>。<code>:name</code> 表示该路由段为参数，可以匹配任何字符串，并将其作为参数传递给处理器函数。在处理器函数中，通过 <code>c.Param(&quot;name&quot;)</code> 获取路由参数中的 <code>name</code> 值，并使用 <code>c.String(http.StatusOK, &quot;Hello %s&quot;, name)</code> 在响应中返回 “Hello {name}” 字符串。</li><li>第二个处理器函数处理了路由 <code>/user/:name/*action</code>。<code>:name</code> 和 <code>*action</code> 都表示参数，其中 <code>:name</code> 匹配一个字符串，<code>*action</code> 匹配多个字符串。在处理器函数中，通过 <code>c.Param(&quot;name&quot;)</code> 和 <code>c.Param(&quot;action&quot;)</code> 获取路由参数中的 <code>name</code> 和 <code>action</code> 值，并根据这些参数值构建消息字符串。然后，使用 <code>c.String(http.StatusOK, message)</code> 在响应中返回该消息字符串。需要注意的是，如果没有其他路由匹配 <code>/user/:name</code>，该处理器函数将处理该请求并进行重定向到 <code>/user/:name/</code>。</li></ol><p>最后，通过调用 <code>router.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器并监听在 <code>:8080</code> 端口上。一旦服务器启动成功，它将开始监听来自客户端的 HTTP 请求，并根据注册的路由处理器函数来处理这些请求。Gin 框架提供了很多方便的方法来处理路由、请求和响应，使得构建 HTTP 服务器变得简单和高效。</p></blockquote><h2 id="42、静态资源嵌入"><a href="#42、静态资源嵌入" class="headerlink" title="42、静态资源嵌入"></a>42、静态资源嵌入</h2><h4 id="（1）完整代码-40"><a href="#（1）完整代码-40" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.New() <span class="hljs-comment">// 创建一个新的 Gin 路由实例</span><br><br>    t, err := loadTemplate() <span class="hljs-comment">// 调用 loadTemplate() 函数加载模板</span><br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err) <span class="hljs-comment">// 如果加载模板过程中出现错误，则触发 panic</span><br>    &#125;<br>    r.SetHTMLTemplate(t) <span class="hljs-comment">// 将加载好的模板设置到 Gin 路由实例的 HTML 模板中</span><br><br>    r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123; <span class="hljs-comment">// 定义路由处理函数，处理 HTTP GET 请求，路径为 &quot;/&quot;</span><br>        c.HTML(http.StatusOK, <span class="hljs-string">&quot;/html/index.tmpl&quot;</span>, <span class="hljs-literal">nil</span>) <span class="hljs-comment">// 返回 HTML 响应，使用加载的模板渲染数据，并设置 HTTP 状态码为 200</span><br>    &#125;)<br><br>    r.Run(<span class="hljs-string">&quot;:8080&quot;</span>) <span class="hljs-comment">// 启动 HTTP 服务器，监听在端口 8080 上</span><br>&#125;<br><br><span class="hljs-comment">// loadTemplate 加载由 go-assets-builder 嵌入的模板</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadTemplate</span><span class="hljs-params">()</span></span> (*template.Template, <span class="hljs-type">error</span>) &#123;<br>    t := template.New(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment">// 创建一个空的模板</span><br>    <span class="hljs-keyword">for</span> name, file := <span class="hljs-keyword">range</span> Assets.Files &#123; <span class="hljs-comment">// 遍历由 go-assets-builder 嵌入的文件</span><br>        <span class="hljs-keyword">if</span> file.IsDir() || !strings.HasSuffix(name, <span class="hljs-string">&quot;.tmpl&quot;</span>) &#123;<br>            <span class="hljs-keyword">continue</span> <span class="hljs-comment">// 如果文件是目录或者不是以 .tmpl 后缀结尾，则跳过</span><br>        &#125;<br>        h, err := ioutil.ReadAll(file) <span class="hljs-comment">// 读取文件内容</span><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err <span class="hljs-comment">// 如果读取文件内容过程中出现错误，则返回错误</span><br>        &#125;<br>        t, err = t.New(name).Parse(<span class="hljs-type">string</span>(h)) <span class="hljs-comment">// 将文件内容解析为模板，并将其命名为 name，与之前的模板形成模板链</span><br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err <span class="hljs-comment">// 如果解析过程中出现错误，则返回错误</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> t, <span class="hljs-literal">nil</span> <span class="hljs-comment">// 返回加载好的模板和 nil 错误，表示加载模板成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-22"><a href="#（2）代码解释-22" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><p>上述代码是一个简单的 Go 语言程序，使用了 Gin 框架和 go-assets-builder 库来创建一个 HTTP 服务器，并加载嵌入在程序中的模板文件进行渲染。下面对代码进行详细的分析：</p><ol><li><code>func main()</code> 是 Go 语言程序的入口函数，程序从这里开始执行。</li><li><code>gin.New()</code> 创建了一个新的 Gin 路由实例，用于处理 HTTP 请求和定义路由。</li><li><code>loadTemplate()</code> 函数用于加载由 go-assets-builder 嵌入的模板文件，并返回解析后的模板和可能的错误。</li><li><code>r.SetHTMLTemplate(t)</code> 将加载好的模板设置到 Gin 路由实例的 HTML 模板中，以便后续使用模板进行渲染。</li><li><code>r.GET(&quot;/&quot;, func(c *gin.Context) &#123; ... &#125;)</code> 定义了一个路由处理函数，处理根路径的 HTTP GET 请求。当用户访问根路径时，Gin 框架会调用这个处理函数来处理请求。</li><li><code>c.HTML(http.StatusOK, &quot;/html/index.tmpl&quot;, nil)</code> 在路由处理函数中调用 <code>c.HTML()</code> 方法返回一个 HTML 响应。这个方法使用加载的模板渲染数据，并设置 HTTP 状态码为 200（http.StatusOK）。</li><li><code>r.Run(&quot;:8080&quot;)</code> 启动 HTTP 服务器，监听在 8080 端口上，开始接收和处理 HTTP 请求。</li><li><code>loadTemplate()</code> 函数遍历由 go-assets-builder 嵌入的文件，读取文件内容并解析为模板，并将其命名为文件名，形成一个模板链。最终返回加载好的模板和可能的错误。</li></ol><p>总的来说，这段代码通过 Gin 框架创建了一个简单的 HTTP 服务器，加载了由 go-assets-builder 嵌入的模板文件，用于渲染 HTML 响应。这种方式可以将模板文件嵌入到 Go 语言程序中，方便部署和分发，同时避免了外部文件的依赖和管理。</p></blockquote><h2 id="43、不使用默认的中间件"><a href="#43、不使用默认的中间件" class="headerlink" title="43、不使用默认的中间件"></a>43、不使用默认的中间件</h2><h4 id="（1）完整代码-41"><a href="#（1）完整代码-41" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">r := gin.New()<br>代替<br><span class="hljs-comment">// Default 使用 Logger 和 Recovery 中间件</span><br>r := gin.Default()<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-23"><a href="#（2）代码解释-23" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><h2 id="44、-XML-x2F-JSON-x2F-YAML-x2F-ProtoBuf-渲染"><a href="#44、-XML-x2F-JSON-x2F-YAML-x2F-ProtoBuf-渲染" class="headerlink" title="44、 XML&#x2F;JSON&#x2F;YAML&#x2F;ProtoBuf 渲染"></a>44、 XML&#x2F;JSON&#x2F;YAML&#x2F;ProtoBuf 渲染</h2><h4 id="（1）完整代码-42"><a href="#（1）完整代码-42" class="headerlink" title="（1）完整代码"></a>（1）完整代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default() <span class="hljs-comment">// 创建一个默认的 Gin 路由实例</span><br><br>    r.GET(<span class="hljs-string">&quot;/someJSON&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;hey&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: http.StatusOK&#125;)<br>        <span class="hljs-comment">// 处理 &quot;/someJSON&quot; 路由的 GET 请求，返回一个 JSON 响应</span><br>        <span class="hljs-comment">// 使用 gin.H 快捷方式创建一个 map[string]interface&#123;&#125; 类型的数据作为 JSON 数据</span><br>        <span class="hljs-comment">// JSON 数据包含 &quot;message&quot; 和 &quot;status&quot; 两个字段，值分别为 &quot;hey&quot; 和 http.StatusOK</span><br>        <span class="hljs-comment">// HTTP 状态码设置为 http.StatusOK</span><br>    &#125;)<br><br>    r.GET(<span class="hljs-string">&quot;/moreJSON&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 可以使用结构体来定义 JSON 数据</span><br>        <span class="hljs-keyword">var</span> msg <span class="hljs-keyword">struct</span> &#123;<br>            Name    <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot;`</span> <span class="hljs-comment">// 可以使用 `json:&quot;...&quot;` 标签定义 JSON 字段名</span><br>            Message <span class="hljs-type">string</span><br>            Number  <span class="hljs-type">int</span><br>        &#125;<br>        msg.Name = <span class="hljs-string">&quot;Lena&quot;</span><br>        msg.Message = <span class="hljs-string">&quot;hey&quot;</span><br>        msg.Number = <span class="hljs-number">123</span><br>        <span class="hljs-comment">// 定义一个结构体变量 msg，设置其字段的值</span><br>        <span class="hljs-comment">// 注意 msg.Name 在 JSON 中变成了 &quot;user&quot;</span><br>        <span class="hljs-comment">// 将输出：&#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;</span><br>        c.JSON(http.StatusOK, msg)<br>        <span class="hljs-comment">// 处理 &quot;/moreJSON&quot; 路由的 GET 请求，返回一个 JSON 响应</span><br>        <span class="hljs-comment">// 使用结构体变量 msg 作为 JSON 数据</span><br>        <span class="hljs-comment">// JSON 数据包含三个字段，分别为 &quot;user&quot;、&quot;Message&quot; 和 &quot;Number&quot;，对应结构体的字段值</span><br>        <span class="hljs-comment">// HTTP 状态码设置为 http.StatusOK</span><br>    &#125;)<br><br>    r.GET(<span class="hljs-string">&quot;/someXML&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        c.XML(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;hey&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: http.StatusOK&#125;)<br>        <span class="hljs-comment">// 处理 &quot;/someXML&quot; 路由的 GET 请求，返回一个 XML 响应</span><br>        <span class="hljs-comment">// 使用 gin.H 快捷方式创建一个 map[string]interface&#123;&#125; 类型的数据作为 XML 数据</span><br>        <span class="hljs-comment">// XML 数据包含 &quot;message&quot; 和 &quot;status&quot; 两个字段，值分别为 &quot;hey&quot; 和 http.StatusOK</span><br>        <span class="hljs-comment">// HTTP 状态码设置为 http.StatusOK</span><br>    &#125;)<br><br>    r.GET(<span class="hljs-string">&quot;/someYAML&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        c.YAML(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;hey&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>: http.StatusOK&#125;)<br>        <span class="hljs-comment">// 处理 &quot;/someYAML&quot; 路由的 GET 请求，返回一个 YAML 响应</span><br>        <span class="hljs-comment">// 使用 gin.H 快捷方式创建一个 map[string]interface&#123;&#125; 类型的数据作为 YAML 数据</span><br>        <span class="hljs-comment">// YAML 数据包含 &quot;message&quot; 和 &quot;status&quot; 两个字段，值分别为 &quot;hey&quot; 和 http.StatusOK</span><br>        <span class="hljs-comment">// HTTP 状态码设置为 http.StatusOK</span><br>    &#125;)<br><br>    r.GET(<span class="hljs-string">&quot;/someProtoBuf&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        reps := []<span class="hljs-type">int64</span>&#123;<span class="hljs-type">int64</span>(<span class="hljs-number">1</span>), <span class="hljs-type">int64</span>(<span class="hljs-number">2</span>)&#125;<br>        label := <span class="hljs-string">&quot;test&quot;</span><br>        <span class="hljs-comment">// 定义一个切片 reps 和一个字符串 label</span><br>        <span class="hljs-comment">// 用于创建一个 protoexample.Test 结构体变量 data</span><br><br>        data := &amp;protoexample.Test&#123;<br>            Label: &amp;label,<br>            Reps:  reps,<br>        &#125;<br>        <span class="hljs-comment">// 请注意，数据在响应中变为二进制数据</span><br>        <span class="hljs-comment">// 将输出被 protoexample.Test protobuf 序列化了的数据</span><br>        c.ProtoBuf(http.StatusOK, data)<br>    &#125;)<br><br>    <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>    r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）代码解释-24"><a href="#（2）代码解释-24" class="headerlink" title="（2）代码解释"></a>（2）代码解释</h4><blockquote><ol><li>导入了 Gin 框架和 net&#x2F;http 包，以及一个自定义的 Protocol Buffers 文件包 protoexample。</li><li>创建了一个 Gin 的默认引擎实例 r，用于处理 HTTP 请求。</li><li>定义了路由处理函数，通过 r.GET() 方法将路由路径和处理函数绑定起来。</li><li>第一个路由处理函数处理 “&#x2F;someJSON” 路径的 GET 请求，返回一个 JSON 格式的响应，其中包含一个 “message” 字段和一个 “status” 字段，值分别为 “hey” 和 http.StatusOK。</li><li>第二个路由处理函数处理 “&#x2F;moreJSON” 路径的 GET 请求，返回一个 JSON 格式的响应，其中包含一个结构体 msg，结构体有三个字段，分别为 “Name”、”Message” 和 “Number”，通过结构体字面量赋值后作为响应的内容。</li><li>第三个路由处理函数处理 “&#x2F;someXML” 路径的 GET 请求，返回一个 XML 格式的响应，其中包含一个 “message” 字段和一个 “status” 字段，值分别为 “hey” 和 http.StatusOK。</li><li>第四个路由处理函数处理 “&#x2F;someYAML” 路径的 GET 请求，返回一个 YAML 格式的响应，其中包含一个 “message” 字段和一个 “status” 字段，值分别为 “hey” 和 http.StatusOK。</li><li>第五个路由处理函数处理 “&#x2F;someProtoBuf” 路径的 GET 请求，返回一个 Protocol Buffers 格式的响应，其中包含一个自定义的 Test 结构体，结构体有两个字段，分别为 “Label” 和 “Reps”，通过结构体字面量赋值后作为响应的内容。</li><li>最后通过 r.Run() 方法启动 HTTP 服务器，在地址 0.0.0.0:8080 上监听请求。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
          <category> Gin框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go的HTTP网络编程</title>
      <link href="/2023/04/11/Go/go%E7%9A%84HTTP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/04/11/Go/go%E7%9A%84HTTP%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="go的HTTP网络编程"><a href="#go的HTTP网络编程" class="headerlink" title="go的HTTP网络编程"></a>go的HTTP网络编程<span id="more"></span></h1><h2 id="1、http编程–server示例"><a href="#1、http编程–server示例" class="headerlink" title="1、http编程–server示例"></a>1、http编程–server示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 注册处理函数，定义 URL 路由和对应的处理函数</span><br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, Hello)         <span class="hljs-comment">// 根路径 &quot;/&quot; 的请求交给 Hello 函数处理</span><br>http.HandleFunc(<span class="hljs-string">&quot;/login&quot;</span>, Login)   <span class="hljs-comment">// &quot;/login&quot; 路径的请求交给 Login 函数处理</span><br><br><span class="hljs-comment">// 启动 HTTP 服务器，监听指定的地址和端口</span><br>err := http.ListenAndServe(<span class="hljs-string">&quot;0.0.0.0:8080&quot;</span>, <span class="hljs-literal">nil</span>)   <span class="hljs-comment">// 启动服务器，监听地址 &quot;0.0.0.0:8080&quot;，使用默认的路由器和处理器</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;HTTP 服务器启动失败&quot;</span>, err)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-comment">// 处理根路径 &quot;/&quot; 的请求</span><br>fmt.Fprintf(w, <span class="hljs-string">&quot;Hello, World!&quot;</span>)   <span class="hljs-comment">// 将 &quot;Hello, World!&quot; 写入 http.ResponseWriter，作为 HTTP 响应的内容</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Login</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br><span class="hljs-comment">// 处理 &quot;/login&quot; 路径的请求</span><br>fmt.Fprintf(w, <span class="hljs-string">&quot;Login page&quot;</span>)   <span class="hljs-comment">// 将 &quot;Login page&quot; 写入 http.ResponseWriter，作为 HTTP 响应的内容</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="示例说明："><a href="#示例说明：" class="headerlink" title="示例说明："></a>示例说明：</h3><blockquote><ul><li><code>http.HandleFunc(&quot;/&quot;, Hello)</code>：注册处理函数 <code>Hello</code>，将根路径 “&#x2F;“ 的请求交给 <code>Hello</code> 函数处理。</li><li><code>http.HandleFunc(&quot;/login&quot;, Login)</code>：注册处理函数 <code>Login</code>，将 “&#x2F;login” 路径的请求交给 <code>Login</code> 函数处理。</li><li><code>http.ListenAndServe(&quot;0.0.0.0:8080&quot;, nil)</code>：启动一个 HTTP 服务器，监听地址为 “0.0.0.0:8080”，传入 <code>nil</code> 作为处理器，表示使用默认的路由器和处理器。</li><li><code>Hello</code> 函数和 <code>Login</code> 函数分别是处理根路径和 “&#x2F;login” 路径请求的处理函数，它们接收一个 <code>http.ResponseWriter</code> 和一个 <code>http.Request</code> 参数，分别用于写入响应和读取请求信息。</li><li><code>fmt.Fprintf(w, ...)</code>：使用 <code>Fprintf</code> 函数将字符串写入到 <code>http.ResponseWriter</code> 中，作为 HTTP 响应的内容。</li></ul></blockquote><h2 id="2、http编程–Client示例"><a href="#2、http编程–Client示例" class="headerlink" title="2、http编程–Client示例"></a>2、http编程–Client示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 创建一个 HTTP 客户端</span><br>client := http.Client&#123;&#125;<br><br><span class="hljs-comment">// 构建 GET 请求</span><br>req, err := http.NewRequest(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;https://www.example.com&quot;</span>, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;创建请求失败&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 发送请求</span><br>res, err := client.Do(req)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;请求失败&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> res.Body.Close() <span class="hljs-comment">// 在函数结束时关闭响应的 Body</span><br><br><span class="hljs-comment">// 读取响应的内容</span><br>data, err := ioutil.ReadAll(res.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;读取响应失败&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 输出响应的内容</span><br>fmt.Println(<span class="hljs-type">string</span>(data))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例说明：-1"><a href="#示例说明：-1" class="headerlink" title="示例说明："></a>示例说明：</h3><blockquote><ul><li><code>http.Client&#123;&#125;</code>：创建一个 HTTP 客户端，用于发送 HTTP 请求。</li><li><code>http.NewRequest(&quot;GET&quot;, &quot;https://www.example.com&quot;, nil)</code>：构建一个 GET 请求，并指定请求的 URL、请求方法和请求体。</li><li><code>client.Do(req)</code>：发送请求并获取响应，返回一个 <code>http.Response</code> 对象。</li><li><code>defer res.Body.Close()</code>：在函数结束时关闭响应的 Body，确保资源被正确释放。</li><li><code>ioutil.ReadAll(res.Body)</code>：从响应的 Body 中读取内容，返回一个字节数组。</li><li><code>fmt.Println(string(data))</code>：将读取到的响应内容转换为字符串并输出。</li></ul></blockquote><h2 id="3、常见HTTP请求方法"><a href="#3、常见HTTP请求方法" class="headerlink" title="3、常见HTTP请求方法"></a>3、常见HTTP请求方法</h2><blockquote><ol><li>GET：从服务器获取资源。客户端向服务器请求获取指定 URL 对应的资源，并从服务器返回该资源的内容。GET 请求通常用于获取数据，而不对服务器上的资源进行修改。</li><li>POST：向服务器提交数据。客户端向服务器提交数据，请求服务器对该数据进行处理。POST 请求通常用于向服务器提交数据，如表单数据、上传文件等。</li><li>PUT：更新服务器上的资源。客户端向服务器传送数据，请求服务器更新指定 URL 对应的资源。PUT 请求通常用于更新资源。</li><li>DELETE：删除服务器上的资源。客户端向服务器请求删除指定 URL 对应的资源。DELETE 请求通常用于删除资源。</li><li>HEAD：类似于 GET 请求，但只返回响应头部，不返回响应体。用于获取资源的元信息，如文件大小、文件类型等，而不获取实际的资源内容。</li><li>OPTIONS：请求服务器返回对指定 URL 支持的通信选项。服务器将返回支持的 HTTP 请求方法、头部字段等信息，用于客户端了解服务器的功能和约束。</li><li>PATCH：对服务器上的资源进行部分更新。客户端向服务器传送数据，请求服务器对指定 URL 对应的资源进行部分更新。</li><li>CONNECT：建立网络隧道。通常用于代理服务器，用于在客户端和目标服务器之间建立隧道，用于安全的加密通信。</li><li>TRACE：用于调试，请求服务器返回对请求和响应的诊断信息。不常用于实际生产环境。</li></ol></blockquote><h2 id="4、下面是一个简单的-Go-语言程序，演示了如何使用-HTTP-请求方法进行基本的-HTTP-请求："><a href="#4、下面是一个简单的-Go-语言程序，演示了如何使用-HTTP-请求方法进行基本的-HTTP-请求：" class="headerlink" title="4、下面是一个简单的 Go 语言程序，演示了如何使用 HTTP 请求方法进行基本的 HTTP 请求："></a>4、下面是一个简单的 Go 语言程序，演示了如何使用 HTTP 请求方法进行基本的 HTTP 请求：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// GET 请求示例</span><br>resp, err := http.Get(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>) <span class="hljs-comment">// 发起 GET 请求</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;GET 请求错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close() <span class="hljs-comment">// 确保在函数退出前关闭响应体</span><br><br>data, err := ioutil.ReadAll(resp.Body) <span class="hljs-comment">// 读取响应体数据</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;读取响应数据错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;GET 请求响应数据:&quot;</span>, <span class="hljs-type">string</span>(data)) <span class="hljs-comment">// 打印响应数据</span><br><br><span class="hljs-comment">// POST 请求示例</span><br>resp, err = http.Post(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>, <span class="hljs-literal">nil</span>) <span class="hljs-comment">// 发起 POST 请求</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;POST 请求错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>data, err = ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;读取响应数据错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;POST 请求响应数据:&quot;</span>, <span class="hljs-type">string</span>(data))<br><br><span class="hljs-comment">// PUT 请求示例</span><br>req, err := http.NewRequest(<span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>, <span class="hljs-literal">nil</span>) <span class="hljs-comment">// 创建 PUT 请求</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;创建 PUT 请求错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>client := &amp;http.Client&#123;&#125;<br>resp, err = client.Do(req) <span class="hljs-comment">// 发起 PUT 请求</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;PUT 请求错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>data, err = ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;读取响应数据错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;PUT 请求响应数据:&quot;</span>, <span class="hljs-type">string</span>(data))<br><br><span class="hljs-comment">// DELETE 请求示例</span><br>req, err = http.NewRequest(<span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>, <span class="hljs-literal">nil</span>) <span class="hljs-comment">// 创建 DELETE 请求</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;创建 DELETE 请求错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>resp, err = client.Do(req) <span class="hljs-comment">// 发起 DELETE 请求</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;DELETE 请求错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><br>data, err = ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;读取响应数据错误:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;DELETE 请求响应数据:&quot;</span>, <span class="hljs-type">string</span>(data))<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习记录</title>
      <link href="/2023/04/09/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/04/09/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
      
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/"/>
      <url>/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP<span id="more"></span></h2><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><blockquote><p>​子串的匹配算法。</p></blockquote><h4 id="核心："><a href="#核心：" class="headerlink" title="核心："></a>核心：</h4><blockquote><p>KMP算法分为两个部分：求next数组 和匹配字符串</p><p>（1）求next数组：<br>    （1.1）先让子串最近一个与其相同的位置，然后继续判断，直至能匹配上或者回到第一个字符位置。<br>    （1.2）回到能匹配到的地方后，继续开始匹配，匹配成功，则j向后移，<br>    （1.3）记录当前子串字符i的能匹配上的位置<br>    （1.4）遍历整个子串，便能找出子串中能匹配上的位置<br>（2）匹配字符串：利用子串的next数组进行匹配，优化，不用每次匹配失败都回到子串的第一个字符<br>    （2.1）匹配不成功，每次匹配前，先让子串回到能与主串匹配的位置<br>    （2.2）然后进行匹配，如果匹配成功，就把子串匹配的位置向后移<br>    （2.3）如果子串j匹配完了，即j &#x3D;&#x3D; n时，说明在主串中找到了子串匹配串，则进行输出该位置，并且将j回到能匹配的位置<br>    （2.4）逐一匹配主串中所有字符即可</p></blockquote><h4 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//求next数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++ ) <span class="hljs-comment">//第一位肯定是0，直接从第二位开始计算</span><br>    &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>])j = ne[j];        <span class="hljs-comment">//当j退到0或者，主串和子串的值对不上的时候，让j回到能对上的位置，直到找到或者无路可退为止</span><br>        <span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>])j ++;                     <span class="hljs-comment">//if能对上就让子串继续往后对</span><br>        ne[i] = j;                                    <span class="hljs-comment">//记录下该点时的next数组值</span><br>    &#125;<br><br><span class="hljs-comment">//开始匹配</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i ++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>])j = ne[j];        <span class="hljs-comment">//当j退到0或者，主串和子串的值对不上的时候，让j回到能对上的位置，直到找到或者无路可退为止</span><br>        <span class="hljs-keyword">if</span>(s[i] == p[j + <span class="hljs-number">1</span>])j ++;                     <span class="hljs-comment">//if能对上就让子串继续往后对</span><br>        <span class="hljs-keyword">if</span>(j == n)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i - n);                     <span class="hljs-comment">//输出此时的起始下标（该位置减去子串总长度，即子串起始下标）</span><br>            j = ne[j];                                <span class="hljs-comment">//将子串恢复到他下次能够匹配的位置</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表<span id="more"></span></h2><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><blockquote><p>​将较大的数值映射到较小的数组下标里。</p></blockquote><h4 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h4><blockquote><p>1、开放取址法<br>可以怎么去理解呢？<br>每次先找到插入数或者查找数的映射值，然后从该映射值开始找<br>插入的时候往后找空位，如果找到了空位，就停止，返回空位的下标<br>查询的时候，往后找，一个一个对比是否存在查找的数，直至查到空位位置，说明不存在这个数，<br>因为每一个数，一定是存在其映射数后面的，如果找到了空位，说明映射到这个数的后面的数已经找完了，说明不存在该数</p><p>需要注意的是：数组长度最好开到题给的2~3倍<br>实现：<br>（1）映射数： t &#x3D; (x % N + N) % N;<br>（2）这里将查找和插入进行同步操作：<br>while (h !&#x3D; null &amp;&amp; h[t] !&#x3D; x)<br>没有找到需要的东西（插入：空位，查找：相同的值或者空位）就继续查找：t ++;<br>找了数组末尾没有找到，就从数组开头继续查找 if (t &#x3D;&#x3D; N) t &#x3D; 0;<br>（3）最后返回目标下标即可 return t</p></blockquote><h4 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">//返回 查找后或者放入后x的位置</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = (x % N + N) % N; <span class="hljs-comment">//哈希函数，将大范围的值，全部映射到数组下标内</span><br><br>    <span class="hljs-keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)   <span class="hljs-comment">//如果当前位置已经有值了，并且不等于那个值</span><br>    &#123;<br>        t ++;   <span class="hljs-comment">//往后找</span><br>        <span class="hljs-keyword">if</span> (t == N) t = <span class="hljs-number">0</span>; <span class="hljs-comment">//找到了最后，仍然没有找到，从头开始找</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> t;   <span class="hljs-comment">//返回x的位置</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆</title>
      <link href="/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/"/>
      <url>/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆<span id="more"></span></h2><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​堆有两个操作：down和up</p></blockquote><h5 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span>    <span class="hljs-comment">//down操作，将每个节点与其左右儿子比较，判断其是否需要进行下移</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t = u;  <span class="hljs-comment">//t记录的是该节点以及其左右两个儿子中最小的值</span><br>    <span class="hljs-keyword">while</span> (u * <span class="hljs-number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;  <span class="hljs-comment">//先与左儿子进行比较</span><br>    <span class="hljs-keyword">while</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;  <span class="hljs-comment">//再与右儿子进行比较</span><br>    <span class="hljs-keyword">if</span> (t != u) <span class="hljs-comment">//若不等于，说明t发生了变化，必须进行下移</span><br>    &#123;<br>        <span class="hljs-built_in">swap</span>(h[t], h[u]);   <span class="hljs-comment">//将t位置的值，与u位置的值进行交换位置</span><br>        <span class="hljs-built_in">down</span>(t); <span class="hljs-comment">//递归，直至其不再需要下移为止</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span> <span class="hljs-params">(<span class="hljs-type">int</span> u)</span> <span class="hljs-comment">//up操作， 判断一个节点是否需要根据小根堆的特性进行上移操作</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="hljs-number">2</span>])    <span class="hljs-comment">//判断，只要存在父节点，且父节点的值大于该节点的值，则需要进行交换</span><br>    &#123;   <br>        <span class="hljs-built_in">swap</span>(u, u / <span class="hljs-number">2</span>); <span class="hljs-comment">//同样进行所有信息的交换</span><br>        u &gt;&gt;= <span class="hljs-number">1</span>;        <span class="hljs-comment">//交换后，将该节点往上移，while继续判断是否需要上移</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2023/04/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集<span id="more"></span></h1><h4 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h4><blockquote><p>​可以快速地做到下列两个操作：（1）将两个集合合并（2）询问两个元素是否在一个集合</p></blockquote><h4 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="代码解释："><a href="#代码解释：" class="headerlink" title="代码解释："></a>代码解释：</h4><blockquote><p>  find函数的实现</p><p>（1）int find(int x)<br>    {<br>        if(p[x]!&#x3D;x) p[x]&#x3D;find(p[x]); &#x2F;&#x2F;只要没有找到祖宗节点，就一直找，因为只有祖宗节点的p[x] &#x3D; x;<br>        return p[x]&#x3D;x; &#x2F;&#x2F;找到了祖宗节点，便返回祖宗节点的值<br>    }<br>        这个函数既实现了找到祖宗节点的功能，又实现了将所有儿子节点直接指向祖宗节点，即路径压缩<br>（2）合并两个集合，即将其中一个集合的祖宗节点变成另一个祖宗节点的子节点<br>p[find(a)] &#x3D; find(b);<br>（3）判断两个集合是否在同一个集合：则判断其祖宗节点是否为是否为同一个节点即可<br>if(find(a) &#x3D;&#x3D; find(b))printf(“Yes\n”);<br>else printf(“No\n”);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间合并</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并<span id="more"></span></h2><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​合并所有有交集的区间。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​可以用vector&lt;pair&lt;int, int&gt;&gt; 进行存储所有的区间</p><p>（1）先将所有的区间进行从小到大排序<br>（2）然后用所有的小区间去维护一个大区间<br>    （2.1）依次去遍历每一个小区间<br>    （2.2）如果当前区间和上一个区间没有交集，则进将前一个区间放入答案中，然后开始维护当前区间<br>    （2.3）如果当前区间和上一个区间有交集，就更新右边界为较大的那个值<br>（3）最后特判一个，如果最后一个区间不为空，就将最后一个区间放入到答案中<br>（4）将答案赋值给原集合即可</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        segs.<span class="hljs-built_in">push_back</span>(&#123;l, r&#125;); <br>    &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class="hljs-built_in">sort</span>(segs.<span class="hljs-built_in">begin</span>(), segs.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">//先将所有区间从小到大排序, 先看第一位，再看第二位，依次推类</span><br><br><br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;   <span class="hljs-comment">//定义区间的左右边界</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)    <span class="hljs-comment">//该区间和下一个区间没有交集</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);<span class="hljs-comment">//特判没有交集的是不是第一个区间是不是最开始维护空区间</span><br>            st = seg.first, ed = seg.second;    <span class="hljs-comment">//更新区间， 第一次更新区间，直接将第一个区间的左右边界放进来</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ed = <span class="hljs-built_in">max</span>(ed, seg.second);   <span class="hljs-comment">//将区间右边界更新为较大的那个值</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.<span class="hljs-built_in">push_back</span>(&#123;st, ed&#125;);    <span class="hljs-comment">//将最后一个区间加入</span><br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）需要先对原区间集合进行排序</p><p>​（2）需要特判没有交集的是不是第一个区间，是不是最开始维护的空区间</p><p>​（3）在将区间集合遍历结束后，需要判断，只要维护的区间被更新过，那么加一定存在一个区间还没有加入答案，因为它还没有遇到一个与他没有交集的区间。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散化</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化<span id="more"></span></h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​所存的值域大，但个数小，为了避免空间的浪费，可以使用离散化。</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; alls; <span class="hljs-comment">// 存储所有待离散化的值</span><br><span class="hljs-built_in">sort</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 将所有值排序</span><br>alls.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(alls.<span class="hljs-built_in">begin</span>(), alls.<span class="hljs-built_in">end</span>()), alls.<span class="hljs-built_in">end</span>());   <span class="hljs-comment">// 去掉重复元素</span><br><br><span class="hljs-comment">// 二分求出x对应的离散化的值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 找到第一个大于等于x的位置</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 映射到1, 2, ...n</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）离散后一定要映射到1, 2, 3, … n，故需要在二分查找离散化的值的时候，返回找到的下标 + 1的位置</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算<span id="more"></span></h2><h3 id="1、返回n的最后一位1："><a href="#1、返回n的最后一位1：" class="headerlink" title="1、返回n的最后一位1："></a>1、返回n的最后一位1：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">lowbit</span>(n) = n &amp; -n<br>       <br>   求一个数x，其二进制表示下<span class="hljs-number">1</span>的个数。<br>       <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (x)<br>       &#123;<br>           res ++;<br>           x -= <span class="hljs-built_in">lowbit</span>(x);<br>&#125;<br>cout &lt;&lt; res;<br></code></pre></td></tr></table></figure><p>2、求n的第k位数字: </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">n &gt;&gt; k &amp; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针算法</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法<span id="more"></span></h2><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>常见问题分类：<br>    (1) 对于一个序列，用两个指针维护一段区间<br>    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</p></blockquote><h4 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>&#123;<br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; <span class="hljs-built_in">check</span>(i, j)) j ++ ;<br><br>    <span class="hljs-comment">// 具体问题的逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和与差分</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分<span id="more"></span></h2><h3 id="1、一维前缀和"><a href="#1、一维前缀和" class="headerlink" title="1、一维前缀和"></a>1、一维前缀和</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​可以在O(1)的时间算出一段区间内的所有数的和。</p></blockquote><h5 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) s[i] = s[i - <span class="hljs-number">1</span>] + a[i];   <span class="hljs-comment">//预处理  计算前缀和数组</span><br><br><span class="hljs-type">int</span> l, r;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, s[r] - s[l - <span class="hljs-number">1</span>]);  <span class="hljs-comment">//进行每一段的求和</span><br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​前缀和与差分数组下标都必须从1开始。</p></blockquote><h3 id="2、二维前缀和"><a href="#2、二维前缀和" class="headerlink" title="2、二维前缀和"></a>2、二维前缀和</h3><h5 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​能够在O(1)的时间内算出一个矩阵中所有数的和。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>（1）数组下标都从1开始，便于后续的处理<br>（2）遍历二维数组中的每一个点<br>构造：每一个点执行s[i][j] &#x3D; s[i - 1][j] + s[i][j - 1] + a[i][j] - s[i - 1][j - 1];<br>（3）获取(x1, y1)与(x2, y2)之间的子矩阵的所有数的和<br>构造完成后的二维前缀和数组，直接输出<br>s[x2][y2] - s[x2][y1 - 1] - s[x1 - 1][y2] + s[x1 - 1][y1 - 1]，即可获得该子矩阵的所有数的和</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">s[i][j] = s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + a[i][j];    <span class="hljs-comment">//求二维前缀和数组</span><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x2][y1 - <span class="hljs-number">1</span>] - s[x1 - <span class="hljs-number">1</span>][y2] + s[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>]);  <span class="hljs-comment">//想要的矩阵之内的所有数之和</span><br></code></pre></td></tr></table></figure><h3 id="3、一维差分"><a href="#3、一维差分" class="headerlink" title="3、一维差分"></a>3、一维差分</h3><h5 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​用于给某个区间快速地加上或者减去某个数。</p></blockquote><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>（1）构造差分数组<br>    （1.1）将差分数组看作原本都是0，a[i]是原数组，b[i]是差分数组<br>    （1.2）然后将原数组中的每一个数，都插入到差分数组中，<br>        b[l] +&#x3D; c, &#x2F;&#x2F;a[l]后的数都会+c<br>        b[r + 1] -&#x3D; c; &#x2F;&#x2F;a[r + 1]后的数都会-c，【补丁】<br>        最后达到的效果就是a[l] ~a[r]之间的每一个数都加上了c<br>（2）然后根据题目要求在差分数组中指定区间中的每一个数都加上一个数，即在差分数组中的该区域中插入该数<br>（3）将差分数组还原成原数组（前缀和数组）输出即可 b[i] +&#x3D; b[i - 1];</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    b[l] += c;<br>    b[r + <span class="hljs-number">1</span>] -= c;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);   <span class="hljs-comment">//输入原数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">insert</span>(i, i, a[i]);   <span class="hljs-comment">//将原数组变成差分数组，此时原数组为该数组的前缀和数组</span><br><br><span class="hljs-comment">//给区间[l, r]上的数都加上c</span><br><span class="hljs-built_in">insert</span>(l, r, c);    <span class="hljs-comment">//将差分数组的第l个，加上c，后续在还原原数组的时候，后续到r的数，都会加上c</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) b[i] += b[i - <span class="hljs-number">1</span>]; <span class="hljs-comment">//将差分数组还原成原数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b[i]);  <span class="hljs-comment">//输出原数组</span><br></code></pre></td></tr></table></figure><h3 id="4、二维差分"><a href="#4、二维差分" class="headerlink" title="4、二维差分"></a>4、二维差分</h3><h5 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​快速地将一个矩阵中所有数全部加上或者减去一个数，并求出多次操作后的结果。</p></blockquote><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>（1）差分矩阵的构造：<br>    （1.1）将差分数组看作全部都是0，将原数组中的数处理后，一个一个插入到差分数组中<br>    （1.2）先全部上c，再将不需要加上c的地方进行补丁，即减去c<br>        b[x1][y1] +&#x3D; c;  &#x2F;&#x2F;以(x1, y1)为左上角顶点的所有矩阵中的元素全部加上了c这个数<br>        b[x2 + 1][y1] -&#x3D; c; &#x2F;&#x2F;以(x2 + 1, y1)为左上角顶点的所有矩阵中的元素全部减去了c这个数<br>        b[x1][y2 + 1] -&#x3D; c; &#x2F;&#x2F;以(x1, y2 + 1)为左上角顶点的所有矩阵中的元素全部减去了c这个数<br>        b[x2 + 1][y2 + 1] +&#x3D; c; &#x2F;&#x2F;以(x2 + 1, y2 + 1)为左上角顶点的所有矩阵中的元素加上c这个数，前面多减了一次<br>（2）然后根据题目要求在差分数组中指定区间中的每一个数都加上一个数，即在差分数组中的该区域中插入该数<br>（3）将差分数组还原成原数组（前缀和数组）输出即可<br>    b[i][j] +&#x3D; b[i][j - 1] + b[i - 1][j] - b[i - 1][j - 1];</p></blockquote><h5 id="代码模板：-2"><a href="#代码模板：-2" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2, <span class="hljs-type">int</span> c)</span>  <span class="hljs-comment">//初始化差分数组</span></span><br><span class="hljs-function"></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>    b[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)   <span class="hljs-comment">//读取原数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>     <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            <span class="hljs-built_in">insert</span>(i, j, i, j, a[i][j]);    <span class="hljs-comment">//初始化差分数组</span><br>            <br><span class="hljs-comment">//将点(x1, y1)与点(x2, y2)形成的矩阵的所有数都加上c</span><br><span class="hljs-built_in">insert</span>(x1, y1, x2, y2, c);  <span class="hljs-comment">//进行插入数字的操作 </span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            b[i][j] += b[i][j - <span class="hljs-number">1</span>] + b[i - <span class="hljs-number">1</span>][j] - b[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]; <span class="hljs-comment">//将差分数组还原成原数组，即还原成前缀和数组</span><br>            <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b[i][j]);    <span class="hljs-comment">//输出还原后的数组即可            </span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度算法</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法<span id="more"></span></h2><h3 id="1、高精度加法"><a href="#1、高精度加法" class="headerlink" title="1、高精度加法"></a>1、高精度加法</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>求两个大正整数相加的和。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​（1）用可变长数组vectorA，B存储</p><p>​（2）将输入的大数用字符串a，b读入，并逆序存入A，B</p><p>​（3）进行套用高精度模板</p><p>​（4）最后逆序输出答案即可</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; A, B;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">Add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, vector&lt;<span class="hljs-type">int</span>&gt; B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || i &lt; B.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">Add</span>(A, B);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, C[i]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>最后可能会存在一位进位，需要特判，若存在直接push进答案最后即可</p></blockquote><h3 id="2、高精度减法"><a href="#2、高精度减法" class="headerlink" title="2、高精度减法"></a>2、高精度减法</h3><h5 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​求两个大正整数A，B的差。</p></blockquote><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>高精度减法：大数A - 大数B<br>（1）用可变长数组vector存储A，B<br>（2）将字符串a、b逆序存入数组A、B中<br>（3）为了计算方便，我们再计算之前先保证较大的数减去较小的数，即我们要先判读出A、B谁大<br>    （3.1）自定一个比较大小的cmp函数，用于返回若 A &gt; B,返回true，反之返回false<br>    （3.2）cmp函数的构造分为两种情况    位数相同 和  位数不同<br>    （3.3）位数不同：肯定是位数长的数大<br>    （3.4）位数相同，我们就需要从后向前遍历两个数组（因为我们已经逆序存储了），<br>    找到第一个不相同的数进行比较，谁大，说明该数组表示的数大<br>（4）高精度减法的构造<br>    （4.1）定义一个答案数组和临时变量t（存放借位）<br>    （4.2）从前到后遍历较大数组（因为是逆序存储，所以原本低位相减变成了现在的前面的数相减）：<br>    （4.3）每一次遍历，先让较大的数减去借位，然后再减去较小的数中（需要判读较小的数是否还剩于）<br>    （4.4）因为有可能相减为负数，这里利用一个技巧直接将(t + 10) % 10的结果加入答案末尾即可，这里保证了加入的一定是相减结果的绝对值<br>    （4.5）更新借位，<br>        如果t为负数，说明在相减的时候，借位了，让 t &#x3D; 1，表示借了一位，保留到下一次计算进行减去<br>        如果t为正数，说明在相减的时候，没有借位，让借位置零即可<br>    （4.6）最后再进行去前导0即可<br>        如果答案的长度大于1，且答案最后有0，就将0弹出即可<br>（5）最后逆序输出答案即可</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span> <span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() != B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>() &gt; B.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (A[i] != B[i]) <span class="hljs-keyword">return</span> A[i] &gt; B[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, vector&lt;<span class="hljs-type">int</span>&gt; B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; A, B, C;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cmp</span>(A, B)) C = <span class="hljs-built_in">sub</span>(A, B);<br>    <span class="hljs-keyword">else</span> C = <span class="hljs-built_in">sub</span>(B, A), cout &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) cout &lt;&lt; C[i];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）首先一定要保证是用大于减小数，故需要实现一个cmp函数</p><p>​（2）其次由于保证了是大数减小数，故不存在剩一位的情况，一定能减得下，故一定会被存进答案里</p><p>​（3）由于高位在后，低位在前，故有可能存在前导零，故需要取前导零。</p></blockquote><h3 id="3、高精度乘法"><a href="#3、高精度乘法" class="headerlink" title="3、高精度乘法"></a>3、高精度乘法</h3><h5 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​求一个大正整数与一个数的乘积。</p></blockquote><h5 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>（1）用可变长数组vector存储A</p><p>（2）将字符串a逆序存入数组A中<br>（3）高精度乘法的构造：<br>    （3.1）定义一个答案数组，并且初始化进位t<br>    （3.2）从头到尾遍历大数A，<br>    （3.3）将每一位与b的乘积的计算结果放入t中<br>    （3.4）将t % 10的结果放入答案数组的末尾<br>    （3.5）更新进位t<br>    （3.6）看进位t是否还有数，如果还有，就在答案数组末尾加入该数<br>    （3.7）去前导0<br>（4）逆序输出答案数组即可</p></blockquote><h5 id="代码模板：-2"><a href="#代码模板：-2" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;  i &lt; A.<span class="hljs-built_in">size</span>() || t; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br><br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(t);<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <span class="hljs-type">int</span> b;<br>    cin &gt;&gt; a &gt;&gt; b;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- ) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">mul</span>(A, b);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) cout &lt;&lt; C[i];<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）由于可能最后的答案可能为0，故需要去除前导零的情况。</p><p>​（2）由于可能最后一位计算后大于了10，还没有进位，故需要判断是否还有剩位，有则直接放在答案末尾即可。</p></blockquote><h3 id="4、高精度除法"><a href="#4、高精度除法" class="headerlink" title="4、高精度除法"></a>4、高精度除法</h3><h5 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​求一个一个非负大整数A与一个整数b的商和余数。</p></blockquote><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>高精度除法：大数A &#x2F; 小数b<br>（1）用可变长数组vector存储A<br>（2）将字符串a逆序存入数组A中<br>（3）构造高精度除法<br>    （3.1）定义答案数组，以及初始化余数t，由于余数最后要输出， 可以定义成全局变量<br>    （3.2）从后往前遍历大数（大数是逆序存储到数组的，但这里除法需要从高位开始计算，所以从最后一位即大数的高位开始）<br>    （3.3）每一位数 + 余数 * 10 ，进行计算<br>    （3.4）将上一步的结果 除 b 的结果放入答案数组<br>    （3.5）最后更新余数 t %&#x3D; b<br>    （3.6）将答案数组翻转，因为最后的输出是逆序输出的<br>    （3.7）去前导0<br>（4）逆序输出答案数组即可</p></blockquote><h5 id="代码模板：-3"><a href="#代码模板：-3" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br><br>    t = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --)<br>    &#123;<br>        t = A[i] + t * <span class="hljs-number">10</span>;<br>        C.<span class="hljs-built_in">push_back</span>(t / b);<br>        t %= b;<br>    &#125;<br><br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">auto</span> C = <span class="hljs-built_in">div</span>(A, b);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --) cout &lt;&lt; C[i];<br>    cout &lt;&lt; endl &lt;&lt; t;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）由于做除法只能从高位做，且模板都是逆序存，逆序输出，为了统一模板，则在除法模板中写的有些复杂</p><p>​（2）除法模板与其他模板不同，需要逆序逐位除，即高位往低位算</p><p>​（3）算出来之后，由于我们需要逆序输出，故我们要将求出来的答案用reverse进行翻转</p><p>​（4）然后由于可能前几位除不下，故需要进行去前导零。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找<span id="more"></span></h2><h3 id="1、整数二分："><a href="#1、整数二分：" class="headerlink" title="1、整数二分："></a>1、整数二分：</h3><h5 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span> (l &lt; r)       <span class="hljs-comment">//当l &gt;= r 时，遍历结束，停止循环</span><br>&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (q[mid] &gt;= x) r = mid;   <span class="hljs-comment">//check函数 当这个点，大于等于x，说明答案在左边，从右边缩小范围</span><br><span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;   <span class="hljs-comment">//反之，答案在右边，从左边缩小范围</span><br>&#125;<br><br> <span class="hljs-keyword">while</span> (l &lt; r)<br>&#123;<br><span class="hljs-keyword">if</span> (q[mid] &lt;= x) l = mid;   <span class="hljs-comment">//check函数，当这个点，小于等于x时，答案在右边，从左边缩小范围</span><br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;   <span class="hljs-comment">//反之，答案在左边，从右边缩小范围</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、小数二分"><a href="#2、小数二分" class="headerlink" title="2、小数二分"></a>2、小数二分</h3><h5 id="模板：-1"><a href="#模板：-1" class="headerlink" title="模板："></a>模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">double</span> eps; <span class="hljs-comment">//一般比题目要求多两位</span><br><br><span class="hljs-keyword">while</span> (r - l &gt; eps)  <span class="hljs-comment">//只要 r - l 不小于该大小，就不断进行二分，找值</span><br>    &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (mid * mid * mid &gt;= n) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/04/05/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序<span id="more"></span></h2><h3 id="1、快速排序"><a href="#1、快速排序" class="headerlink" title="1、快速排序"></a>1、快速排序</h3><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>（1）定义出口<br>（2）选取一个随机点，以及确定左右边界<br>（3）i，j两个指针从左右两个边界向中间移动<br>    （3.1）左指针找到需要交换的值（大于参考点的值），就停下来<br>    （3.2）右指针找到需要交换的值（小于参考点的值），就停下来<br>    （3.3）当两个指针都停下来，且i指针在j指针左边时，交换两个值<br>（4）递归将每一个部分都进行同样的操作，直至细分到最小时，就满足了整个区间从左到右有序排列</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//边界条件 </span><br>    <span class="hljs-keyword">if</span>(l&gt;=r)<span class="hljs-keyword">return</span>;                         <span class="hljs-comment">//当左指针大于等于右指针说明两指针已经遍历了全部数据 </span><br>    <span class="hljs-comment">//确定分界点 </span><br>    <span class="hljs-type">int</span> x=q[l+r&gt;&gt;<span class="hljs-number">1</span>], i= l - <span class="hljs-number">1</span> ,j = r + <span class="hljs-number">1</span>;        <span class="hljs-comment">//随机选取一个数据中的值作为参考值  用i,j表示左右指针，但注意定义时，需要定义在数据外围外 </span><br>    <span class="hljs-keyword">while</span>(i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i++ ; <span class="hljs-keyword">while</span>(q[i]&lt;x);          <span class="hljs-comment">//直到找到第一个不小于参考值x的值，左指针停止 ， 否则左指针不断后移 </span><br>        <span class="hljs-keyword">do</span> j-- ; <span class="hljs-keyword">while</span>(q[j]&gt;x);          <span class="hljs-comment">//直到找到第一个不大于参考值x的值，右指针停止 ， 否则右指针不断左移 </span><br>        <span class="hljs-keyword">if</span>(i &lt; j)<span class="hljs-built_in">swap</span>(q[i],q[j]);        <span class="hljs-comment">//当左右指针都停下，则说明两指针都找到了需要交换的值，则交换两值 </span><br>    &#125;<br><br>    <span class="hljs-built_in">quick_sort</span>(q, l, j);                 <span class="hljs-comment">//将左边部分作为一个新串传入， </span><br>    <span class="hljs-built_in">quick_sort</span>(q, j+<span class="hljs-number">1</span>, r);               <span class="hljs-comment">//将右边部分作为一个新串传入， </span><br>    <span class="hljs-comment">//经过上面的递归则可以完成整个数据的排序 </span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、归并排序"><a href="#2、归并排序" class="headerlink" title="2、归并排序"></a>2、归并排序</h3><h5 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>（1）定义出口 l &gt;&#x3D; r<br>（2）先确定中间点，然后进行左右区间的递归，此时返回的序列为两个有序序列<br>（3）定义左右两个序列的开头<br>（4）同时遍历左右两个序列，每次将两个序列中最小的值拿出来，放到答案里（由于此时两个序列都是有序序列，所以只需要比较两个序列的开头就行了）<br>（5）判断两个序列是否还有元素没有加入，有则直接全部加入即可<br>（6）最后将排好序的数组重新赋值给原数组即可</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>  </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;     <span class="hljs-comment">//出口</span><br><br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;     <span class="hljs-comment">//确定分界点</span><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;  <span class="hljs-comment">//用于计算存到了多少个了</span><br><br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid), <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);       <span class="hljs-comment">//将序列递归成两个有序序列</span><br><br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>;     <span class="hljs-comment">//定义左右序列的开头</span><br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)  <span class="hljs-comment">//判断两个序列是否有一个序列已经遍历完成</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) temp[k ++] = q[i++];<br>        <span class="hljs-keyword">else</span> temp[k ++] = q[j++];<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) temp[k ++] = q[i++];   <span class="hljs-comment">//将剩余序列的元素直接加入</span><br>    <span class="hljs-keyword">while</span> (j &lt;= r) temp[k ++] = q[j++];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++) q[i] = temp[j]; <span class="hljs-comment">//将数组复原</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="/2023/04/05/%E6%9D%82%E7%B1%BB/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
      <url>/2023/04/05/%E6%9D%82%E7%B1%BB/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="n进制下的数s转换为m"><a href="#n进制下的数s转换为m" class="headerlink" title="n进制下的数s转换为m"></a>n进制下的数s转换为m<span id="more"></span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">char</span> a)</span> <span class="hljs-comment">//字符转数字</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;A&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;B&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;C&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;D&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">13</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-string">&#x27;E&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">14</span>;<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-string">&#x27;F&#x27;</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(a - <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">fun2</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">11</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;B&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">12</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">13</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;D&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">14</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;E&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">15</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;F&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">char</span> (a + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n, m, p = <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;   <span class="hljs-comment">//p为当前位次（百位，千位，万位等。）</span><br>    string s, res = <span class="hljs-string">&quot;&quot;</span>;<br><br>    cin &gt;&gt; n &gt;&gt; s &gt;&gt; m; <span class="hljs-comment">//前进制，数，后进制</span><br><br>    <span class="hljs-comment">//从低位到高位，将字符转换为数字</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i --)<br>    &#123;<br>        sum += <span class="hljs-built_in">fun1</span>(s[i]) * p ;   <span class="hljs-comment">//当前位等于转为为数字之后，乘上当前位次</span><br>        p *= n; <span class="hljs-comment">//更新位次</span><br>    &#125;<br>    <span class="hljs-comment">//因为可能存在16进制，将当前数转换为字符串输出</span><br>    <span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>)<br>    &#123;<br>        res = <span class="hljs-built_in">fun2</span>(sum % m) + res;   <span class="hljs-comment">//由低位向高位逐级求出，然后放入答案</span><br>        sum /= m; <span class="hljs-comment">//更新数字</span><br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 杂类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间DP</title>
      <link href="/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[<h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP<span id="more"></span></h2><h3 id="1、石子合并："><a href="#1、石子合并：" class="headerlink" title="1、石子合并："></a>1、石子合并：</h3><blockquote><p>​每堆石子有一定的质量，可以用一个整数来描述，现在要将这 N 堆石子合并成为一堆。</p><p>​每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。</p><p>​问题是：找出一种合理的方法，使总的代价最小，输出最小代价。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>核心思路：从小区间逐步扩展区间，最后得到整个区间的最优解</p><p>（1）区间长度从小到大枚举</p><p>（2）每种长度都进行所有起点的枚举<br>（3）将区间(l, r)合并所需要的代价初始化为无穷大<br>（4）然后对该区间进行状态转移，每次都拿出最后一个状态，进行比较</p></blockquote><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; s[i];  <span class="hljs-comment">//读入数组</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) s[i] += s[i - <span class="hljs-number">1</span>]; <span class="hljs-comment">//求其前缀和</span><br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len ++) <span class="hljs-comment">//枚举长度</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + len - <span class="hljs-number">1</span> &lt;= n; i ++) <span class="hljs-comment">//从前到后，枚举不同长度下，给左边区域和右边区域分配不同数量是的代价，求最小值</span><br>       &#123;<br>           <span class="hljs-type">int</span> l = i, r = i + len - <span class="hljs-number">1</span>; <span class="hljs-comment">//以当前位置为左边部分（只有一个数），剩余部分都是右边部分</span><br>           f[l][r] = <span class="hljs-number">1e8</span>;  <span class="hljs-comment">//先将所有从第l堆石子到第r堆石子合并到一堆石子的代价置为无穷</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt; r; k ++)    <span class="hljs-comment">//逐渐将右边的数拿给左边求代价，右边至少留一个</span><br>               f[l][r] = <span class="hljs-built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="hljs-number">1</span>][r] + s[r] - s[l - <span class="hljs-number">1</span>]);<br>       &#125;<br><br>   <span class="hljs-comment">//所有将第1堆石子到第n堆石子合并的所有方式的代价最小值</span><br>   cout &lt;&lt; f[<span class="hljs-number">1</span>][n] &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h5 id="核心："><a href="#核心：" class="headerlink" title="核心："></a>核心：</h5><blockquote><p>​区间合并的问题，通用的一个模板：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">1</span>; len &lt;= n; len++) &#123;         <span class="hljs-comment">// 区间长度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + len - <span class="hljs-number">1</span> &lt;= n; i++) &#123; <span class="hljs-comment">// 枚举起点</span><br>        <span class="hljs-type">int</span> j = i + len - <span class="hljs-number">1</span>;                 <span class="hljs-comment">// 区间终点</span><br>        <span class="hljs-keyword">if</span> (len == <span class="hljs-number">1</span>) &#123;<br>            dp[i][j] = 初始值<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt; j; k++) &#123;        <span class="hljs-comment">// 枚举分割点，构造状态转移方程</span><br>            dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i][k] + dp[k + <span class="hljs-number">1</span>][j] + w[i][j]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性DP</title>
      <link href="/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/"/>
      <url>/2023/04/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%BA%BF%E6%80%A7DP/</url>
      
        <content type="html"><![CDATA[<h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP<span id="more"></span></h2><h3 id="1、数字三角形模型"><a href="#1、数字三角形模型" class="headerlink" title="1、数字三角形模型"></a>1、数字三角形模型</h3><h5 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h5><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​从某个顶点出发，走到最底层或者最底层的某个点，求该路径的数字和的最大值。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>状态表示：f[i][j]<br>集合：所有从起点走到(i, j)的路径<br>属性：MAX</p><p>集合划分：以最后一个点是由左上方来的，还是右上方来的进行划分。</p><p>状态转移方程：f[i][j] &#x3D; max(f[i - 1][j - 1], f[i - 1][j]) + g[i][j];</p></blockquote><p><img src="/images/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2.png" alt="数字三角形"></p><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n + <span class="hljs-number">1</span>; j ++)<br>            f[i][j] = <span class="hljs-number">-2e9</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j ++)<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][j]) + g[i][j];<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​在这里DP问题时，初始化需要特别注意。</p><p>​这里的初始化有两种，目的都是为了处理负数的情况：</p><p>​（1）第一种是按照模板那样写</p><p>​（2）第二种是，直接用memset函数，将f数组全部设置为-INF，memset(f, -0x3f, sizeof g);</p><p>​此时需要将特判第一个点，将起点赋值为f[1][1] &#x3D; g[1][1]，并在循环里从第二行开始处理，即跳过已经处理过的起点</p></blockquote><h5 id="拓展1："><a href="#拓展1：" class="headerlink" title="拓展1："></a>拓展1：</h5><blockquote><p>​若地图是一个矩形，且求的是最小值，题目见</p><p>[最低通行费]: <a href="https://www.acwing.com/problem/content/1020/">https://www.acwing.com/problem/content/1020/</a>“ “</p></blockquote><h6 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h6><blockquote><p>​初始化时由于我们发现第一排只能是从左到右更新，第一列只能是从上到下更新，故需要特判，具体见下述代码。但我们发现这样会导致起点无法遍历，故需要直接单独处理起点。</p></blockquote><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = g[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) f[i][j] = <span class="hljs-built_in">min</span>(f[i - <span class="hljs-number">1</span>][j] + g[i][j], f[i][j]);<br>                <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i][j - <span class="hljs-number">1</span>] + g[i][j]);<br>            &#125;<br></code></pre></td></tr></table></figure><h5 id="拓展2："><a href="#拓展2：" class="headerlink" title="拓展2："></a>拓展2：</h5><blockquote><p>​若整个地图走了两遍，该如何处理？例题，见</p><p>[方格取数]: <a href="https://www.acwing.com/problem/content/1029/">https://www.acwing.com/problem/content/1029/</a>“ “</p><p>​题目类似的还有</p><p>[传纸条]: <a href="https://www.acwing.com/problem/content/277/">https://www.acwing.com/problem/content/277/</a>“传纸条”</p></blockquote><h6 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h6><blockquote><p>​只走一次：</p><p>​f[i][j]表示所有从(1,1)走到(i,j)的路径的最大值</p><p>​f[i][j] &#x3D; max(f[i - 1][j], f[i][j - 1]) + w[i][j]；</p><p>​走两次：</p><p>​f[i1,j1,i2,j2]表示所有从(1,1),(1,1)分别走到(i1,j1),(i2,j2)路径的最大值。</p><p>​如何处理“同一个格子不能被重复选择”？<br>​    分析后发现，只有当i1 + j1 &#x3D;&#x3D; i2 + j2时，两条路径的格子才可能重合，<br>​    于是可以根据这条性质将思维优化成三维，</p><p>​集合：f[k,i1,i2]表示所有从(1,1),(1,1)走到(i1,k-i1),(i2,k-i2)的路径的最大值<br>   ​ k表示两条路线当前走到的格子的横纵坐标之和</p><p>​属性：max</p><p>​状态计算：<br>​    以最后一步是从往下走还是往右走进行划分，因为有两次走法，所以被分成了四种情况<br>​        下下、下右、右下、右右</p></blockquote><h6 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= n + n; k ++)   <span class="hljs-comment">//枚举横纵坐标之和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i1 = <span class="hljs-number">1</span>; i1 &lt;= n; i1 ++)    <span class="hljs-comment">//枚举第一次走的横坐标</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i2 = <span class="hljs-number">1</span>; i2 &lt;= n; i2 ++)    <span class="hljs-comment">//枚举第二次走的横坐标</span><br>            &#123;<br>                <span class="hljs-type">int</span> j1 = k - i1, j2 = k - i2;   <span class="hljs-comment">//计算出两次走的纵坐标</span><br>                <span class="hljs-keyword">if</span> (j1 &gt;= <span class="hljs-number">1</span> &amp;&amp; j1 &lt;= n &amp;&amp; j2 &gt;= <span class="hljs-number">1</span> &amp;&amp; j2 &lt;= n)<br>                &#123;<br>                    <span class="hljs-type">int</span> t = g[i1][j1];  <span class="hljs-comment">//如果两个坐标相等，只加一次，因为第二次走这里，已经被拿走清空了</span><br>                    <span class="hljs-keyword">if</span> (i1 != i2) t += g[i2][j2];   <span class="hljs-comment">//坐标不相同，就两个位置全加上</span><br>                    <span class="hljs-type">int</span> &amp;x = f[k][i1][i2];<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2 - <span class="hljs-number">1</span>] + t);   <span class="hljs-comment">//下 下</span><br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2] + t);       <span class="hljs-comment">//下 右</span><br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2 - <span class="hljs-number">1</span>] + t);       <span class="hljs-comment">//右 下</span><br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2] + t);            <span class="hljs-comment">//右 右</span><br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><h6 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h6><blockquote><p>（1）为什么下面四个状态转移方程能代表四种状态？</p><p>​原因是，因为k 变小了1，先不看最后一步，如果i变小1，则j就不用变；如果i没有变，则j就需要变小1；</p><p>​上述两种情况刚好对应了最后一步是向下、右走，的横纵坐标变化情况，又因为是两次一起走，故有四种情况。</p><p>​x &#x3D; max(x, f[k - 1][i1 - 1][i2 - 1] + t);   &#x2F;&#x2F;下 下<br>​x &#x3D; max(x, f[k - 1][i1 - 1][i2] + t);       &#x2F;&#x2F;下 右<br>​x &#x3D; max(x, f[k - 1][i1][i2 - 1] + t);       &#x2F;&#x2F;右 下<br>​x &#x3D; max(x, f[k - 1][i1][i2] + t);            &#x2F;&#x2F;右 右</p><p>​（2）在开数组的时候，第一维即横纵坐标之和一定要开数据范围的两倍</p></blockquote><h3 id="2、最短编辑距离"><a href="#2、最短编辑距离" class="headerlink" title="2、最短编辑距离"></a>2、最短编辑距离</h3><h5 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​对一个字符串A进行和删除、插入、替换的操作，使得A字符串与给定的B字符串相等，求最少的操作次数。</p></blockquote><h5 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​根据最后一步操作的不同进行分析：<br>​（1）删掉ai后，a与b一模一样，则需要满足a的1 ~ i - 1个字母与b的1 ~ j个字母匹配才能满足，所以先去掉最后一步，去找a的1 ~ i - 1变成b的1 ~ j - 1个字母匹配所需要的步数的最小值f[i - 1][j] + 1<br>​（2）增加一个字母，a与b一模一样，则需要满足增加之前，a的1 ~ i个字母与b的 1 ~ j - 1个字母匹配f[i][j - 1] + 1<br>​（3）改掉ai后，a与b一模一样，则需要满足的是a的1 ~ i - 1个字母与b的 1 ~ j - 1个字母匹配才行，这里分为两种情况，<br>​一种是ai与bi一样，不需要改，步数不用增加f[i - 1][j - 1],<br>​一种是ai与bi不一样，需要改，步数需要增加f[i - 1][j - 1] + 1;</p><p>​需要初始化的两种边界情况：<br>​（1）a的前0个字母去匹配b的前j个字母时，只能通过增加的方式，且增加的步数为b的前j个字母的长度<br>​（2）a的前i个字母去匹配b的前0个字母时，只能通过删除的方式，且删除的步数为a的前i个字母的长度</p><p>​集合：f[i][j]，将第一个子串前i个字符与第二个字串前j个字符变成一样的操作方法<br>​属性：min</p><p>​集合划分：删除、插入、替换三种不同操作<br>​状态计算：<br>​（1）删除：需要a[1<del>i - 1] &#x3D; b[1</del>j]<br>​（2）插入：需要a[1<del>i] &#x3D; b[1</del>j-1]<br>​（3）替换：需要a[1<del>i-1] &#x3D; b[1</del>j-1]</p></blockquote><p><img src="/images/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB.png" alt="编辑距离"></p><h5 id="代码模板：-2"><a href="#代码模板：-2" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%s&quot;</span>, &amp;n, a + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%s&quot;</span>, &amp;m, b + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i ++) f[<span class="hljs-number">0</span>][i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i ++) f[i][<span class="hljs-number">0</span>] = i;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>        &#123;<br>            f[i][j] = <span class="hljs-built_in">min</span>(f[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>, f[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);    <span class="hljs-comment">//删和增</span><br>            <span class="hljs-keyword">if</span> (a[i] == b[j]) f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]);  <span class="hljs-comment">//改</span><br>            <span class="hljs-keyword">else</span> f[i][j] = <span class="hljs-built_in">min</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​由于做dp需要涉及 i - 1 和 j - 1，故字符串的下标需要从1开始</p></blockquote><h3 id="3、最长上升子序列模型"><a href="#3、最长上升子序列模型" class="headerlink" title="3、最长上升子序列模型"></a>3、最长上升子序列模型</h3><h5 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​给定一个长度为N的数列，求数值严格单调递增的子序列的长度最长是多少。</p></blockquote><h5 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>集合：f[i]表示所有以数字i结尾的上升子序列的集合<br>属性：max</p><p>状态划分：以倒数第二个数为1，2，3，4，，，，i - 1进行划分<br>只要倒数第二个数满足条件：a[j] &lt; a[i]，则可以用下面的状态方程进行转移<br>f[i] &#x3D; max(f[i], f[j] + 1);</p></blockquote><p><img src="/images/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B.png" alt="最长上升子序列模型"></p><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j ++)<br>            <span class="hljs-keyword">if</span> (a[j] &lt; a[i]) f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>        res = <span class="hljs-built_in">max</span>(f[i], res);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）if (a[j] &lt; a[i])    &#x2F;&#x2F;用前面已经算好的最长上升序列更新第i个值的最长上升子序列，所以需要满足a[j]&lt;a[i]，只要满足该条件，就说明目前的最长上升子序列为a[j]+1或者f[i]，f[i]指之前算出过的该点的最长上升子序列。</p><p>​（2）关于为什么要初始化f[i] &#x3D; 1？</p><p>​有一个边界，若前面没有比i小的，f[i]为1（自己为结尾）</p></blockquote><p>​</p><h3 id="4、最长公共子序列"><a href="#4、最长公共子序列" class="headerlink" title="4、最长公共子序列"></a>4、最长公共子序列</h3><h5 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​给定两个长度分别为 N 和 M 的字符串 A 和 B，求既是 A 的子序列又是 B的子序列的字符串长度最长是多少。</p></blockquote><h5 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>集合f[i][j]:表示所有在第一个序列前i个字母中出现，且在第二个序列前j个字母中出现的子序列<br>集合划分：以a[i],b[j]是否出现在子序列中划分<br>（1）00：都没有出现，f[i - 1][j - 1]<br>（2）01：a[i]没有出现，b[j]出现，由于直接求不好求，这里用f[i - 1][j]进行替代<br>（3）10：a[i]出现，b[j]没有出现，由于直接求不好求，这里用f[i][j - 1]进行替代<br>（4）11：a[i]、b[j]都出现，f[i - 1][j - 1] + 1</p></blockquote><h5 id="代码模板：-3"><a href="#代码模板：-3" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>        &#123;<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (a[i] == b[j]) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-4"><a href="#注意：-4" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（2）、（3）步中的替代是不影响最终结果的：（2）中因为f[i - 1][j]表示所有在第一个序列中前i - 1个字母中出现，且在第二个序列前j个字母中出现的子序列，这里包含了a[i]不出现，b[j]出现的情况，虽然有部分重复，但由于我们求的是最大值，即使重复求，也不会影响我们所求的最大值，（3）同理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推公式</title>
      <link href="/2023/04/04/%E8%B4%AA%E5%BF%83/%E6%8E%A8%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/04/04/%E8%B4%AA%E5%BF%83/%E6%8E%A8%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="推公式"><a href="#推公式" class="headerlink" title="推公式"></a>推公式<span id="more"></span></h2><h3 id="1、耍杂技的牛"><a href="#1、耍杂技的牛" class="headerlink" title="1、耍杂技的牛"></a>1、耍杂技的牛</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​有N头牛，每头牛都有自己的 重量W 和强壮程度 S，奶牛们站在彼此的身上，形成一个高高的垂直堆叠，一头牛支撑不住的可能性取决于它头上所有牛的总重量（不包括它自己）减去它的身体强壮程度的值，现在称该数值为风险值，风险值越大，这只牛撑不住的可能性越高。</p><p>​您的任务是确定奶牛的排序，使得所有奶牛的风险值中的最大值尽可能的小。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​按照wi + si从小到大排序，最大的危险系数一定是最小的。</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> w, s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w, &amp;s);<br>        cow[i] = &#123;s + w, w&#125;;<br>    &#125;<br><br><span class="hljs-built_in">sort</span>(cow, cow + n);<br><br><span class="hljs-type">int</span> res = <span class="hljs-number">-2e9</span>, sum = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>&#123;<br>    <span class="hljs-comment">//取出当前牛的重量和强壮值</span><br>    <span class="hljs-type">int</span> w = cow[i].second, s = cow[i].first - w;<br>    res = <span class="hljs-built_in">max</span>(res, sum - s);    <span class="hljs-comment">//更新最大的危险系数</span><br>    sum += w;   <span class="hljs-comment">//更新后一头牛所需要承担的重量</span><br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, res);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝对值不等式</title>
      <link href="/2023/04/04/%E8%B4%AA%E5%BF%83/%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
      <url>/2023/04/04/%E8%B4%AA%E5%BF%83/%E7%BB%9D%E5%AF%B9%E5%80%BC%E4%B8%8D%E7%AD%89%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式<span id="more"></span></h2><h3 id="1、货舱选址："><a href="#1、货舱选址：" class="headerlink" title="1、货舱选址："></a>1、货舱选址：</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​在数轴上建立一家货仓，每天清晨，从货仓到数轴上每家商店都要运送一车商品。</p><p>为了提高效率，求把货仓建在何处，可以使得货仓到每家商店的距离之和最小。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​仓库建立在所有商家的中间，即数轴的中位数。即只需要进行排序然后分别求出每个店家与所有店家中位数的距离相加即答案。</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) cin &gt;&gt; a[i];<br><span class="hljs-built_in">sort</span>(a, a + n);<br><br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) res += <span class="hljs-built_in">abs</span>(a[i] - a[n / <span class="hljs-number">2</span>]);<br><br>cout &lt;&lt; res;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​数组下标从0或者1开始，与其对应的中位数索引不同。</p><p>​（1）下标从0开始：中位数a[n &#x2F; 2 + 1]</p><p>​（2）下标从1开始：中位数a[n &#x2F; 2]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序不等式</title>
      <link href="/2023/04/04/%E8%B4%AA%E5%BF%83/%E6%8E%92%E5%BA%8F%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
      <url>/2023/04/04/%E8%B4%AA%E5%BF%83/%E6%8E%92%E5%BA%8F%E4%B8%8D%E7%AD%89%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="排序不等式"><a href="#排序不等式" class="headerlink" title="排序不等式"></a>排序不等式<span id="more"></span></h2><h3 id="1、排队打水："><a href="#1、排队打水：" class="headerlink" title="1、排队打水："></a>1、排队打水：</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​有n个人排队到1个水龙头打水，第i个人装满水桶所需要的时间是t，如何安排他们的打水顺序，才能使所有人等待的时间之和最小？</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​按照打水时间从小到大排序即可，总时间最小</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) cin &gt;&gt; a[i];<span class="hljs-comment">//读入</span><br><br><span class="hljs-built_in">sort</span>(a, a + n);<span class="hljs-comment">//排序</span><br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span>  res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>&#123;<br>    res += a[i] * (n - i - <span class="hljs-number">1</span>); <span class="hljs-comment">//每次打水，后面都会有 n - i - 1个人等他</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Huffman树</title>
      <link href="/2023/04/04/%E8%B4%AA%E5%BF%83/Huffman%E6%A0%91/"/>
      <url>/2023/04/04/%E8%B4%AA%E5%BF%83/Huffman%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树<span id="more"></span></h2><h3 id="1、合并果子："><a href="#1、合并果子：" class="headerlink" title="1、合并果子："></a>1、合并果子：</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​将若干堆果子合并到一堆，每次可以将任意两堆进行合并。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​每次选取最少的两堆进行合并即可，采用优先队列，即小根堆进行存储所有果子。</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; heap; <span class="hljs-comment">//小根堆定义</span><br>    <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    cin &gt;&gt; x;<br>    heap.<span class="hljs-built_in">push</span>(x); <span class="hljs-comment">//入堆</span><br>&#125;<br><br><span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-type">int</span> a = heap.<span class="hljs-built_in">top</span>(); heap.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//取出堆顶并剔除</span><br>    <span class="hljs-type">int</span> b = heap.<span class="hljs-built_in">top</span>(); heap.<span class="hljs-built_in">pop</span>();<br>    res += a + b;<br>        <br>    heap.<span class="hljs-built_in">push</span>(a + b);<span class="hljs-comment">//将合并得到的新堆加入堆中</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​很容易忽略的一点是，没有将合并得到的新堆加入堆中。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间贪心</title>
      <link href="/2023/04/04/%E8%B4%AA%E5%BF%83/%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83/"/>
      <url>/2023/04/04/%E8%B4%AA%E5%BF%83/%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="四种区间贪心问题"><a href="#四种区间贪心问题" class="headerlink" title="四种区间贪心问题"></a>四种区间贪心问题<span id="more"></span></h2><h3 id="1、区间选点"><a href="#1、区间选点" class="headerlink" title="1、区间选点"></a>1、区间选点</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>   给定 N 个闭区间 [ai,bi]，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。<br>   输出选择的点的最小数量。</p></blockquote><h5 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​（1）定义一个pair&lt;int, int&gt;类型的数组，进行所有区间的维护，将所有区间按右端点从小到大进行排序<br>​（2）从前往后遍历所有区间，如果当前区间与后一个区间没有交集（即后一个区间的左端点大于前一个区间的右端点），相当于把有交集的区间用一个点进行替代，然后答案 ++，更新新区间的右端点<br>​（3）有交集则不用进行任何处理，因为右端点是按照从小到大进行排序的，我们正需要保证右端点是最小的，故当前枚举到的区间右端点就是最小的</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//区间维护</span><br>   PII e[N];<br><br>   <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(PII a, PII b)</span> <span class="hljs-comment">//自定义右端点排序</span></span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-keyword">return</span> a.y &lt; b.y;<br>   &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; e[i].x &gt;&gt; e[i].y;<span class="hljs-comment">//输入区间</span><br>   <span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + <span class="hljs-number">1</span> + n, cmp);<span class="hljs-comment">//排序</span><br>   <br>   <span class="hljs-type">int</span> ed = <span class="hljs-number">-0x3f3f3f3f</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<span class="hljs-comment">//进行枚举</span><br>   &#123;<br>       <span class="hljs-keyword">if</span> (e[i].x &gt; ed) res ++, ed = e[i].y;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​在区间有交集的时候，一定不要更新右端点了，因为我们需要的就是选定区间中的最小右端点，这与我们按照右端点进行从小到大排序是刚好符合的。</p></blockquote><h5 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h5><blockquote><p>略</p></blockquote><h3 id="2、最大不相交区间数量"><a href="#2、最大不相交区间数量" class="headerlink" title="2、最大不相交区间数量"></a>2、最大不相交区间数量</h3><h5 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​给定N个区间[a, b]，请你在数轴上选择若干区间，使得选中的区间之间互不相交（包括端点）。输出可选取区间的最大数量。</p></blockquote><h5 id="核心思路：-1"><a href="#核心思路：-1" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​将所有有交集的区间看作一个区间，因为每次只能选择有交集中的一个，故这样假设没有错，即我们在前往后枚举每个区间的时候，遇到有交集的区间就跳过，只需要在每次遇到没有交集的区间的时候进行统计，步骤如下：</p><p>（1）定义一个pair&lt;int, int&gt;类型的数组，进行所有区间的维护，将所有区间按右端点从小到大进行排序<br>（2）从前往后遍历所有区间，如果当前区间与后一个区间没有交集（即后一个区间的左端点大于前一个区间的右端点），相当于把有交集的区间看作一个区间，然后在遇到没有交集的区间时，答案 ++，更新新区间的右端点<br>（3）有交集则不用进行任何处理，因为我们将他们看作一个区间</p></blockquote><h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">   <span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//区间维护</span><br>   PII e[N];<br><br>   <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(PII a, PII b)</span> <span class="hljs-comment">//自定义右端点排序</span></span><br><span class="hljs-function">   </span>&#123;<br>       <span class="hljs-keyword">return</span> a.y &lt; b.y;<br>   &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; e[i].x &gt;&gt; e[i].y;<span class="hljs-comment">//输入区间</span><br>   <span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + <span class="hljs-number">1</span> + n, cmp);<span class="hljs-comment">//排序</span><br>   <br>   <span class="hljs-type">int</span> ed = <span class="hljs-number">-0x3f3f3f3f</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<span class="hljs-comment">//进行枚举</span><br>   &#123;<br>       <span class="hljs-keyword">if</span> (e[i].x &gt; ed) res ++, ed = e[i].y;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="证明：-1"><a href="#证明：-1" class="headerlink" title="证明："></a>证明：</h5><blockquote><p>略</p></blockquote><h3 id="3、区间分组"><a href="#3、区间分组" class="headerlink" title="3、区间分组"></a>3、区间分组</h3><h5 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>给定N个闭区间[a, b]，请你将这些区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使组数尽可能小。</p></blockquote><h5 id="核心思路：-2"><a href="#核心思路：-2" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​我们需要思考，想要将当前区间加入到已有的集合中，则必选满足当前区间与某个集合中的所有区间都没有交集，即当前区间的左端点要大于某个集合的所有右端点，贪心一下，我们只需要维护一个小根堆，存入每个组的最大右端点，在判断能否加入当前组的时候，就与堆顶元素（所有组里最小的最大右区间）步骤如下：</p><p>​（1）先将所有区间按照左端点从小到大排序</p><p>​（2）从前往后处理每一个区间</p><p>​（3）判断是否能放入当前某一个组内：能放的条件是当前一个组都没有或者现有的组中，存在一个组的最大右区间，可以用小根堆的堆顶元素作为边界，大于则可以放入现有组，小于等于则无法放入</p><p>​（4）存在这样的组，就把该区间放入组中，更新当前组的max_r</p><p>​（5）不存在这样的组，就重新创建一个组，将该区间放入</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br>PII e[N];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; e[i].x &gt;&gt; e[i].y;<br>    <span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + <span class="hljs-number">1</span> + n);<br><br>    priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; heap;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (heap.<span class="hljs-built_in">empty</span>() || e[i].x &lt;= heap.<span class="hljs-built_in">top</span>()) heap.<span class="hljs-built_in">push</span>(e[i].y);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            heap.<span class="hljs-built_in">pop</span>();<br>            heap.<span class="hljs-built_in">push</span>(e[i].y);<br>        &#125;<br>    &#125;<br>cout &lt;&lt; heap.<span class="hljs-built_in">size</span>();<br></code></pre></td></tr></table></figure><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>这里用小根堆（优先队列），进行维护每一个组的所有区间最大右区间，则堆顶就是所有组的最大右区间的最小值，<br>也就是一个新区间想要加入现有组的条件，即新区间的左端点要大于该条件</p></blockquote><h5 id="证明：-2"><a href="#证明：-2" class="headerlink" title="证明："></a>证明：</h5><blockquote><p>略</p></blockquote><h3 id="4、区间覆盖"><a href="#4、区间覆盖" class="headerlink" title="4、区间覆盖"></a>4、区间覆盖</h3><h5 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>​给定N个闭区间[a, b]以及一个线性区间[s, t]，请你选择尽量少的区间，将指定线段区间完全覆盖。</p></blockquote><h5 id="核心思路：-3"><a href="#核心思路：-3" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​（1）按照左端点进行排序</p><p>​（2）用双指针算法线性扫描一下所有区间，每次扫描 找出 能覆盖还未覆盖的区间 的左端点的 所有区间中，右端点最大的区间，将start更新为其左端点。</p></blockquote><h5 id="代码模板：-2"><a href="#代码模板：-2" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br>PII e[N];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(PII a, PII b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; e[i].x &gt;&gt; e[i].y;<span class="hljs-comment">//输入</span><br>    <span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + <span class="hljs-number">1</span> + n, cmp);<span class="hljs-comment">//排序</span><br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<span class="hljs-comment">//答案</span><br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//标志位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> j = i, r = <span class="hljs-number">-2e9</span>;<span class="hljs-comment">//获取当前区间，即e[i] ~ ed</span><br>        <span class="hljs-keyword">while</span> (j &lt;= n &amp;&amp; e[j].x &lt;= st)<span class="hljs-comment">//双指针扫描</span><br>        &#123;<br>            r = <span class="hljs-built_in">max</span>(r, e[j].y);<br>            j ++;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (r &lt; st) <span class="hljs-comment">//后面区间无法覆盖，提前结束</span><br>        &#123;<br>            res = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        res ++;<span class="hljs-comment">//可以覆盖，所用区间 ++</span><br>        <br>        <span class="hljs-keyword">if</span> (r &gt;= ed) <span class="hljs-comment">//完全覆盖，标志成功，结束扫描</span><br>        &#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        st = r;<span class="hljs-comment">//更新未扫描区间</span><br>        <br>        i = j - <span class="hljs-number">1</span>;<span class="hljs-comment">//由于for循环中i ++,故这里i更新为需要扫描的点j的前一个点</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (!flag) res = <span class="hljs-number">-1</span>;<br>    cout &lt;&lt; res;<br></code></pre></td></tr></table></figure><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）需要注意的点是几个特判：如果更新后r &lt; st说明剩余区间没有一个区间能够覆盖剩余部分，直接结束扫描，反之则所用的区间 ++；<br>​（2）是当前区间的r &gt;&#x3D; ed，说明需要覆盖的区间已经完全覆盖，标志位设置为true，结束遍历即可。<br>​（3）最后根据标志位判断是否覆盖了全部区间。</p><p>（4）避免遍历重复的区间，但为什么是i &#x3D; j - 1，而不是i &#x3D; j，    因为前j个区间我们已经判断过了，需要判断第j个区间，    但由于for循环结束会i++，如果这里i &#x3D; j，再算上循环结束的i++，    下一次循环遍历的就会是第j + 1个区间，而导致跳过了第j个区间</p></blockquote><h5 id="证明：-3"><a href="#证明：-3" class="headerlink" title="证明："></a>证明：</h5><blockquote><p>略</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2023/04/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="五种背包问题"><a href="#五种背包问题" class="headerlink" title="五种背包问题"></a>五种背包问题<span id="more"></span></h2><h3 id="1、01背包："><a href="#1、01背包：" class="headerlink" title="1、01背包："></a>1、01背包：</h3><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><blockquote><p>从n个物品中选，每个物品只能选一次或者不选，总体积不超过m的情况下，<br>    求总价值最大。</p></blockquote><h5 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><p>​O(nm)</p><h5 id="分析过程："><a href="#分析过程：" class="headerlink" title="分析过程："></a>分析过程：</h5><blockquote><p>​    状态表示：f[i][j]，从前i个物品中选，其总体积不超过j的前提下，所有选法的总价值的最大值<br>​        属性：max<br>​        状态计算：以最后一个物品是否选择进行划分：<br>​        （1）不选：f[i][j] &#x3D; f[i - 1][j];<br>​        （2）选：if (j &gt;&#x3D; v[i]) f[i][j] &#x3D; max(f[i][j], f[i - 1][j - v[i]] + w[i])<br>​    求方案数时，注意是否需要初始化。<br>​        枚举体积一维的时候，注意是从1开始还是0开始，且枚举体积时由于每次用的是上一层的状态，故需要从后往前枚举。</p></blockquote><h5 id="状态转移方程："><a href="#状态转移方程：" class="headerlink" title="状态转移方程："></a>状态转移方程：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">f[i][j] = f[i - <span class="hljs-number">1</span>][j];  <span class="hljs-comment">//不含i的一定存在</span><br>           <span class="hljs-keyword">if</span> (j &gt;= v[i]) f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i - <span class="hljs-number">1</span>][j - v[i]] + w[i]);<span class="hljs-comment">//只有背包装的下第i个物品时，才存在这种情况</span><br></code></pre></td></tr></table></figure><h3 id="2、完全背包："><a href="#2、完全背包：" class="headerlink" title="2、完全背包："></a>2、完全背包：</h3><h5 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>从n个物品中选，每个物品可以选无数次，总体积不超过m的情况下，求总价值的<br>    最大值。</p></blockquote><h5 id="时间复杂度：-1"><a href="#时间复杂度：-1" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>O(nm)</p></blockquote><h5 id="分析过程：-1"><a href="#分析过程：-1" class="headerlink" title="分析过程："></a>分析过程：</h5><blockquote><p>状态表示：f[i][j]，从前i个物品中选，其总体积不超过j的前提下，所有选法的总价值的最大值。<br>    属性：max<br>    状态计算：以最后一个物品是否选择划分：<br>    （1）不选：f[i][j] &#x3D; f[i - 1][j]<br>    （2）选：if (j &gt;&#x3D; v[i]) f[i][j] &#x3D; max(f[i][j], f[i][j - v[i]] + w[i]);（优化后的状态转移方程）</p><pre><code class="hljs">求方案数时，注意是否需要初始化。枚举体积一维的时候，注意是从1开始还是0开始，枚举体积时，由于每次用的是本层的状态，故需要从前往后枚举。</code></pre></blockquote><h5 id="状态转移方程：-1"><a href="#状态转移方程：-1" class="headerlink" title="状态转移方程："></a>状态转移方程：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">if</span> (j &gt;= v[i]) f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - v[i]] + w[i]);<br></code></pre></td></tr></table></figure><h3 id="3、多重背包："><a href="#3、多重背包：" class="headerlink" title="3、多重背包："></a>3、多重背包：</h3><h5 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>从n个物品中选，每个物品只能选若干次，总体积不超过m的情况下，求总价值的<br>    最大值。</p></blockquote><h5 id="分析过程：-2"><a href="#分析过程：-2" class="headerlink" title="分析过程："></a>分析过程：</h5><blockquote><p> 状态表示：从前i个物品中选，其总体积不超过j的前提下，所有选法的总价值的最大值。<br>    属性：max<br>    状态计算：以最后一个物品是否选择划分：<br>    （1）不选：f[i][j] &#x3D; f[i - 1][j]<br>    （2）选：由于每个物品可以选k次，故需要另外加一层循环，枚举每个物品选几个。<br>        for (int k &#x3D; 0; k &lt;&#x3D; s[i]; k ++)  O(n^3)<br>            if (j &gt;&#x3D; k * v[i]) f[i][j] &#x3D; max(f[i][j], f[i - 1][j - k * v[i]] + w[i] * k);</p><pre><code class="hljs">二进制优化：O(nlogsm)    将每种物品的k个物品，根据二进制进行打包成新的物品，全部打包后看作01背包做即可，注意此时的物品数量就不再是n了，而需要重新计算，并且需要注意此时的空间可能会爆掉，需要优化成一维数组，在优化的时候，由于每次用到的是上一层的状态，故不能先更新前面的状态，否则会影响结果，故需要从大到小枚举体积。    这里开数组时，需要多开一些空间，因为重新打包，物品种类就大于了N</code></pre><p>最坏情况，每种物品都有2000个，1000个物品，就需要打包成log2 * 1000 &#x3D; 11000，再加上我们的数组下标是从1开始存的，所以数组空间至少要开11001；</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++">暴力解：<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= s[i]; k ++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (j &gt;= v[i] * k) f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - v[i] * k] + w[i] * k);<br>            &#125;<br>二进制优化：     <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">15000</span>;<br><br>    <span class="hljs-type">int</span> v[N], w[N];<br>    <span class="hljs-type">int</span> f[N];<br>    <span class="hljs-type">int</span> n, m;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        cin &gt;&gt; n &gt;&gt; m;  <span class="hljs-comment">//种数和容量</span><br><br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>        &#123;<br>            <span class="hljs-type">int</span> a, b, s;    <span class="hljs-comment">//体积、价值、数量</span><br>            cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;<br><br>            <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (k &lt;= s)<br>            &#123;<br>                cnt ++;<br>                v[cnt] = a * k;<br>                w[cnt] = b * k;<br>                s -= k;<br>                k *= <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                cnt ++;<br>                v[cnt] = a * s;<br>                w[cnt] = b * s;<br>            &#125;<br>        &#125;<br><br>        n = cnt;        <span class="hljs-comment">//更新种数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= v[i]; j --)<br>                f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v[i]] + w[i]);<br><br>        cout &lt;&lt; f[m];<br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="4、分组背包："><a href="#4、分组背包：" class="headerlink" title="4、分组背包："></a>4、分组背包：</h3><h5 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>从n组物品中选，每组物品有若干个，同一组的物品只能选择一个，求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p></blockquote><h5 id="时间复杂度：-2"><a href="#时间复杂度：-2" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(nms)</p></blockquote><h5 id="分析过程：-3"><a href="#分析过程：-3" class="headerlink" title="分析过程："></a>分析过程：</h5><blockquote><p>集合：从n组物品中选，每组物品有若干个，同一组的物品只能选择一个，在总体积不超过j的情况下，所有选法的价值的最大值。<br>    属性：max<br>    状态计算：以最后一个组是否选择划分：<br>    （1）不选，f[i][j] &#x3D; f[i - 1][j]<br>    （2）选，由于每组有k个物品，故需要枚举这k个物品<br>        for (int k &#x3D; 1; k &lt;&#x3D; cnt[i]; k ++)<br>            if (j &gt;&#x3D; v[i][k]) f[i][j] &#x3D; max(f[i][j], f[i - 1][j - v[i][k]] + w[i][k]);</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)   <span class="hljs-comment">//每组物品</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">0</span>; j --)  <span class="hljs-comment">//容量</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= s[i]; k ++) <span class="hljs-comment">//枚举所有的选择</span><br>                <span class="hljs-keyword">if</span> (v[i][k] &lt;= j)   <span class="hljs-comment">//只有当容量能装得下，才有选的必要</span><br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);<br></code></pre></td></tr></table></figure><h3 id="5、混合背包："><a href="#5、混合背包：" class="headerlink" title="5、混合背包："></a>5、混合背包：</h3><h5 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h5><blockquote><p>有 N 种物品和一个容量是 V 的背包。物品有三种，分别是01背包，完全背包，多重背包，求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p></blockquote><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><blockquote><p>01背包、完全背包、多重背包三种背包问题放在一起，在计算状态的时候，判断是哪种背包，就用哪种状态转移方程即可。</p></blockquote><h5 id="代码模板：-2"><a href="#代码模板：-2" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> v, w, s;<br>        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>)     <span class="hljs-comment">//完全背包</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = v; j &lt;= m; j ++) f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - v] + w);<br>        &#125;<br>        <span class="hljs-keyword">else</span>    <span class="hljs-comment">//01背包是特殊的多重背包可以一起写，01背包是每种物品只有1件的多重背包</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (s == <span class="hljs-number">-1</span>) s = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= s; k *= <span class="hljs-number">2</span>) <span class="hljs-comment">//二进制优化多重背包，枚举几个物品分成一个新物品</span><br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= k * v; j --)   <span class="hljs-comment">//枚举每个新物品的体积</span><br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - k * v] + k * w);<br>                s -= k;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (s)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= s * v; j --)   <span class="hljs-comment">//将剩余不够分成新物品的物品，分成一组，枚举其体积</span><br>                    f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - s * v] + s * w);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓扑排序</title>
      <link href="/2023/04/03/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/04/03/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="拓扑排序："><a href="#拓扑排序：" class="headerlink" title="拓扑排序："></a>拓扑排序<span id="more"></span>：</h3><h5 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​    关键点就是将入度为0的点全部放入队列中，直到遍历完所有的点，如果队列中点的个数等于图中点的个数，<br>​    说明该图存在拓扑序列。</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> d[N];<br><span class="hljs-type">int</span> res[N], cnt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (d[i] == <span class="hljs-number">0</span>) <br>        &#123;<br>            q.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        res[ ++ cnt] = t;<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            d[j] --;<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">0</span>) <br>            &#123;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">topsort</span>())<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>    &#125;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​    （1）找到入度为0的点作根节点<br>​    （2）一定要将所有入度为0的点加入队列<br>​    （3）最后需要进行判断是否所有点都入队了，是则存在拓扑序，反之不存在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>质数 质因数 约数 公约数 快速幂</title>
      <link href="/2023/04/03/%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/04/03/%E6%95%B0%E8%AE%BA/%E5%9F%BA%E7%A1%80%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="质数-质因数-约数-公约数-快速幂"><a href="#质数-质因数-约数-公约数-快速幂" class="headerlink" title="质数 质因数 约数 公约数 快速幂"></a>质数 质因数 约数 公约数 快速幂<span id="more"></span></h2><h3 id="1、质数的判定————试除法"><a href="#1、质数的判定————试除法" class="headerlink" title="1、质数的判定————试除法"></a>1、质数的判定————试除法</h3><h5 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(sqrt(n))</p></blockquote><h5 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​    优化： | 表示整除，如果d | n，显然n &#x2F; d | n 一定成立，因为d的约数一定是成对出现的，而这一对就是d 和 n &#x2F; d，<br>故我们在枚举的时候，只需要枚举较小的那个就能判定当前这对是不是该数的约数，如下：<br>​    d &lt;&#x3D; n &#x2F; d， d ^ 2 &lt;&#x3D; n， d &lt;&#x3D; 根号n，就把上面的O(n)的复杂度降到了O(根号n)。</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n / i; i ++)<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>在判断的时候，一定要记得特判小于2的所有数，都不是质数。</p></blockquote><h3 id="2、分解质因数："><a href="#2、分解质因数：" class="headerlink" title="2、分解质因数："></a>2、分解质因数：</h3><h5 id="时间复杂度：-1"><a href="#时间复杂度：-1" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O（sqrt(N)）</p></blockquote><h5 id="核心思路：-1"><a href="#核心思路：-1" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​从小到大枚举所有数，即从小到大尝试n的所有质因数，并求其次数。</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++)<br>    <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            n /= i;.<br>            s ++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, s);<br>    &#125;<br><span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, n, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）、关于枚举时，为什么一定不会枚举到合数？<br>​    答： 当我们枚举到i时，就说明n当中，已经不包含任何2 ~ i - 1的质因子了，<br>​    然后n能整除i，说明i当中也不包含任何2 ~ i - 1的质因子了，因此i一定是一个质数<br>​（2）、n中最多只包含一个大于sqrt(n)的质因子，故在枚举时，可以先把所有小于sqrt(n)的质因子枚举出来，<br>​最后将大于sqrt(n)的质因子特判输出即可。————————这样时间复杂度就从O(n)降到了O(sqrt(n));</p></blockquote><h3 id="3、线性筛法：筛质数"><a href="#3、线性筛法：筛质数" class="headerlink" title="3、线性筛法：筛质数"></a>3、线性筛法：筛质数</h3><h5 id="时间复杂度：-2"><a href="#时间复杂度：-2" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(n)</p></blockquote><h5 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路:"></a>核心思路:</h5><blockquote><p>​    核心：每一个数i，只会被其最小质因子筛掉。<br>​        分析：在筛掉时候，是从小到大枚举所有质数，每次把当前质数和i的乘积筛掉，当 i % primes[j] &#x3D;&#x3D; 0成立时，<br>​        说明primes[j] 一定是i的最小质因子，因为primes[j]是从小到大枚举的，且所有的质数都放在了primes里。</p></blockquote><h5 id="代码模板：-2"><a href="#代码模板：-2" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++)<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><blockquote><p>​    1、因为prime中素数是递增的，所以如果i%prime[j]!&#x3D;0代表i的最小质因数还没有找到，<br>​    即i的最小质因数大于prime[j]。也就是说prime[j]就是iprime[j]的最小质因数，于是iprime[j]被它的最小质因数筛掉了。</p><p>​    2、如果当i%prime[j]&#x3D;&#x3D;0时，代表i的最小质因数是prime[j]，<br>​    那么iprimej+k这个合数的最小质因数就不是prime[j+k]而是prime[j]了。<br>​    所以iprime[j+k]应该被prime[j]筛掉，而不是后续的prime[j+k]。于是在此时break。</p><p>​    3、对于一个合数x，假设primes[j]是x的最小质因子，当i枚举到x &#x2F; primes[j]时，i就会被筛掉，且一定是被其最小质因子筛掉的。</p></blockquote><h3 id="4、试除法求约数"><a href="#4、试除法求约数" class="headerlink" title="4、试除法求约数"></a>4、试除法求约数</h3><h5 id="时间复杂度：-3"><a href="#时间复杂度：-3" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(sqrt(n))</p></blockquote><h5 id="核心思路：-2"><a href="#核心思路：-2" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​试除法求约数：<br>（1）i从1开始，遍历到n &#x2F; int<br>（2）每找到一个约数：<br>​    （2.1）就将它约数放入数组中，<br>​    （2.2）判断一个n &#x2F; i &#x3D;&#x3D; i，如果不相等，就把他放入数组中<br>（3）找完之后sort一下，即可获得从小到大的一个数的约数数组<br>​优化同质数，一个数的约数也是成对出现的，故在枚举时，直接枚举较小的约数即可，即i &lt;&#x3D; sqrt(n)</p></blockquote><h5 id="代码模板：-3"><a href="#代码模板：-3" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_divisors</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n / i; i ++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                res.<span class="hljs-built_in">push_back</span>(i);<br>                <span class="hljs-keyword">if</span> (i != n / i) res.<span class="hljs-built_in">push_back</span>(n / i);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">sort</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br><br>        <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、约数个数："><a href="#5、约数个数：" class="headerlink" title="5、约数个数："></a>5、约数个数：</h3><h5 id="核心思路：-3"><a href="#核心思路：-3" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​    N &#x3D; p1 ^ a1 * p2 ^ a2 * … * pk ^ ak<br>​    则约数个数为cnt &#x3D; (a1 + 1)(a2 + 2)…(ak + 1)，证明：<br>​                                    N &#x3D; p1 ^ a1 * p2 ^ a2 * … * pk ^ ak<br>​    因为N的任意一个约数d，都可以写作d &#x3D; p1 ^ b1 * p2 ^ b2 * … * pk ^ bk, 0 &lt;&#x3D; bi &lt;&#x3D; ai，<br>​    pi每一项的指数b如果不同，则构成的约数就不同，故对于每一个pi都有(ai + 1)种情况，故约数个数就有(ai + 1)个。<br>​    而对于N来说，N的每一个约数，都对应了b1 ~ bk的不同取法，则选法种数即为约数个数，<br>​    故约数个数则为cnt &#x3D; (a1 + 1)(a2 + 1)…(ak + 1)</p><p>​    int范围内，约数个数最多的数只有1500~1600个。</p></blockquote><h5 id="代码模板：-4"><a href="#代码模板：-4" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>  mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; primes;<br>    <span class="hljs-keyword">while</span> (n --)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                x /= i;<br>                primes[i] ++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) primes[x] ++;<br>    &#125;<br>    res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> prime : primes) res = res * (prime.second + <span class="hljs-number">1</span> ) % mod;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​约数个数 &#x3D; 分解质因数后，（所有指数 + 1）相乘</p></blockquote><h3 id="6、约数之和"><a href="#6、约数之和" class="headerlink" title="6、约数之和"></a>6、约数之和</h3><h5 id="核心思路：-4"><a href="#核心思路：-4" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​    N &#x3D; p1 ^ a1 * p2 ^ a2 * … * pk ^ ak<br>​    则约数之和为sum &#x3D; (p1 ^ 0 + p1 ^ 1 + … + p1 ^ a1) * … *(pk ^ 0 + pk ^ 1 + … + pk ^ ak)，证明：<br>​    用乘法分配律将上式展开，就是一堆乘积（） + 一堆乘积（） + （）…<br>​    而（）则是从上式括号中每一个括号中任取一项组成的，任意一堆乘积（）都是一个约数，<br>​    故这个公式就是将所有约数加在一起了。</p></blockquote><h5 id="代码模板：-5"><a href="#代码模板：-5" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; primes;<br><br>    <span class="hljs-keyword">while</span> (n --)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++)<br>        &#123;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                x /= i;<br>                primes[i] ++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) primes[x] ++;<br>    &#125;<br><br>    res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> prime : primes)<br>    &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> a = prime.first, b = prime.second;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (b --) t = (t * a + <span class="hljs-number">1</span>) % mod;<br>        res = res * t % mod;<br><br>    &#125;<br>    cout &lt;&lt; res;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​约数之和 &#x3D; 因式分解后（所有幂的0~其指数次方之和）的乘积</p></blockquote><h3 id="7、最大公约数："><a href="#7、最大公约数：" class="headerlink" title="7、最大公约数："></a>7、最大公约数：</h3><h5 id="核心思路-1"><a href="#核心思路-1" class="headerlink" title="核心思路:"></a>核心思路:</h5><blockquote><p>​    d | a, d | b，则d | (a + b) &#x3D; d | ax + by，<br>​    (a, b)的最大公约数 &#x3D; (b, a % b) 的最大公约数。</p><p>​    证明：a mod b &#x3D; a - (a&#x2F;b) * b &#x3D; a - c * b<br>​    (a, b) &#x3D; (b, a - c * b)，d | a, d | b，所以d | (a - c * b)成立<br>​    d | b, d | a - c * b,则d | a - c * b + c * b，即d | a，所以右边的公约数 &#x3D; 左边的公约数，左边的公约数等于右边的公约数<br>​    故，(a, b) &#x3D; (b, a mod b)成立</p></blockquote><h5 id="代码模板：-6"><a href="#代码模板：-6" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、快速幂："><a href="#8、快速幂：" class="headerlink" title="8、快速幂："></a>8、快速幂：</h3><h5 id="核心思路：-5"><a href="#核心思路：-5" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>反复平方法。<br>    预处理出来一些值：a ^ (2 ^ 0) mod p, a ^ (2 ^ 1) mod p,,,a ^ (2 ^ logk) modp的值,共logk个，<br>    用这些值去组合出a ^ k<br>    a ^ k &#x3D; a ^ (2 ^ x1) * a ^ (2 ^ x2) … * a ^ (2 ^ xt)<br>      &#x3D; a ^ (2 ^ x1 + 2 ^ x2 + …2 ^ xt)，即把k拆分成2^x1,2^x2,,,2^xt这logk个数的和。<br>（1）拆k的方式：把k用二进制表示，把二进制数下是1的位，加上其所属幂位即可，<br>    例k的二进制表示为： 110110，k &#x3D; 2^1 + w^2 + 2^4 + 2^5，<br>（2）如何预处理出我们所需要的值：<br>    第一个数a^(2^0) &#x3D; a^1 &#x3D; a,后面每个数都是前面一个数的平方。</p></blockquote><h5 id="代码模板：-7"><a href="#代码模板：-7" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//返回的就是a^k % p</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL) res * a % p;  <span class="hljs-comment">//当前位是1，则前位更新到答案中</span><br>        k &gt;&gt;= <span class="hljs-number">1</span>;    <span class="hljs-comment">//算过的位删掉</span><br>        a = (LL) a * a % p;<span class="hljs-comment">//把a变成下一个</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="注意：-4"><a href="#注意：-4" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​一定一定要注意每个运算的地方都要进行(long long)的转换，以及 取模%p</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基础数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树问题</title>
      <link href="/2023/04/01/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/01/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="两种最小生成树的解决方法"><a href="#两种最小生成树的解决方法" class="headerlink" title="两种最小生成树的解决方法"></a>两种最小生成树的解决方法<span id="more"></span></h2><h3 id="1、Prim算法："><a href="#1、Prim算法：" class="headerlink" title="1、Prim算法："></a>1、Prim算法：</h3><h5 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><p>​稠密图O(n^2）</p><blockquote><p>​（1）朴素版： O(n^2) —– 邻接矩阵<br>​（2）堆优化版：被kruskal完爆（×）</p></blockquote><h5 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​    先从某一个点开始，逐渐把所有点与该点连接起来，每次连通的时候，我们是选择当前这个<br>​    点所在的连通块，与外面连的所有边里，选择一条最短的一条边加入连通块中。每次扩展一个<br>   ​ 点进来，扩展n - 1次即可。</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<br>                t = j;<br><br>        <span class="hljs-keyword">if</span> (dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br>        res += dist[t];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//表示这个点已经加入集合</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Kruskal算法："><a href="#2、Kruskal算法：" class="headerlink" title="2、Kruskal算法："></a>2、Kruskal算法：</h3><h5 id="时间复杂度：-1"><a href="#时间复杂度：-1" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​稀疏图 并查集 + 快排</p></blockquote><h5 id="核心思路：-1"><a href="#核心思路：-1" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​基于并查集，先将所有边从小到大排序，每一次从小到大枚举所有边，当枚举到某一条边时，<br>   ​ 左边的一个点一定在某个连通块中，右边的点也一定在某一个连通块中，当前枚举的这条边<br>   ​ 可以分为几种情况：<br>  ​  （1）当前这条边连接的两个点已经连通了，那么就不用连接<br>  ​  （2）当前这条边连接的两个点不连通，那么久把这条边加到生成树中。<br>  ​  维护连通性可以用并查集。<br>​直接用结构体存下：a, b, w。</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><span class="hljs-comment">//定义结构体和重载小于号</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, w;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Edge &amp;W) <br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edges[M];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//并查集模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span><span class="hljs-comment">//kruskal模板</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(edges, edges + m); <span class="hljs-comment">//将所有边的权值相加</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) p[i] = i; <span class="hljs-comment">//初始化并查集</span><br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(a) != <span class="hljs-built_in">find</span>(b)) <span class="hljs-comment">//判断两个点是否在同一个集合里，</span><br>        &#123;<br>            p[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);   <span class="hljs-comment">//将两个点连上一条线</span><br>            res += w;   <span class="hljs-comment">//累加集合的权重</span><br>            cnt ++;     <span class="hljs-comment">//每加入一条边到集合里，就累加一次</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt &lt; n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> INF;    <span class="hljs-comment">//如果加入集合的次数，小于点的个数减一（n个点需要n-1条边连通），说明不连通</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路问题</title>
      <link href="/2023/03/31/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/31/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="五种最短路的解决方法"><a href="#五种最短路的解决方法" class="headerlink" title="五种最短路的解决方法"></a>五种最短路的解决方法<span id="more"></span></h2><h3 id="1、Dijkstra算法："><a href="#1、Dijkstra算法：" class="headerlink" title="1、Dijkstra算法："></a>1、Dijkstra算法：</h3><h5 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><p>​朴素版 O(n^2)，用于无负权边</p><h5 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​    每次找到集合中距离最短的边进行更新，并用这条确定的最短的边去扩展与他相连通的所有点，<br>​    并更新距离，用st[]数组标记已经找到了最短距离。<br>​稀疏图用邻接矩阵存，反之用邻接表存。</p></blockquote><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）邻接矩阵存边时，可以用g[a][b] &#x3D; min(g[a][b], c)，避免重边和自环，但也要先初始化memset(g,0x3f, sizeof g);</p></blockquote><h5 id="代码模板："><a href="#代码模板：" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">//第一个的点到起点的距离为0</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)    <span class="hljs-comment">//迭代n次，有n个点需要找到最短距离，每次迭代找一个最短距离</span><br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)   <span class="hljs-comment">//遍历所有点</span><br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))<span class="hljs-comment">//找到一条没有确定最短距离，且距离起点最近的一个点</span><br>                t = j;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++)   <span class="hljs-comment">//利用已经确定的最短距离，去更新他们邻点到起点的最短距离</span><br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], dist[t] + g[t][j]);<br><br>        st[t] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、堆优化版Dijkstra算法："><a href="#2、堆优化版Dijkstra算法：" class="headerlink" title="2、堆优化版Dijkstra算法："></a>2、堆优化版Dijkstra算法：</h3><h5 id="时间复杂度：-1"><a href="#时间复杂度：-1" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(mlogn)，用于无负权边。</p></blockquote><h5 id="核心思路：-1"><a href="#核心思路：-1" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​对朴素版 Dijkstra算法的核心进行优化，就是每次取出的是所有边中最短的边，<br>​我们可以利用小根堆去维护需要遍历的所有边，这样每次取出堆顶元素，即最短的边了。</p></blockquote><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）pair类型的优先队列是按照第一个关键词进行排序的，故第一位只能放距离。<br>​（2）邻接表初始化表头memset(h, -1, sizeof h);<br>​（3）初始化距离数组dist为 INF，便于寻找最短路径。</p></blockquote><h5 id="代码模板：-1"><a href="#代码模板：-1" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);    <span class="hljs-comment">//初始化起点到所有的点的距离为无穷大</span><br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">//初始化第一个点到起点的距离为0</span><br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;    <span class="hljs-comment">//创建一个PII类型的优先队列，小根堆</span><br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;);  <span class="hljs-comment">//将起点1，距离起点距离0，放入堆中</span><br><br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>()) <span class="hljs-comment">//只要堆中还有元素，就进行循环</span><br>    &#123;   <br>        <span class="hljs-keyword">auto</span> t = heap.<span class="hljs-built_in">top</span>();    <span class="hljs-comment">//每次取出堆顶，由于是小根堆，堆顶就是最小元素</span><br>        heap.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//将取出的堆顶删除，这里默认取出来之后，就是对该元素进行操作，表示已经求出了起点到堆顶元素的最小值</span><br><br>        <span class="hljs-type">int</span> ver = t.second, distance = t.first;     <span class="hljs-comment">//取出位置，和距离</span><br><br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//如果该点已经进行过操作，那么就跳过该元素，用于防止遍历已经操作过的元素了</span><br>        st[ver] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//进行到这一步，说明该点还没有找到最短距离，后续会进行查找，这里提前标记已经找到</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[ver]; i != <span class="hljs-number">-1</span>; i = ne[i])    <span class="hljs-comment">//对邻接表进行遍历，这里遍历的是h[ver]是ver为表头的邻接表的元素</span><br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];   <span class="hljs-comment">//存下当前点的值</span><br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[ver] + w[i]) <span class="hljs-comment">//如果当前的点到起点的距离小于原有距离（初始值或之前本次遍历时获得的值）</span><br>            &#123;<br>                dist[j] = dist[ver] + w[i]; <span class="hljs-comment">//更新dist最短距离的值</span><br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);    <span class="hljs-comment">//将该点的距离和位置放入堆中</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、Bellman-ford算法："><a href="#3、Bellman-ford算法：" class="headerlink" title="3、Bellman-ford算法："></a>3、Bellman-ford算法：</h3><h5 id="时间复杂度：-2"><a href="#时间复杂度：-2" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><p>​O(nm)，用于有数限制的最短路问题。<br>​与其他最短路算法不同是，Bellman-ford算法需要自己定义一个结构体，进行存边。</p><h5 id="核心思路：-2"><a href="#核心思路：-2" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>​（1）初始化dist数组，并初始化起点的距离<br>​（2）迭代k次，表示只能经过k条边<br>​（3）迭代所有边，即迭代m次，每次迭代前备份一下上一次的dist数组(last)，用于后续更新dist距离，<br>​（4）第m次时迭代更新与起点距离m条边及以内的点的最短距离（松弛）</p></blockquote><h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>​（1）if (dist[n] &gt; 0x3f3f3f3f &#x2F; 2) return 0，因为存在负权边。<br>​（2）每次都遍历会遍历所有边，有很多边是无效的，spfa算法针对这一点进行优化。</p></blockquote><h5 id="代码模板：-2"><a href="#代码模板：-2" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);        <span class="hljs-comment">//初始化所有的点到起点的距离都是无穷大</span><br><br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">//初始化第一个点到起点的距离为0</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i ++)    <span class="hljs-comment">//遍历k次， 表示经过k条边</span><br>    &#123;<br>        <span class="hljs-built_in">memcpy</span>(last, dist, <span class="hljs-keyword">sizeof</span> dist);    <span class="hljs-comment">//每次遍历备份一下上一次遍历结果的数组，因为可能在更新的时候，会改变dist，导致后续在更新时值不丢</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++)   <span class="hljs-comment">//有m个边需要去遍历,每次求出一条件的路径</span><br>        &#123;<br>            <span class="hljs-keyword">auto</span> e = edges[j];  <span class="hljs-comment">//将每一行的数据值（c）和方向（a-&gt;b）取出</span><br>            dist[e.b] = <span class="hljs-built_in">min</span>(dist[e.b], last[e.a] + e.c);    <span class="hljs-comment">//每次取出直接到达该点的距离和原有距离的最小值</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、Spfa算法："><a href="#4、Spfa算法：" class="headerlink" title="4、Spfa算法："></a>4、Spfa算法：</h3><h5 id="时间复杂度：-3"><a href="#时间复杂度：-3" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(m)是对bellman_ford算法中松弛一步的优化。不能含有负权回路。</p></blockquote><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><blockquote><p>​（1）初始化dist数组<br>​（2）定义一个循环队列，将需要更新最短距离的点加入队列中，这样就不用每次去寻找需要更新的边了<br>​（3）遍历队列中的元素，只要该元素所在的连通块中，存在新的最短距离，就将其加入队列中，去更新后面的元素距离。</p></blockquote><h5 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>（1）这里的st[]数组意义和Dijkstra算法不同，<br>        Dijkstra算法中st[]数组表示是否求出最短距离；<br>    Spfa算法中st[]数组表示某个点是否在队列中。<br>    （2）Spfa算法能求含负权边的原因，也是因为（1）中的特性，若存在负权边，就会去重新更新与该点连接的边的最短距离。<br>    （3）Spfa最坏情况是O(nm)<br>    （4）循环队列写法：</p><p>​hh &#x3D; 0, tt &#x3D; 0, q[tt ++] &#x3D; 1;<br>​while (hh !&#x3D; tt);<br>​int t &#x3D; q[hh++];<br>​if (tt &#x3D;&#x3D; N) tt &#x3D; 0;<br>​…<br>​q[tt ++] &#x3D; x;<br>​if (tt &#x3D;&#x3D; N) tt &#x3D; 0;</p><p>​(5)spfa算法最后判断的条件是dist[n] &#x3D;&#x3D; INF的原因是，bellman_ford算法会遍历所有的边，因此不管是不是和源点连通的边它都会得到更新；但spfa算法不一样，他相当于采用BFS，因此遍历到的结点都是与源点连通的，因此如果你要求的n和源点不连通，它不会得到更新，还是保持的0x3f3f3f3f。</p></blockquote><h5 id="代码模板：-3"><a href="#代码模板：-3" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);    <span class="hljs-comment">//初始化最初距离为无穷</span><br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">//初始化第一个点到起点的距离</span><br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;   <span class="hljs-comment">//定义一个队列用于存放待更新的值</span><br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//将起点放进去</span><br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//标记起点在队列中</span><br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())    <span class="hljs-comment">//只要队列中还存在需要更新的值，就继续进行循环</span><br>    &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();  <span class="hljs-comment">//取出队头元素</span><br>        q.<span class="hljs-built_in">pop</span>();    <span class="hljs-comment">//就队头元素删除</span><br><br>        st[t] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//标记该元素已经不在队列中了</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])  <span class="hljs-comment">//对邻接表进行遍历</span><br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];   <span class="hljs-comment">//将值存下来</span><br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])       <span class="hljs-comment">//如果队头元素的距离+下一个点的权值小于原有距离（初始化的值或者在之前遍历中所赋有的值）</span><br>            &#123;<br>                dist[j] = dist[t] + w[i];       <span class="hljs-comment">//更新距离</span><br>                <span class="hljs-keyword">if</span> (!st[j])                     <span class="hljs-comment">//如果这个点不在队列中，</span><br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);  <span class="hljs-comment">//就将其加入队列中，并进行标记</span><br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dist[n];<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、spfa算法判负环："><a href="#5、spfa算法判负环：" class="headerlink" title="5、spfa算法判负环："></a>5、spfa算法判负环：</h3><h5 id="时间复杂度：-4"><a href="#时间复杂度：-4" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(m)</p></blockquote><h5 id="核心思想："><a href="#核心思想：" class="headerlink" title="核心思想："></a>核心思想：</h5><blockquote><p>若图中存在负环，那么spfa算法就会一直不断地更新最短距离，故只要我们发现更新次数 &gt;&#x3D; n次，<br>就说明有负环，因为n个点只需要n - 1条边连接，故只需要更新n - 1次。<br>    故我们只需要在每次更新最短距离时，更新cnt[j] &#x3D; cnt[t] + 1即可，最后若更新次数 &gt;&#x3D; n次，就结束循环，返回true。<br>    注意：<br>    （1）这里需要注意，可能负环与起点1，不连通，故需要将所有点都加入到队列中，然后开始spfa算法遍历即可。</p></blockquote><h5 id="代码模板：-4"><a href="#代码模板：-4" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];   <span class="hljs-comment">//更新起点到某一个点的最短距离</span><br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;    <span class="hljs-comment">//更新起点到某一个点的最短距离的更新次数</span><br><br>                <span class="hljs-keyword">if</span> (cnt[t] &gt; n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    <span class="hljs-comment">//如果更新次数大于n，说明至少走过了n + 1个点，说明存在循环，即负权回路</span><br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、Floyd算法："><a href="#6、Floyd算法：" class="headerlink" title="6、Floyd算法："></a>6、Floyd算法：</h3><h5 id="时间复杂度：-5"><a href="#时间复杂度：-5" class="headerlink" title="时间复杂度："></a>时间复杂度：</h5><blockquote><p>​O(n^3)多源最短路问题。</p></blockquote><h5 id="核心思路：-3"><a href="#核心思路：-3" class="headerlink" title="核心思路："></a>核心思路：</h5><blockquote><p>基于DP：<br>    （1）状态表示：f[k][i][j]<br>        所有从i出发，最终走到j，且中间只经过节点编号不超过k的所有路径。<br>    （2）属性：min<br>    （3）状态计算：<br>        以第i个点是否在路径中进行划分：<br>            所有不包含节点k的路径：d[k - 1][i][j]<br>            所有包含节点k的路径：d[k - 1][i][k] + d[k - 1][k][j]<br>    （4）由于每次用的都是上一层的d，故可以把k层优化掉<br>        即d[i][j] &#x3D; min(d[i][j], d[i][k] + d[k][j])</p></blockquote><h5 id="注意：-4"><a href="#注意：-4" class="headerlink" title="注意："></a>注意：</h5><blockquote><p>（1）初始化：自环设置成d[i][j] &#x3D; 0，其他情况设置成INF，便于求min<br>（2）用邻接矩阵存边，直接d[a][b] &#x3D; min(d[a][b], c);</p></blockquote><h5 id="代码模板：-5"><a href="#代码模板：-5" class="headerlink" title="代码模板："></a>代码模板：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">初始化：<br>（<span class="hljs-number">1</span>）i != j，d[i][j] = <span class="hljs-number">0x3f3f3f3f</span>，无穷，便于后续求最短路<br>（<span class="hljs-number">2</span>）i == j，d[i][j] = <span class="hljs-number">0</span>，自环<br>实现：<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br><span class="hljs-comment">//i到j的最小距离距离=原有距离与上一个点的距离到起点的距离+上一点到当前点的距离的最小值</span><br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
